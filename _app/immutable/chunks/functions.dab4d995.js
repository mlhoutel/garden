import{S as B,i as J,s as K,k as o,r as A,a as b,l as e,m as c,u as H,h as s,c as v,p as l,b as t,F as h,n as R}from"./index.7aa01268.js";function N(L){let p,m,M,y,u,X=`<code class="language-js"><span class="token comment">// Dichotomic search: https://en.wikipedia.org/wiki/Dichotomic_search</span>

<span class="token function-variable function">dichotomy</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> target<span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">,</span> delta <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> delta <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> center <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>center<span class="token punctuation">)</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            end <span class="token operator">=</span> center
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            start <span class="token operator">=</span> center
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> start
<span class="token punctuation">&#125;</span>

<span class="token comment">// log(x) = 6.21516781 &lt;=> x = 500.166015625</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"log(x) = 6.21516781 &lt;=> x ="</span><span class="token punctuation">,</span> <span class="token function">dichotomy</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>log<span class="token punctuation">,</span> <span class="token number">6.21516781</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// sin(x) = 45 &lt;=> x = 0.7853981633974483</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"sin(x) = 45 &lt;=> x ="</span><span class="token punctuation">,</span> <span class="token function">dichotomy</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>sin<span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// exp(x) = 7.38905609893065 &lt;=> x = 1.9999999995343387</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"exp(x) = 7.38905609893065 &lt;=> x ="</span><span class="token punctuation">,</span> <span class="token function">dichotomy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">exp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">7.38905609893065</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0.000000001</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,_,i,d,F,w,k,S=`<code class="language-js"><span class="token comment">// Fixpoint : https://en.wikipedia.org/wiki/Fixed-point_iteration</span>

<span class="token function-variable function">fixpoint</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> start<span class="token punctuation">,</span> delta</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token constant">MAX_ITER</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">// max number or iteration before stopping</span>

    <span class="token function-variable function">iter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fx<span class="token punctuation">,</span> value<span class="token punctuation">,</span> delta<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">></span> <span class="token constant">MAX_ITER</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Method doesn't converges with the start at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>start<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> in the allowed duration (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">MAX_ITER</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> iters)</span><span class="token template-punctuation string">&#96;</span></span>

        <span class="token keyword">const</span> next <span class="token operator">=</span> <span class="token function">fx</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>value <span class="token operator">-</span> next<span class="token punctuation">)</span> <span class="token operator">&lt;</span> delta<span class="token punctuation">)</span> <span class="token keyword">return</span> value

        <span class="token keyword">return</span> <span class="token function">iter</span><span class="token punctuation">(</span>fx<span class="token punctuation">,</span> next<span class="token punctuation">,</span> delta<span class="token punctuation">,</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function-variable function">fx</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">+</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token function">iter</span><span class="token punctuation">(</span>fx<span class="token punctuation">,</span> <span class="token function">fx</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">,</span> delta<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// sin(x) = 0 &lt;=> x = 3.1415926520823465</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"sin(x) = 0 &lt;=> x ="</span><span class="token punctuation">,</span> <span class="token function">fixpoint</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>sin<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.0001</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// cos(x) = 0 &lt;=> x = 1.5707963255168476</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"cos(x) = 0 &lt;=> x ="</span><span class="token punctuation">,</span> <span class="token function">fixpoint</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>cos<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.0001</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,g,r,x,j,E,f,$=`<code class="language-js"><span class="token function-variable function">derivative</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> x<span class="token punctuation">,</span> delta</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>x <span class="token operator">+</span> delta<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">fx</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> delta

<span class="token function-variable function">taylor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> x<span class="token punctuation">,</span> delta</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>x <span class="token operator">+</span> delta<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">fx</span><span class="token punctuation">(</span>x <span class="token operator">-</span> delta<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> delta<span class="token punctuation">)</span></code>`;return{c(){p=o("h2"),m=o("a"),M=A("Dichotomy"),y=b(),u=o("pre"),_=b(),i=o("h2"),d=o("a"),F=A("Fixpoint"),w=b(),k=o("pre"),g=b(),r=o("h2"),x=o("a"),j=A("Gradient"),E=b(),f=o("pre"),this.h()},l(n){p=e(n,"H2",{id:!0});var a=c(p);m=e(a,"A",{href:!0});var T=c(m);M=H(T,"Dichotomy"),T.forEach(s),a.forEach(s),y=v(n),u=e(n,"PRE",{class:!0});var q=c(u);q.forEach(s),_=v(n),i=e(n,"H2",{id:!0});var D=c(i);d=e(D,"A",{href:!0});var I=c(d);F=H(I,"Fixpoint"),I.forEach(s),D.forEach(s),w=v(n),k=e(n,"PRE",{class:!0});var C=c(k);C.forEach(s),g=v(n),r=e(n,"H2",{id:!0});var P=c(r);x=e(P,"A",{href:!0});var G=c(x);j=H(G,"Gradient"),G.forEach(s),P.forEach(s),E=v(n),f=e(n,"PRE",{class:!0});var z=c(f);z.forEach(s),this.h()},h(){l(m,"href","#dichotomy"),l(p,"id","dichotomy"),l(u,"class","language-js"),l(d,"href","#fixpoint"),l(i,"id","fixpoint"),l(k,"class","language-js"),l(x,"href","#gradient"),l(r,"id","gradient"),l(f,"class","language-js")},m(n,a){t(n,p,a),h(p,m),h(m,M),t(n,y,a),t(n,u,a),u.innerHTML=X,t(n,_,a),t(n,i,a),h(i,d),h(d,F),t(n,w,a),t(n,k,a),k.innerHTML=S,t(n,g,a),t(n,r,a),h(r,x),h(x,j),t(n,E,a),t(n,f,a),f.innerHTML=$},p:R,i:R,o:R,d(n){n&&s(p),n&&s(y),n&&s(u),n&&s(_),n&&s(i),n&&s(w),n&&s(k),n&&s(g),n&&s(r),n&&s(E),n&&s(f)}}}const Q={title:"Functions",short:"Dichotomy, Fixpoint method and Gradients",topic:"maths functions-solving"};class U extends B{constructor(p){super(),J(this,p,null,N,K,{})}}export{U as default,Q as metadata};
