import{S as yn,i as gn,s as hn,k as t,r as H,a as u,l as o,m as e,u as R,h as s,c as k,p as c,b as p,F as l,n as U}from"./index.7aa01268.js";function En(en){let i,E,z,M,r,cn='<code class="language-js"><span class="token constant">TODO</span></code>',N,m,I,q,A,f,ln=`<code class="language-js"><span class="token comment">// factorial : https://en.wikipedia.org/wiki/Factorial</span>
<span class="token comment">// binomial coefficient : https://en.wikipedia.org/wiki/Binomial_coefficient</span>

<span class="token function-variable function">factorial</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> n <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token function-variable function">binomial</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        a <span class="token operator">*=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
        b <span class="token operator">*=</span> k
        k<span class="token operator">--</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> a <span class="token operator">/</span> b
<span class="token punctuation">&#125;</span>

<span class="token comment">// !3 = 6</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"!3 ="</span><span class="token punctuation">,</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// !10 = 3628800</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"!10 ="</span><span class="token punctuation">,</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// (10 20) = 184756</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"(10 20) ="</span><span class="token punctuation">,</span> <span class="token function">binomial</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// (3 7) = 35</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"(3 7) ="</span><span class="token punctuation">,</span> <span class="token function">binomial</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,L,d,x,B,T,b,un=`<code class="language-js"><span class="token comment">// Positive modulo : https://en.wikipedia.org/wiki/Modulo_operation</span>
<span class="token comment">// For every input I and N, we want to assert that the result of the modulo is a positive number.</span>

<span class="token keyword">const</span> <span class="token constant">I</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">62</span>
<span class="token keyword">const</span> <span class="token constant">N</span> <span class="token operator">=</span> <span class="token number">34</span>

<span class="token function-variable function">positive_modulo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>i <span class="token operator">%</span> n <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n

<span class="token comment">// mod = -28</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"mod ="</span><span class="token punctuation">,</span> <span class="token constant">I</span> <span class="token operator">%</span> <span class="token constant">N</span><span class="token punctuation">)</span>

<span class="token comment">// pos = 6</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pos ="</span><span class="token punctuation">,</span> <span class="token function">positive_modulo</span><span class="token punctuation">(</span><span class="token constant">I</span><span class="token punctuation">,</span> <span class="token constant">N</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,F,w,D,J,V,v,kn=`<code class="language-js"><span class="token comment">// pgcd : https://en.wikipedia.org/wiki/Greatest_common_divisor</span>
<span class="token comment">// ppcm : https://en.wikipedia.org/wiki/Least_common_multiple</span>

pgcd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token function">pgcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>
ppcm <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">pgcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// pgcd 25 10 = 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pgcd 25 10 ="</span><span class="token punctuation">,</span> <span class="token function">pgcd</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// ppcm 25 10 = 50</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ppcm 25 10 ="</span><span class="token punctuation">,</span> <span class="token function">ppcm</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// pgcd 25 30 10 15] = 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"pgcd 25 30 10 15] ="</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">pgcd</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// ppcm 25 30 10 15 = 150</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ppcm 25 30 10 15 ="</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">ppcm</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,C,_,P,K,O,y,rn=`<code class="language-js"><span class="token comment">// Exponentiation : https://en.wikipedia.org/wiki/Exponentiation</span>

<span class="token keyword">const</span> <span class="token constant">I</span> <span class="token operator">=</span> <span class="token number">12</span>
<span class="token keyword">const</span> <span class="token constant">N</span> <span class="token operator">=</span> <span class="token number">7</span>

<span class="token function-variable function">div</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>i <span class="token operator">/</span> n<span class="token punctuation">)</span> <span class="token comment">// integer division</span>

<span class="token comment">// O(n) power function</span>
<span class="token function-variable function">pow</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token operator">=></span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> i <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment">// O(log(n)) power function</span>
<span class="token function-variable function">pow_opt</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token constant">DIVIDER</span> <span class="token operator">=</span> <span class="token number">2</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">pow_rec</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i

        <span class="token keyword">const</span> remain <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token constant">DIVIDER</span>
        <span class="token keyword">const</span> mult <span class="token operator">=</span> remain <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">div</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token constant">DIVIDER</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">DIVIDER</span><span class="token punctuation">)</span>
        
        <span class="token keyword">const</span> rec <span class="token operator">=</span> <span class="token function">pow_opt</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> mult<span class="token punctuation">)</span>
        <span class="token keyword">let</span> val <span class="token operator">=</span> rec
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token constant">DIVIDER</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> val <span class="token operator">*=</span> rec
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> remain<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> val <span class="token operator">*=</span> i
    
        <span class="token keyword">return</span> val
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>                <span class="token comment">// zero pow</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">pow_rec</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span>     <span class="token comment">// positive pow</span>
    <span class="token keyword">return</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">pow_rec</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">-</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment">// negative pow</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 12^7 = 35831808</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"12^7 ="</span><span class="token punctuation">,</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token constant">I</span><span class="token punctuation">,</span> <span class="token constant">N</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 12^7 (2) = 35831808</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"12^7 (2) ="</span><span class="token punctuation">,</span> <span class="token function">pow_opt</span><span class="token punctuation">(</span><span class="token constant">I</span><span class="token punctuation">,</span> <span class="token constant">N</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 12^7 (3) = 35831808</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"12^7 (3) ="</span><span class="token punctuation">,</span> <span class="token function">pow_opt</span><span class="token punctuation">(</span><span class="token constant">I</span><span class="token punctuation">,</span> <span class="token constant">N</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 12^7 (4) = 35831808</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"12^7 (4) ="</span><span class="token punctuation">,</span> <span class="token function">pow_opt</span><span class="token punctuation">(</span><span class="token constant">I</span><span class="token punctuation">,</span> <span class="token constant">N</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,G,g,j,Q,S,h,mn=`<code class="language-js"><span class="token comment">// Prime factors: https://simple.wikipedia.org/wiki/Prime_factorization</span>
<span class="token comment">// Crible primes: https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes</span>

<span class="token function-variable function">factors</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">2</span>
    <span class="token keyword">const</span> primes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">*</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            primes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>
            n <span class="token operator">/=</span> k
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            k<span class="token operator">++</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> primes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>

    <span class="token keyword">return</span> primes
<span class="token punctuation">&#125;</span>

<span class="token function-variable function">crible</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">max<span class="token punctuation">,</span> number <span class="token operator">=</span> <span class="token number">1000000</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> primes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> primes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> max <span class="token operator">&amp;&amp;</span> primes<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> number<span class="token punctuation">;</span> p <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> prime <span class="token operator">=</span> <span class="token boolean">true</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> pp <span class="token keyword">of</span> primes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">%</span> pp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                prime <span class="token operator">=</span> <span class="token boolean">false</span>
                <span class="token keyword">break</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>prime<span class="token punctuation">)</span> primes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> primes
<span class="token punctuation">&#125;</span>

<span class="token comment">// factors 120 = [ 2, 2, 2, 3, 5 ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"factors 120 ="</span><span class="token punctuation">,</span> <span class="token function">factors</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// crible 1000 = [ 2, 3, 5, 7, 11, 13, ...]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"crible 1000 ="</span><span class="token punctuation">,</span> <span class="token function">crible</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`;return{c(){i=t("h2"),E=t("a"),z=H("Derivative"),M=u(),r=t("pre"),N=u(),m=t("h2"),I=t("a"),q=H("Factorial"),A=u(),f=t("pre"),L=u(),d=t("h2"),x=t("a"),B=H("Modulo"),T=u(),b=t("pre"),F=u(),w=t("h2"),D=t("a"),J=H("PGCD"),V=u(),v=t("pre"),C=u(),_=t("h2"),P=t("a"),K=H("Power"),O=u(),y=t("pre"),G=u(),g=t("h2"),j=t("a"),Q=H("Prime"),S=u(),h=t("pre"),this.h()},l(n){i=o(n,"H2",{id:!0});var a=e(i);E=o(a,"A",{href:!0});var W=e(E);z=R(W,"Derivative"),W.forEach(s),a.forEach(s),M=k(n),r=o(n,"PRE",{class:!0});var fn=e(r);fn.forEach(s),N=k(n),m=o(n,"H2",{id:!0});var X=e(m);I=o(X,"A",{href:!0});var Y=e(I);q=R(Y,"Factorial"),Y.forEach(s),X.forEach(s),A=k(n),f=o(n,"PRE",{class:!0});var dn=e(f);dn.forEach(s),L=k(n),d=o(n,"H2",{id:!0});var Z=e(d);x=o(Z,"A",{href:!0});var $=e(x);B=R($,"Modulo"),$.forEach(s),Z.forEach(s),T=k(n),b=o(n,"PRE",{class:!0});var bn=e(b);bn.forEach(s),F=k(n),w=o(n,"H2",{id:!0});var nn=e(w);D=o(nn,"A",{href:!0});var sn=e(D);J=R(sn,"PGCD"),sn.forEach(s),nn.forEach(s),V=k(n),v=o(n,"PRE",{class:!0});var wn=e(v);wn.forEach(s),C=k(n),_=o(n,"H2",{id:!0});var an=e(_);P=o(an,"A",{href:!0});var pn=e(P);K=R(pn,"Power"),pn.forEach(s),an.forEach(s),O=k(n),y=o(n,"PRE",{class:!0});var vn=e(y);vn.forEach(s),G=k(n),g=o(n,"H2",{id:!0});var tn=e(g);j=o(tn,"A",{href:!0});var on=e(j);Q=R(on,"Prime"),on.forEach(s),tn.forEach(s),S=k(n),h=o(n,"PRE",{class:!0});var _n=e(h);_n.forEach(s),this.h()},h(){c(E,"href","#derivative"),c(i,"id","derivative"),c(r,"class","language-js"),c(I,"href","#factorial"),c(m,"id","factorial"),c(f,"class","language-js"),c(x,"href","#modulo"),c(d,"id","modulo"),c(b,"class","language-js"),c(D,"href","#pgcd"),c(w,"id","pgcd"),c(v,"class","language-js"),c(P,"href","#power"),c(_,"id","power"),c(y,"class","language-js"),c(j,"href","#prime"),c(g,"id","prime"),c(h,"class","language-js")},m(n,a){p(n,i,a),l(i,E),l(E,z),p(n,M,a),p(n,r,a),r.innerHTML=cn,p(n,N,a),p(n,m,a),l(m,I),l(I,q),p(n,A,a),p(n,f,a),f.innerHTML=ln,p(n,L,a),p(n,d,a),l(d,x),l(x,B),p(n,T,a),p(n,b,a),b.innerHTML=un,p(n,F,a),p(n,w,a),l(w,D),l(D,J),p(n,V,a),p(n,v,a),v.innerHTML=kn,p(n,C,a),p(n,_,a),l(_,P),l(P,K),p(n,O,a),p(n,y,a),y.innerHTML=rn,p(n,G,a),p(n,g,a),l(g,j),l(j,Q),p(n,S,a),p(n,h,a),h.innerHTML=mn},p:U,i:U,o:U,d(n){n&&s(i),n&&s(M),n&&s(r),n&&s(N),n&&s(m),n&&s(A),n&&s(f),n&&s(L),n&&s(d),n&&s(T),n&&s(b),n&&s(F),n&&s(w),n&&s(V),n&&s(v),n&&s(C),n&&s(_),n&&s(O),n&&s(y),n&&s(G),n&&s(g),n&&s(S),n&&s(h)}}}const xn={title:"Analysis",short:"Derivative, factorial, modulo and prime numbers",topic:"maths analysis"};class Dn extends yn{constructor(i){super(),gn(this,i,null,En,hn,{})}}export{Dn as default,xn as metadata};
