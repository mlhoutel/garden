import{S as wB,i as TB,s as CB,k as t,r as p,a as l,l as o,m as e,u as c,h as s,c as u,p as k,b as i,F as n,n as VT}from"./index.7aa01268.js";function DB(vI){let Zn,Ht,Pm,Yd,Vs,Gt,Rm,Xd,hn,Lm,Kp,Im,Bm,Yp,xm,Nm,Xp,Wm,Hm,Jd,Wn,Gm,Jp,Mm,Um,Zp,zm,qm,Zd,Hn,Fm,$p,Vm,Qm,nc,jm,Km,$d,Qs,Mt,Ym,nf,mn,Xm,sc,Jm,Zm,ac,$m,n2,tc,s2,a2,sf,Gn,t2,oc,o2,e2,ec,p2,c2,af,js,Ut,l2,tf,Ks,zt,u2,of,Ys,EI=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ef,d,r2,pc,i2,k2,cc,d2,f2,lc,h2,m2,uc,v2,E2,rc,_2,b2,ic,y2,w2,kc,T2,C2,dc,D2,g2,fc,O2,A2,pf,x,S2,hc,P2,R2,mc,L2,I2,vc,B2,x2,Ec,N2,W2,_c,H2,G2,cf,Xs,qt,M2,lf,vn,U2,bc,z2,q2,yc,F2,V2,wc,Q2,j2,uf,os,K2,Js,Y2,X2,rf,Ft,J2,kf,es,Vt,Z2,Zs,$2,nv,Qt,sv,$s,av,df,fn,tv,jt,ov,ev,Tc,pv,cv,Cc,lv,uv,na,rv,ff,ps,Dc,iv,kv,Kt,dv,sa,fv,hf,aa,Yt,hv,mf,Mn,ta,Rn,mv,gc,vv,Ev,Oc,_v,bv,Ac,yv,wv,Tv,Ln,Sc,cs,Cv,Pc,Dv,gv,Rc,Ov,Av,Lc,oa,Sv,Ic,Pv,Rv,Lv,ea,Bc,Iv,Bv,In,xc,En,xv,Nc,Nv,Wv,Wc,Hv,Gv,Hc,Mv,Uv,Gc,zv,qv,Mc,pa,Fv,Uc,Vv,Qv,jv,zc,ls,Kv,qc,Yv,Xv,Fc,Jv,Zv,Vc,$n,$v,Qc,nE,sE,jc,aE,tE,oE,Kc,us,eE,Yc,pE,cE,Xc,lE,uE,ca,Xt,rE,Jc,iE,kE,Bn,Zc,$c,dE,fE,nl,Jt,hE,sl,mE,vE,al,Zt,EE,tl,_E,bE,ol,$t,yE,el,wE,TE,pl,xn,CE,cl,DE,gE,ll,OE,AE,ul,SE,PE,vf,la,no,RE,Ef,so,h,LE,rl,IE,BE,il,xE,NE,kl,WE,HE,dl,GE,ME,fl,UE,zE,ua,qE,FE,hl,VE,QE,_f,ao,jE,bf,to,ml,KE,yf,Un,YE,vl,XE,JE,El,ZE,$E,wf,oo,n_,Tf,eo,_l,s_,Cf,zn,rs,bl,a_,t_,yl,o_,e_,p_,po,wl,c_,l_,u_,qn,Tl,r_,i_,Cl,k_,d_,Dl,f_,h_,Df,co,m_,gf,Fn,v_,gl,E_,__,Ol,b_,y_,Of,K,lo,Al,w_,T_,C_,uo,Sl,D_,g_,O_,ro,Pl,A_,S_,P_,io,Rl,R_,L_,I_,ko,Ll,B_,x_,Af,fo,N_,Sf,ho,Il,W_,Pf,mo,Bl,H_,Rf,vo,G_,Lf,Eo,xl,M_,If,_o,Nl,U_,Bf,Vn,z_,Wl,q_,F_,Hl,V_,Q_,xf,_n,bo,Gl,j_,K_,Y_,yo,Ml,X_,J_,Z_,wo,Ul,$_,n3,s3,To,zl,a3,t3,Nf,Co,ns,o3,ql,e3,p3,Fl,c3,l3,Wf,Do,u3,Hf,Qn,r3,Vl,i3,k3,Ql,d3,f3,Gf,is,jl,H,Kl,h3,m3,Yl,v3,E3,Xl,_3,b3,Jl,y3,w3,Zl,T3,C3,$l,D3,g3,G,M,nu,su,O3,A3,au,S3,P3,tu,R3,L3,ou,I3,B3,eu,x3,N3,pu,W3,H3,U,cu,lu,G3,M3,uu,U3,z3,ru,q3,F3,iu,V3,Q3,ku,j3,K3,du,Y3,X3,z,fu,hu,J3,Z3,mu,$3,nb,vu,sb,ab,Eu,tb,ob,_u,eb,pb,bu,cb,lb,q,yu,wu,ub,rb,Tu,ib,kb,Cu,db,fb,Du,hb,mb,gu,vb,Eb,Ou,_b,bb,F,Au,Su,yb,wb,Pu,Tb,Cb,Ru,Db,gb,Lu,Ob,Ab,Iu,Sb,Pb,Bu,Rb,Lb,V,xu,Nu,Ib,Bb,Wu,xb,Nb,Hu,Wb,Hb,Gu,Gb,Mb,Mu,Ub,zb,Uu,qb,Mf,go,Oo,Fb,ra,Vb,Uf,ia,Ao,Qb,zf,ka,So,jb,qf,jn,Kb,zu,Yb,Xb,qu,Jb,Zb,Ff,ks,Po,Fu,$b,n5,s5,Ro,Vu,a5,t5,Vf,Lo,o5,Qf,v,da,Qu,e5,p5,ju,c5,l5,fa,Ku,u5,r5,Yu,i5,k5,ha,Xu,d5,f5,Ju,h5,m5,ma,Zu,v5,E5,$u,_5,b5,va,nr,y5,w5,sr,T5,C5,Ea,ar,D5,g5,tr,O5,A5,_a,or,S5,P5,er,R5,jf,Io,Bo,L5,ba,I5,Kf,ya,xo,B5,Yf,Kn,x5,pr,N5,W5,cr,H5,G5,Xf,No,Wo,M5,wa,U5,Jf,Ta,z5,lr,q5,Zf,Ca,_I='<code class="language-cpp">sf<span class="token double-colon punctuation">::</span>RectangleShape <span class="token function">rectangle</span><span class="token punctuation">(</span>sf<span class="token double-colon punctuation">::</span><span class="token function">Vector2f</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',$f,Da,F5,ur,V5,n1,ga,bI=`<code class="language-cpp"><span class="token keyword">namespace</span> sf <span class="token punctuation">&#123;</span>
  RectangleShape <span class="token function">rectangle</span><span class="token punctuation">(</span><span class="token function">Vector2f</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,s1,Oa,Q5,rr,j5,a1,Aa,yI=`<code class="language-cpp"><span class="token keyword">using</span> <span class="token keyword">namespace</span> sf<span class="token punctuation">;</span>

RectangleShape <span class="token function">rectangle</span><span class="token punctuation">(</span><span class="token function">Vector2f</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,t1,Ho,Yn,ir,K5,Y5,kr,X5,J5,dr,Z5,$5,o1,Sa,Go,n0,e1,Pa,Mo,s0,p1,Uo,zo,a0,Ra,t0,c1,qo,fr,o0,l1,Y,Fo,hr,e0,p0,c0,Vo,mr,l0,u0,r0,Qo,vr,i0,k0,d0,La,Er,f0,h0,Ia,m0,v0,jo,_r,E0,_0,u1,Ba,Ko,b0,r1,xa,Yo,y0,i1,bn,br,w0,T0,yr,C0,D0,wr,g0,O0,Tr,A0,k1,Xo,Cr,S0,d1,ds,Dr,E,gr,P0,R0,Or,L0,I0,Ar,B0,x0,Sr,N0,W0,Pr,H0,G0,Rr,M0,U0,Lr,z0,q0,m,y,Na,F0,Ir,V0,Q0,j0,Br,xr,K0,Y0,Nr,Wr,X0,J0,Jo,Z0,fs,$0,Hr,n4,s4,a4,Zo,t4,hs,o4,Gr,e4,p4,c4,Mr,Ur,l4,u4,Wa,zr,r4,i4,qr,k4,d4,w,Ha,f4,Fr,h4,m4,v4,Vr,Qr,E4,_4,jr,Kr,b4,y4,$o,w4,ne,T4,C4,se,D4,ms,g4,Yr,O4,A4,S4,Xr,Jr,P4,R4,Ga,Zr,L4,I4,$r,B4,x4,T,ae,N4,ni,W4,H4,si,ai,G4,M4,ti,oi,U4,z4,te,q4,vs,F4,ei,V4,Q4,j4,oe,K4,Es,Y4,pi,X4,J4,Z4,ci,li,$4,ny,Ma,ui,sy,ay,ri,ty,oy,C,ee,ey,ii,py,cy,ki,di,ly,uy,fi,hi,ry,iy,pe,ky,ce,dy,fy,le,hy,_s,my,mi,vy,Ey,_y,vi,Ei,by,yy,Ua,_i,wy,Ty,bi,Cy,Dy,D,za,gy,yi,Oy,Ay,Sy,wi,Ti,Py,Ry,Ci,Di,Ly,Iy,ue,By,bs,xy,gi,Ny,Wy,Hy,re,Gy,ys,My,Oi,Uy,zy,qy,Ai,Si,Fy,Vy,Pi,Ri,Qy,jy,g,qa,Ky,Li,Yy,Xy,Jy,Ii,Bi,Zy,$y,xi,Ni,nw,sw,ie,aw,ke,tw,ow,de,ew,ws,pw,Wi,cw,lw,uw,Hi,Gi,rw,iw,Mi,Ui,kw,dw,O,Fa,fw,zi,hw,mw,vw,qi,Fi,Ew,_w,Vi,Qi,bw,yw,fe,ww,Ts,Tw,ji,Cw,Dw,gw,he,Ow,Cs,Aw,Ki,Sw,Pw,Rw,Yi,Xi,Lw,Iw,Ji,Zi,Bw,xw,A,Va,Nw,$i,Ww,Hw,Gw,nk,sk,Mw,Uw,ak,tk,zw,qw,me,Fw,ve,Vw,Qw,Ee,jw,Ds,Kw,ok,Yw,Xw,Jw,ek,pk,Zw,$w,ck,lk,n6,f1,_e,uk,s6,h1,be,rk,a6,m1,gs,ik,_,kk,t6,o6,dk,e6,p6,fk,c6,l6,hk,u6,r6,mk,i6,k6,vk,d6,f6,Ek,h6,m6,Q,S,ye,v6,_k,E6,_6,bk,yk,b6,y6,wk,Tk,w6,T6,we,C6,Os,D6,Ck,g6,O6,A6,Te,S6,As,P6,Dk,R6,L6,I6,gk,Ok,B6,x6,Ak,Sk,N6,W6,P,Ce,H6,Pk,G6,M6,Rk,Lk,U6,z6,Ik,Bk,q6,F6,De,V6,ge,Q6,j6,Oe,K6,Ss,Y6,xk,X6,J6,Z6,Nk,Wk,$6,n7,v1,s7,R,Ae,a7,Hk,t7,o7,Gk,Mk,e7,p7,Uk,zk,c7,l7,Se,u7,Pe,r7,i7,Re,k7,Ps,d7,qk,f7,h7,m7,Fk,Vk,v7,E7,E1,_7,L,Le,b7,Qk,y7,w7,jk,Kk,T7,C7,Yk,Xk,D7,g7,Ie,O7,Be,A7,S7,xe,P7,Rs,R7,Jk,L7,I7,B7,Zk,$k,x7,N7,_1,W7,I,Ne,H7,nd,G7,M7,sd,ad,U7,z7,td,od,q7,F7,We,V7,He,Q7,j7,Ge,K7,Ls,Y7,ed,X7,J7,Z7,pd,cd,$7,n8,b1,s8,B,Me,a8,ld,t8,o8,ud,rd,e8,p8,id,kd,c8,l8,Ue,u8,ze,r8,i8,qe,k8,Is,d8,dd,f8,h8,m8,fd,hd,v8,E8,y1,w1,Fe,md,_8,T1,Ve,Qe,b8,Qa,y8,C1,ja,je,w8,D1,Ka,wI=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

	<span class="token comment">// We define the age variable as an Integer</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span> 

	<span class="token comment">// We use printf to output a line of text from a string</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter an integer for your age: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	
	<span class="token comment">// Scanf convert the input variable and put it in age by reference. </span>
	<span class="token comment">// It will not stop until scanf detect a non null "string" input.</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%i"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> 

	<span class="token comment">// Then we use printf to output the string with the variable.</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You are %i years old.&#92;nGreat!"</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// fflush clean the output buffer, it discards any buffered data that has been fetched from </span>
	<span class="token comment">// the underlying output file, but has not been consumed by the application. Thanks to that</span>
	<span class="token comment">// we are sure to have a clean output the next time we call the function printf.</span>
	<span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,g1,Ke,vd,T8,O1,Ya,TI=`<code class="language-undefined">Enter an integer for your age: 19
You are 19 years old.
Great!</code>`,A1,Ye,C8,S1,Xe,Nn,D8,Ed,g8,O8,_d,A8,S8,bd,P8,R8,P1,Je,b,L8,yd,I8,B8,wd,x8,N8,Td,W8,H8,Cd,G8,M8,Ze,CI='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{31}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>',U8,Dd,z8,q8,gd,F8,R1,Xa,$e,V8,L1,np,Od,Q8,I1,Ja,DI=`<code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

	<span class="token comment">// Variable declaration and Operators</span>
	<span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

	value <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 10+5 = 15</span>
	value <span class="token operator">-=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 15-3 = 12</span>
	value <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 12*2 = 24</span>
	value <span class="token operator">/=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 24/4 = 6</span>

	value<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 6+1 = 7</span>
	<span class="token operator">++</span>value<span class="token punctuation">;</span> <span class="token comment">// 7+1 = 8</span>

	value<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 8-1 = 7</span>
	<span class="token operator">--</span>value<span class="token punctuation">;</span> <span class="token comment">// 7-1 = 6</span>

	<span class="token comment">// Binary Operators</span>
	<span class="token keyword">int</span> binA <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">,</span> binB <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>

	binA <span class="token operator">&amp;</span> binB <span class="token comment">// 60 AND 6 = 4</span>
	<span class="token comment">// 0011 1100 (60)</span>
	<span class="token comment">// 0000 0110 (6)</span>
	<span class="token comment">// ---------------</span>
	<span class="token comment">// 0000 0100 (4)</span>
	
	binA <span class="token operator">|</span> binB <span class="token comment">// 60 OR 6 = 62</span>
	<span class="token comment">// 0011 1100 (60)</span>
	<span class="token comment">// 0000 0110 (6)</span>
	<span class="token comment">// ---------------</span>
	<span class="token comment">// 0011 1110 (62)</span>

	binA <span class="token operator">^</span> binB <span class="token comment">// 60 XOR 6 = 58</span>
	<span class="token comment">// 0011 1100 (60)</span>
	<span class="token comment">// 0000 0110 (6)</span>
	<span class="token comment">// ---------------</span>
	<span class="token comment">// 0011 1010 (58)</span>

	<span class="token operator">~</span>binB <span class="token comment">// NOT 6 = -9</span>
	<span class="token comment">// (0) 0110 (6)</span>
	<span class="token comment">// ---------------</span>
	<span class="token comment">// (1) 1001 (-9)</span>
	
	binB <span class="token operator">&lt;&lt;=</span> <span class="token number">3</span> <span class="token comment">// 6 LEFT-SHIFTED BY 3 = 48</span>
	<span class="token comment">// 0000 0110 (6)</span>
	<span class="token comment">// ---------------</span>
	<span class="token comment">// 0011 0000 (48)</span>

	binA <span class="token operator">=</span> binA <span class="token operator">>></span> <span class="token number">2</span> <span class="token comment">// 60 RIGHT-SHIFTED BY 2 = 15</span>
	<span class="token comment">// 0011 1100 (60)</span>
	<span class="token comment">// ---------------</span>
	<span class="token comment">// 0000 1111 (15)</span>

	<span class="token comment">// Tests</span>
	<span class="token keyword">bool</span> A <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// A=true=1</span>
	<span class="token keyword">bool</span> B <span class="token operator">=</span> <span class="token operator">!</span>A<span class="token punctuation">;</span> <span class="token comment">// B=false=0</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* (IS) TRUE */</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>A<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* (IS NOT) FALSE */</span> <span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">&amp;&amp;</span> B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* (AND) FALSE */</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">||</span> B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* (OR) TRUE */</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>A <span class="token operator">!=</span> <span class="token operator">!</span>B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* (XOR) TRUE */</span> <span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* (EQUAL) TRUE */</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token operator">!=</span><span class="token number">42</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* (NOT EQUAL) TRUE */</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* (GREATER THAN) FALSE */</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* (GREATER OR EQUAL) TRUE*/</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* (LOWER THAN) FALSE*/</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token operator">&lt;=</span>B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* (LOWER OR EQUAL) FALSE*/</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,B1,sp,Ad,j8,x1,Za,gI=`<code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>Condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span>Condition<span class="token punctuation">)</span>
  <span class="token comment">// Action</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>Condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Action</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Action</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Action</span>
<span class="token punctuation">&#125;</span>
</code>`,N1,ap,Sd,K8,W1,$a,OI=`<code class="language-c"><span class="token keyword">switch</span> <span class="token punctuation">(</span>variable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token comment">// Action</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token comment">// Action</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">default</span><span class="token operator">:</span> <span class="token comment">// Action</span>
<span class="token punctuation">&#125;</span></code>`,H1,tp,Pd,Y8,G1,nt,AI=`<code class="language-c">
<span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Action</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>conditions<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>conditions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Action</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Action</span>
<span class="token punctuation">&#125;</span></code>`,M1,op,st,X8,Rd,J8,Z8,U1,at,ep,$8,z1,pp,Ld,n9,q1,tt,SI=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span> 	<span class="token comment">// NULL</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span> <span class="token comment">//srand, rand</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span> 	<span class="token comment">// time</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span>	<span class="token comment">// pow</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	
	<span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// Rand integer from 0 to 99</span>

	<span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Initialise the random generator with the internal clock as a Seed</span>
	<span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// This one is a more random number (current seed is quite special)</span>

	<span class="token function">srand</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The random generator's seed is 1 by default, go put it back to see</span>
	<span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// This next random number should be the SAME as the first one</span>
	
	<span class="token comment">// To have a delimited random number, you can use this:</span>
	<span class="token keyword">int</span> max<span class="token operator">=</span><span class="token number">112</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">75</span><span class="token punctuation">;</span>
	<span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> random <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>min<span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%i "</span><span class="token punctuation">,</span> random<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (ex: 110 109 98 89 105 94 79 103 93 101)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,F1,cp,ss,s9,Id,a9,t9,Bd,o9,e9,V1,ot,lp,p9,Q1,up,xd,c9,j1,et,PI=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">// We declare an array of 4 integers </span>
	<span class="token keyword">int</span> numbers<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">// You can also declare arrays like that, the array will have the size of the elements you define</span>
	<span class="token keyword">float</span> prime<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">// You can compute it's size like that</span>
	<span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20 / 4 = 5</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%i "</span><span class="token punctuation">,</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//display: 0 1 2 4 8</span>
	<span class="token punctuation">&#125;</span>

	numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// &#123;20, 1, 2, 4, 8&#125;</span>
	numbers<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// &#123;20, 1, 2, 10, 8&#125;</span>

	<span class="token comment">// But the solution with the size calculation is not optimal: it can be a problem when </span>
	<span class="token comment">// the array is not declared on the stack but on the heat, a better solution can be :</span>
	
	<span class="token keyword">const</span> <span class="token keyword">int</span> better_length <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> better_numbers<span class="token punctuation">[</span>better_length<span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>better_length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		better_numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,K1,rp,Nd,l9,Y1,pt,RI=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">// The end delimiter of an array of chars is always '\0'</span>
	<span class="token keyword">char</span> word<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'G'</span><span class="token punctuation">,</span><span class="token char">'u'</span><span class="token punctuation">,</span><span class="token char">'i'</span><span class="token punctuation">,</span><span class="token char">'t'</span><span class="token punctuation">,</span><span class="token char">'a'</span><span class="token punctuation">,</span><span class="token char">'r'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">// We can define multi-dimentionnal arrays like that</span>
	<span class="token keyword">char</span> week<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token function">strcpy</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Lundi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Mardi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Mercredi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Jeudi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Vendredi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Samedi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Dimanche"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">strlen</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The length of word is 6</span>

	<span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> week<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

		<span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token comment">// week[0] == week[1]</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token comment">// week[0] &lt; week[1]</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token comment">// week[0] > week[1]</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
	</code>`,X1,ct,LI=`<code class="language-cpp">string entry<span class="token punctuation">;</span>
<span class="token keyword">int</span> test<span class="token punctuation">;</span>

<span class="token keyword">do</span> <span class="token punctuation">&#123;</span> 
  <span class="token comment">// Test if the input string is composed of chars bewteen 'a' and 'z'</span>
  test <span class="token operator">=</span> <span class="token function">scanf</span><span class="token punctuation">(</span>"<span class="token operator">%</span><span class="token number">1</span><span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span>c"<span class="token punctuation">,</span> <span class="token operator">&amp;</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>test <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span></code>`,J1,lt,ip,u9,Z1,ut,II=`<code class="language-cpp"><span class="token keyword">int</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">int</span> min<span class="token punctuation">,</span> <span class="token keyword">int</span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">nothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">// return nothing ...</span>
<span class="token punctuation">&#125;</span></code>`,$1,rt,kp,r9,nh,dp,Wd,i9,sh,it,BI=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">// We define the Rectangle structure. </span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>

	<span class="token comment">// It contains some of it's Properties like the position (x,y) and the size (height, width)</span>
	<span class="token keyword">float</span> x<span class="token punctuation">;</span>
	<span class="token keyword">float</span> y<span class="token punctuation">;</span>
	<span class="token keyword">float</span> height<span class="token punctuation">;</span>
	<span class="token keyword">float</span> width<span class="token punctuation">;</span>

	<span class="token comment">// Structs are not like Classes, wecannot create functions inside it.</span>

<span class="token punctuation">&#125;</span> Rectangle<span class="token punctuation">;</span>

<span class="token comment">// We create a function to calculate the area of a Rectangle</span>
<span class="token keyword">float</span> <span class="token function">calcArea</span><span class="token punctuation">(</span>Rectangle r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> r<span class="token punctuation">.</span>height <span class="token operator">*</span> r<span class="token punctuation">.</span>width<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// We alse create a function to print the properties of the struct, it call the precedent function to compute the area</span>
<span class="token keyword">void</span> <span class="token function">toString</span><span class="token punctuation">(</span>Rectangle r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"structure: Rectangle&#92;n + Position: [%f, %f]&#92;n + Size: [%f, %f]&#92;n + Area: %f"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>x<span class="token punctuation">,</span> r<span class="token punctuation">.</span>y<span class="token punctuation">,</span> r<span class="token punctuation">.</span>height<span class="token punctuation">,</span> r<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token function">calcArea</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

	<span class="token comment">// We instantiate a Rectangle with the name rectangle</span>
	Rectangle rectangle<span class="token punctuation">;</span>

	<span class="token comment">// We edit it's properties</span>
	rectangle<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">10.0</span><span class="token punctuation">;</span>
	rectangle<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span>
	rectangle<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">3.7</span><span class="token punctuation">;</span>
	rectangle<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">6.5</span><span class="token punctuation">;</span>

	<span class="token comment">// We call the toString function to see if the properties have changed</span>
	<span class="token function">toString</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ah,fp,k9,th,kt,xI=`<code class="language-undefined">   	structure: Rectangle
    + Position: [10.000000, 2.000000]
    + Size: [3.700000, 6.500000]
    + Area: 24.050000</code>`,oh,hp,Hd,d9,eh,mp,Gd,f9,ph,dt,NI=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>

<span class="token comment">// small first</span>
<span class="token keyword">struct</span> <span class="token class-name">large</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">uint8_t</span> a<span class="token punctuation">;</span>
  <span class="token keyword">uint32_t</span> b<span class="token punctuation">;</span>
  <span class="token keyword">uint8_t</span> c<span class="token punctuation">;</span>
  <span class="token keyword">uint32_t</span> d<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// small last</span>
<span class="token keyword">struct</span> <span class="token class-name">small</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">uint32_t</span> a<span class="token punctuation">;</span>
  <span class="token keyword">uint32_t</span> b<span class="token punctuation">;</span>
  <span class="token keyword">uint8_t</span> c<span class="token punctuation">;</span>
  <span class="token keyword">uint8_t</span> d<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// packed</span>
<span class="token keyword">struct</span> <span class="token class-name">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">)</span> packed
<span class="token punctuation">&#123;</span>
  <span class="token keyword">uint32_t</span> a<span class="token punctuation">;</span>
  <span class="token keyword">uint32_t</span> b<span class="token punctuation">;</span>
  <span class="token keyword">uint8_t</span> c<span class="token punctuation">;</span>
  <span class="token keyword">uint8_t</span> d<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">uint8_t</span> sz_plain <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">uint8_t</span> sz_large <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>large<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">uint8_t</span> sz_small <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>small<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">uint8_t</span> sz_packed <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"plain  = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>sz_plain<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"large  = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>sz_large<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"small  = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>sz_small<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"packed = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>sz_packed<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

  <span class="token comment">// plain  = 10</span>
  <span class="token comment">// large  = 16</span>
  <span class="token comment">// small  = 12</span>
  <span class="token comment">// packed = 10</span>
<span class="token punctuation">&#125;</span></code>`,ch,ft,vp,h9,lh,ht,WI='<code class="language-cpp">TODO</code>',uh,mt,Ep,m9,rh,vt,_p,v9,ih,Et,HI=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">NUMARGS</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> __VA_ARGS__ <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FIRSTARG</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">FIRSTARG0</span><span class="token punctuation">(</span>__VA_ARGS__<span class="token punctuation">,</span> ERROR_NO_ARGS_PROVIDED<span class="token punctuation">)</span> </span><span class="token comment">// assign an undeclared var to trigger the compiler error </span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FIRSTARG0</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> X </span><span class="token comment">// to avoid "warning: ISO C99 requires rest arguments to be used [enabled by default]" when 1 arg</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%i&#92;n"</span><span class="token punctuation">,</span> <span class="token function">NUMARGS</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%i&#92;n"</span><span class="token punctuation">,</span> <span class="token function">FIRSTARG</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%i&#92;n"</span><span class="token punctuation">,</span> <span class="token function">FIRSTARG</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,kh,_t,bp,E9,dh,bt,GI=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>

<span class="token comment">// We are not editing the values so we add const</span>
<span class="token keyword">void</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">// We initialize an array of 5 int </span>
	std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">></span> numbers<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numbers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>


	<span class="token comment">// TODO Vector type and arrays of pointers, redifine </span>
	std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> values<span class="token punctuation">;</span>
	values<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>values<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// Or even</span>
	
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> values<span class="token operator">&amp;</span> v <span class="token operator">:</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	values<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>values<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Erase the third element, we cannot just pas the position</span>
	values<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Set back size to 0</span>

	<span class="token comment">// We pass the values by Reference to avoid copies</span>
	<span class="token function">Function</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// HEAT vs STACK, copying and optimisation...</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,fh,yt,yp,_9,hh,wt,MI=`<code class="language-undefined">constexpr double pow(double x, long long n) noexcept &#123;
    if (n &gt; 0) [[likely]]
        return x * pow(x, n - 1);
    else [[unlikely]]
        return 1;
&#125;</code>`,mh,wp,Md,b9,vh,Tt,UI=`<code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">MyStruct</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// on heap</span>
MyStruct<span class="token operator">*</span> s <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">MyStruct</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// on stack</span>
MyStruct s <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`,Eh,Tp,Ud,y9,_h,Ct,zI=`<code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// on heap</span>
MyClass<span class="token operator">*</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// on stack</span>
MyClass c <span class="token operator">=</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,bh,Dt,Cp,w9,yh,gt,qI=`<code class="language-cpp"><span class="token comment">// by copy</span>
<span class="token keyword">int</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>MyClass a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span>index<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// by ref (+ const)</span>
<span class="token keyword">int</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token operator">&amp;</span>MyClass a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span>index<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,wh,Ot,Dp,T9,Th,At,FI=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;chrono></span></span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">using</span> spt <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">using</span> vec <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Base</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">perf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" - A derived class"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">perf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> value<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">specA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> value<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" - B derived class"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">perf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> value<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">specB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> value<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Container</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Container</span><span class="token punctuation">(</span>spt<span class="token operator">&lt;</span>Base<span class="token operator">></span> d<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">perf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> value<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    spt<span class="token operator">&lt;</span>Base<span class="token operator">></span> data<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    vec<span class="token operator">&lt;</span>spt<span class="token operator">&lt;</span>Base<span class="token operator">>></span> vec <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    A tmp_A <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    B tmp_B <span class="token operator">=</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"&#92;nTest objects print"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    tmp_A<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tmp_B<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"&#92;nTest pointer print"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    Base <span class="token operator">*</span>ptr_A <span class="token operator">=</span> <span class="token operator">&amp;</span>tmp_A<span class="token punctuation">;</span>
    Base <span class="token operator">*</span>ptr_B <span class="token operator">=</span> <span class="token operator">&amp;</span>tmp_B<span class="token punctuation">;</span>
    ptr_A<span class="token operator">-></span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ptr_B<span class="token operator">-></span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"&#92;nTest smart print"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    spt<span class="token operator">&lt;</span>Base<span class="token operator">></span> sptr_A <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>A<span class="token operator">></span></span></span><span class="token punctuation">(</span>tmp_A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    spt<span class="token operator">&lt;</span>Base<span class="token operator">></span> sptr_B <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>B<span class="token operator">></span></span></span><span class="token punctuation">(</span>tmp_B<span class="token punctuation">)</span><span class="token punctuation">;</span>

    sptr_A<span class="token operator">-></span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sptr_B<span class="token operator">-></span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"&#92;nTest array print"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>sptr_A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>sptr_B<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ptr <span class="token operator">:</span> vec<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        ptr<span class="token operator">-></span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">*</span>uncast_A <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ptr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            uncast_A<span class="token operator">-></span><span class="token function">specA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>B <span class="token operator">*</span>uncast_B <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ptr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            uncast_B<span class="token operator">-></span><span class="token function">specB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">perf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    vec<span class="token operator">&lt;</span>A<span class="token operator">></span> vec_A <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    vec<span class="token operator">&lt;</span>B<span class="token operator">></span> vec_B <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    vec<span class="token operator">&lt;</span>spt<span class="token operator">&lt;</span>A<span class="token operator">>></span> vec_sptA <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    vec<span class="token operator">&lt;</span>spt<span class="token operator">&lt;</span>B<span class="token operator">>></span> vec_sptB <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    vec<span class="token operator">&lt;</span>spt<span class="token operator">&lt;</span>Base<span class="token operator">>></span> vec_sptBase <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    vec<span class="token operator">&lt;</span>Container<span class="token operator">></span> vec_container <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        vec_A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vec_B<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        vec_sptA<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>A<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vec_sptB<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>B<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        vec_sptBase<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>A<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vec_sptBase<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>B<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        vec_container<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">Container</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>A<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vec_container<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">Container</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>B<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"&#92;nVectors size"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" - vecA + vec_B: &#92;t&#92;t"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>vec_A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> vec_B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" - vec_sptA + vec_sptB:  &#92;t"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>vec_sptA<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> vec_sptB<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" - vec_sptBase:  &#92;t&#92;t"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>vec_sptBase<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" - vec_container:  &#92;t&#92;t"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>vec_container<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"&#92;nDurations"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">auto</span> start <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> obj <span class="token operator">:</span> vec_A<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            obj<span class="token punctuation">.</span><span class="token function">perf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> obj <span class="token operator">:</span> vec_B<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            obj<span class="token punctuation">.</span><span class="token function">perf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">auto</span> end <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">auto</span> diff <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>microseconds<span class="token operator">></span></span></span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" - simple array of obj iteration: &#92;t&#92;t"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"μs"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#123;</span>
        <span class="token keyword">auto</span> start <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ptr <span class="token operator">:</span> vec_sptA<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            ptr<span class="token operator">-></span><span class="token function">perf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ptr <span class="token operator">:</span> vec_sptB<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            ptr<span class="token operator">-></span><span class="token function">perf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">auto</span> end <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">auto</span> diff <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>microseconds<span class="token operator">></span></span></span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" - array of shared_ptr iteration: &#92;t&#92;t"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"μs"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#123;</span>
        <span class="token keyword">auto</span> start <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ptr <span class="token operator">:</span> vec_sptBase<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            ptr<span class="token operator">-></span><span class="token function">perf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">auto</span> end <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">auto</span> diff <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>microseconds<span class="token operator">></span></span></span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" - merged array of shared_ptr iteration: &#92;t"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"μs"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#123;</span>
        <span class="token keyword">auto</span> start <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ptr <span class="token operator">:</span> vec_sptBase<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">*</span>uncast_A <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ptr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                uncast_A<span class="token operator">-></span><span class="token function">specA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>B <span class="token operator">*</span>uncast_B <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ptr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                uncast_B<span class="token operator">-></span><span class="token function">specB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">auto</span> end <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">auto</span> diff <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>microseconds<span class="token operator">></span></span></span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" - merged array of shared_ptr with casting: &#92;t"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"μs"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#123;</span>
        <span class="token keyword">auto</span> start <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ptr <span class="token operator">:</span> vec_container<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            ptr<span class="token punctuation">.</span><span class="token function">perf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">auto</span> end <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">auto</span> diff <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>microseconds<span class="token operator">></span></span></span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" - array of container with iteration: &#92;t&#92;t"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"μs"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#123;</span>
        <span class="token keyword">auto</span> start <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ptr <span class="token operator">:</span> vec_container<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">*</span>uncast_A <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ptr<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                uncast_A<span class="token operator">-></span><span class="token function">specA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>B <span class="token operator">*</span>uncast_B <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ptr<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                uncast_B<span class="token operator">-></span><span class="token function">specB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">auto</span> end <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">auto</span> diff <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>microseconds<span class="token operator">></span></span></span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" - array of container with data casting: &#92;t"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"μs"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// call();</span>
    <span class="token function">perf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// https://www.cppstories.com/2014/05/vector-of-objects-vs-vector-of-pointers/</span>
<span class="token comment">// g++ -o inheritance -Werror -Wfatal-errors -O3 -s -fexpensive-optimizations ./inheritance.cpp</span>

<span class="token comment">/*
Vectors size
 - vecA + vec_B: 		    20 000 000
 - vec_sptA + vec_sptB:     20 000 000
 - vec_sptBase:  		    20 000 000
 - vec_container:  		    20 000 000

Durations:

Good, but can't use polymorphism (heavy)
 - simple array of obj iteration: 		              1 μs  // pre optimisation
 - array of shared_ptr iteration: 		        543 048 μs

Meh, polymorphism but slow for nothing on base function
 - merged array of shared_ptr iteration:        408 033 μs
 - merged array of shared_ptr with casting: 	659 349 μs

Same, no gain of perf by extracting the base function
 - array of container with iteration: 		    403 188 μs
 - array of container with data casting: 	    638 731 μs
*/</span></code>`,Ch,St,gp,C9,Dh,Pt,VI=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span>

<span class="token keyword">static</span> <span class="token keyword">bool</span> s_Finished <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token comment">// Just print a line of text</span>
<span class="token keyword">void</span> <span class="token function">DoWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

	<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token double-colon punctuation">::</span>literals<span class="token double-colon punctuation">::</span>chrono_literals<span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Function thread id="</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s_Finished<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// &#92;n is performance wise better than endl, unless flushing of stream is required</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Working...&#92;n"</span><span class="token punctuation">;</span>

		<span class="token comment">// Prevent the thread to be CPU Usage 100% (if it print as fast as he can)</span>
		std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span><span class="token number">1</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Main thread id="</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token comment">// This worker will just print Working as fast as it can until we press Enter</span>
	std<span class="token double-colon punctuation">::</span>thread <span class="token function">worker</span><span class="token punctuation">(</span>DoWork<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// When whe press Enter, set s_Finished to true and stop the function printing by the otehr thread</span>
	std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	s_Finished <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	
	<span class="token comment">// Tell the main thread to wait that the thread worker finish his task before it run the next ones</span>
	worker<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Finished."</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token comment">// Dont do cin.get() while the otehr thread is running</span>
	std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,gh,Rt,Op,D9,Oh,Lt,QI=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;SFML/Graphics.hpp></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// Create the main window</span>
    sf<span class="token double-colon punctuation">::</span>RenderWindow <span class="token function">window</span><span class="token punctuation">(</span>sf<span class="token double-colon punctuation">::</span><span class="token function">VideoMode</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"SFML window"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Create a Rectangle shape to display</span>
    sf<span class="token double-colon punctuation">::</span>RectangleShape <span class="token function">rectangle</span><span class="token punctuation">(</span>sf<span class="token double-colon punctuation">::</span><span class="token function">Vectir2f</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Width, Height</span>
    rectangle<span class="token punctuation">.</span><span class="token function">setFillColor</span><span class="token punctuation">(</span>sf<span class="token double-colon punctuation">::</span><span class="token function">Color</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rectangle<span class="token operator">/</span><span class="token function">setOutlineThickness</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rectangle<span class="token punctuation">.</span><span class="token function">setOutlineColor</span><span class="token punctuation">(</span>sf<span class="token double-colon punctuation">::</span>Color<span class="token double-colon punctuation">::</span>Red<span class="token punctuation">)</span><span class="token punctuation">;</span>
    rectangle<span class="token punctuation">.</span><span class="token function">setorigin</span><span class="token punctuation">(</span>sf<span class="token double-colon punctuation">::</span><span class="token function">Vector2f</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rectangle<span class="token punctuation">.</span><span class="token function">setPosition</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rectangle<span class="token punctuation">.</span><span class="token function">setRotation</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Create a Circle shape to display</span>
    sf<span class="token double-colon punctuation">::</span>CircleShape <span class="token function">circle</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Radius, Number of faces (0=circle, 3=triangle ...)</span>

    <span class="token comment">// Create a Triangle shape to display</span>
    sf<span class="token double-colon punctuation">::</span>ConvexShape triangle<span class="token punctuation">;</span>
    triangle<span class="token punctuation">.</span><span class="token function">setPointCount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    triangle<span class="token punctuation">.</span><span class="token function">setPoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sf<span class="token double-colon punctuation">::</span><span class="token function">Vector2f</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    triangle<span class="token punctuation">.</span><span class="token function">setPoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> sf<span class="token double-colon punctuation">::</span><span class="token function">Vector2f</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    triangle<span class="token punctuation">.</span><span class="token function">setPoint</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> sf<span class="token double-colon punctuation">::</span><span class="token function">Vector2f</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">// Create a graphical text to display</span>
    sf<span class="token double-colon punctuation">::</span>Font font<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>font<span class="token punctuation">.</span><span class="token function">loadFromFile</span><span class="token punctuation">(</span><span class="token string">"arial.ttf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> EXIT_FAILURE<span class="token punctuation">;</span>
    sf<span class="token double-colon punctuation">::</span>Text <span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Text"</span><span class="token punctuation">,</span> font<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Start display loop</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// Process events</span>
        sf<span class="token double-colon punctuation">::</span>Event event<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">pollEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
        	<span class="token comment">// Close window: exit</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>type <span class="token operator">==</span> sf<span class="token double-colon punctuation">::</span>Event<span class="token double-colon punctuation">::</span>KeyPressed<span class="token punctuation">)</span>
                <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Close window: exit</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>type <span class="token operator">==</span> sf<span class="token double-colon punctuation">::</span>Event<span class="token double-colon punctuation">::</span>Closed<span class="token punctuation">)</span>
                window<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// Clear screen</span>
        window<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span>sf<span class="token double-colon punctuation">::</span>Color<span class="token double-colon punctuation">::</span>Black<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Draw the rectangle</span>
        window<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Draw the circle</span>
        window<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>circle<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Draw the triangle</span>
        window<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>triangle<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Draw the string</span>
        window<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Update the window</span>
        window<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Set delay to update</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token function">milliseconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code>`,Ah,It,Ap,g9,Sh,Sp,zd,O9,Ph,Bt,Pp,A9,Rh,Rp,qd,S9,Lh,xt,Lp,P9,Ih,Ip,Fd,R9;return{c(){Zn=t("h2"),Ht=t("a"),Pm=p("Introduction"),Yd=l(),Vs=t("h3"),Gt=t("a"),Rm=p("History of the C language"),Xd=l(),hn=t("p"),Lm=p("C is an "),Kp=t("code"),Im=p("imperative procedural language"),Bm=p(`. It was designed to be
`),Yp=t("code"),xm=p("compiled"),Nm=p(" to provide "),Xp=t("code"),Wm=p("low-level access to memory"),Hm=p("."),Jd=l(),Wn=t("p"),Gm=p("It was developed between 1972 and 1973 by "),Jp=t("code"),Mm=p("Dennis Ritchie"),Um=p(`, initially to
construct utilities running on the `),Zp=t("code"),zm=p("Unix"),qm=p(` operating system. During the
1980s, C gradually gained popularity and became one of the most widely
used programming languages.`),Zd=l(),Hn=t("p"),Fm=p(`Today, the C is not as popular as it used to be, but it’s still a very
good language to begin with and understand the rules of programmation.
Moreover, it is realy `),$p=t("code"),Vm=p("fast and light"),Qm=p(` and permit to manage the low
level datas with the `),nc=t("code"),jm=p("pointers"),Km=p(`, one thing that most of the high level
languages can’t.`),$d=l(),Qs=t("h3"),Mt=t("a"),Ym=p("Evolution toward C++"),nf=l(),mn=t("p"),Xm=p("C++ was developped in 1979 by "),sc=t("code"),Jm=p("Bjarne Stroustrup"),Zm=p(`. It was firstly named
`),ac=t("code"),$m=p("C with Classes"),n2=p(` by it’s creator, then renamed in 1983. It is an
evolution toward an more `),tc=t("code"),s2=p("Object Oriented programming language"),a2=p(`, that it
implements with Classes, Inheritance and many others functionnalities.`),sf=l(),Gn=t("p"),t2=p("The current version of it is "),oc=t("code"),o2=p("C++17"),e2=p(` (2017). A new one is standardized
by the ISO every 3 years since 2011, the next versions is `),ec=t("code"),p2=p("C++20"),c2=p(`,
already released but not every functionnality are supported yet on the
compilators.`),af=l(),js=t("h2"),Ut=t("a"),l2=p("Programming in C"),tf=l(),Ks=t("h3"),zt=t("a"),u2=p("First Program : helloworld.c"),of=l(),Ys=t("pre"),ef=l(),d=t("p"),r2=p("This file is a simple "),pc=t("code"),i2=p(".txt file"),k2=p(", I just edited the "),cc=t("strong"),d2=p("extension"),f2=p(`. Like
you can see, it is `),lc=t("code"),h2=p(".c"),m2=p(" for the base language, and "),uc=t("code"),v2=p(".cpp"),E2=p(` for C++, but
these are not the only ones that exist, there are many others, like `),rc=t("code"),_2=p(".h"),b2=p(`
and `),ic=t("code"),y2=p(".hpp"),w2=p(" for the "),kc=t("strong"),T2=p("header files"),C2=p(", "),dc=t("code"),D2=p(".cuh"),g2=p(" and "),fc=t("code"),O2=p(".cu"),A2=p(" for CUDA..."),pf=l(),x=t("p"),S2=p("To have your program working, you’ll have to "),hc=t("strong"),P2=p("build the file"),R2=p(`: To put
it simply, we get the `),mc=t("code"),L2=p("source code"),I2=p(` (helloworld.c) and put it into a
`),vc=t("code"),B2=p("compiler"),x2=p(` with the right settings and dependancies, and this compiler
output and `),Ec=t("code"),N2=p("executable"),W2=p(` (helloworld.exe) that you can run from your
machine. We will use the `),_c=t("code"),H2=p("command line"),G2=p(` to build and run this file,
it’s realy easy.`),cf=l(),Xs=t("h3"),qt=t("a"),M2=p("Compiling"),lf=l(),vn=t("p"),U2=p(`But first of all, you will need a compiler. That’s a piece of software
that transform your file from `),bc=t("code"),z2=p("readable instructions"),q2=p(` (in english) into
a language that your machine can understand: `),yc=t("code"),F2=p("binaries"),V2=p(` (0 and 1),
that’s what an `),wc=t("code"),Q2=p(".exe"),j2=p(` file is (if you open it with and text editor, you
will see some stranges charaters).`),uf=l(),os=t("p"),K2=p("Many C compiler exists, ("),Js=t("a"),Y2=p("See all"),X2=p(")"),rf=l(),Ft=t("p"),J2=p("I recommand these ones:"),kf=l(),es=t("ul"),Vt=t("li"),Z2=p("GCC (from GNU, Open sources): "),Zs=t("a"),$2=p("Download GCC from GNU"),nv=l(),Qt=t("li"),sv=p("MSVC (from Microsoft Visual Studio): "),$s=t("a"),av=p("Download Visual Studio"),df=l(),fn=t("p"),tv=p("For this example, I’m using "),jt=t("a"),ov=p("GCC 10.0.1"),ev=p(", the base "),Tc=t("code"),pv=p("command line"),cv=p(" from "),Cc=t("strong"),lv=p("Windows 10"),uv=p(" and the text editor "),na=t("a"),rv=p("Sublime Text 3"),ff=l(),ps=t("blockquote"),Dc=t("p"),iv=p("I recommand to install GCC from MinGW instead of compiling it yourself."),kv=l(),Kt=t("p"),dv=p("you will find explanations on how to proceed "),sa=t("a"),fv=p("here"),hf=l(),aa=t("h4"),Yt=t("a"),hv=p("Setup GCC and compiling a basic program"),mf=l(),Mn=t("ol"),ta=t("li"),Rn=t("p"),mv=p("If you are on windows, you can press "),gc=t("code"),vv=p("Windows"),Ev=p(" + "),Oc=t("code"),_v=p("Q"),bv=p(" then type "),Ac=t("code"),yv=p("cmd"),wv=p(" to open the command line."),Tv=l(),Ln=t("ol"),Sc=t("li"),cs=t("p"),Cv=p("Open it and try to type "),Pc=t("code"),Dv=p("gcc"),gv=p(" and press "),Rc=t("code"),Ov=p("Enter"),Av=l(),Lc=t("li"),oa=t("p"),Sv=p("If you have a message that look like that: "),Ic=t("code"),Pv=p("'gcc' is not recognised as an internal command"),Rv=p(", make sure that you downloaded GCC and go to the next step: We will add GCC to the environment variables so the system can find it."),Lv=l(),ea=t("li"),Bc=t("p"),Iv=p("The system need to know where the compiler is to understand that you call it from the command line."),Bv=l(),In=t("ol"),xc=t("li"),En=t("p"),xv=p("Press "),Nc=t("code"),Nv=p("Windows"),Wv=p(" + "),Wc=t("code"),Hv=p("Q"),Gv=p(" then type "),Hc=t("code"),Mv=p("env"),Uv=p(" and open "),Gc=t("code"),zv=p("Edit the system environment variables"),qv=l(),Mc=t("li"),pa=t("p"),Fv=p("Click on the "),Uc=t("code"),Vv=p("Environment variables"),Qv=p(" button"),jv=l(),zc=t("li"),ls=t("p"),Kv=p("Select "),qc=t("code"),Yv=p("Path"),Xv=p(" and click on "),Fc=t("code"),Jv=p("Edit"),Zv=l(),Vc=t("li"),$n=t("p"),$v=p("Finally, click on "),Qc=t("code"),nE=p("New"),sE=p(" and paste the link to GCC (ex: "),jc=t("code"),aE=p("C:\\MinGW\\bin"),tE=p(")"),oE=l(),Kc=t("li"),us=t("p"),eE=p("Open a new command and type "),Yc=t("code"),pE=p("gcc"),cE=p(", now it should work and diplay that message: "),Xc=t("code"),lE=p("gcc: fatal error: no input files. compilation terminated."),uE=l(),ca=t("li"),Xt=t("p"),rE=p("Now we will compile the file "),Jc=t("code"),iE=p("helloworld.c"),kE=l(),Bn=t("ol"),Zc=t("li"),$c=t("p"),dE=p("Open a command in the same directory as the C file"),fE=l(),nl=t("li"),Jt=t("p"),hE=p("type "),sl=t("code"),mE=p("gcc helloworld.c -o helloworld.exe"),vE=l(),al=t("li"),Zt=t("p"),EE=p("then "),tl=t("code"),_E=p("./helloworld.exe"),bE=l(),ol=t("li"),$t=t("p"),yE=p("The program will output this string: "),el=t("code"),wE=p("Hello, World!"),TE=l(),pl=t("li"),xn=t("p"),CE=p("Great, you have now a "),cl=t("code"),DE=p("working basis"),gE=p(" to begin your learning of the "),ll=t("code"),OE=p("C"),AE=p(" and "),ul=t("code"),SE=p("C++"),PE=p(" languages."),vf=l(),la=t("h4"),no=t("a"),RE=p("Compilator settings and flags"),Ef=l(),so=t("blockquote"),h=t("p"),LE=p("You can call the compiler by "),rl=t("code"),IE=p("gcc"),BE=p(" for the "),il=t("strong"),xE=p("C compiler"),NE=p(" and "),kl=t("code"),WE=p("g++"),HE=p(`
for the `),dl=t("strong"),GE=p("C++ compiler"),ME=p(`. I explain here the flags that I use and find
the `),fl=t("strong"),UE=p("most important"),zE=p(`, but you can find all the gcc flags
`),ua=t("a"),qE=p("HERE"),FE=p(`. If you
want, you can even create a `),hl=t("code"),VE=p(".bat"),QE=p(` file to automate the command and
launch the compilations.`),_f=l(),ao=t("p"),jE=p("Command Syntax:"),bf=l(),to=t("p"),ml=t("code"),KE=p("gcc [options] [source files] [object files] -o output file"),yf=l(),Un=t("p"),YE=p("If you don’t put "),vl=t("code"),XE=p("-o output file"),JE=p(", the output file will be "),El=t("code"),ZE=p("a.exe"),$E=p(" per default."),wf=l(),oo=t("p"),n_=p("Add libraries:"),Tf=l(),eo=t("p"),_l=t("code"),s_=p("-I %libpath%\\include -L %libpath%\\lib -l libfileA -l libfileB"),Cf=l(),zn=t("ul"),rs=t("li"),bl=t("code"),a_=p("-I"),t_=p(" define the include folder, generally where the headers files "),yl=t("code"),o_=p(".h"),e_=p(" are"),p_=l(),po=t("li"),wl=t("code"),c_=p("-L"),l_=p(" define the folder where to look at the source files"),u_=l(),qn=t("li"),Tl=t("code"),r_=p("-l"),i_=p(" define the name/link for the library to include "),Cl=t("code"),k_=p(".dll"),d_=p(" if the lib is dynamically compiled, and "),Dl=t("code"),f_=p(".lib"),h_=p(" if it is staticaly compiled"),Df=l(),co=t("p"),m_=p("Warnings and Errors:"),gf=l(),Fn=t("p"),v_=p("The "),gl=t("strong"),E_=p("Errors Flags"),__=p(" begin with a "),Ol=t("code"),b_=p("-W"),y_=p(" (for Warning):"),Of=l(),K=t("ul"),lo=t("li"),Al=t("code"),w_=p("-w"),T_=p(" disable all warnings messages, the program will keep compiling"),C_=l(),uo=t("li"),Sl=t("code"),D_=p("-Wall"),g_=p(" enables all the warnings for minors errors"),O_=l(),ro=t("li"),Pl=t("code"),A_=p("-Wextra"),S_=p(` enables some extra warning flags that -Wall don’t
activate`),P_=l(),io=t("li"),Rl=t("code"),R_=p("-Werror"),L_=p(" make all warnings into errors."),I_=l(),ko=t("li"),Ll=t("code"),B_=p("-Wfatal-errors"),x_=p(" abort compilation on the first error"),Af=l(),fo=t("p"),N_=p("Debug Flags:"),Sf=l(),ho=t("p"),Il=t("code"),W_=p("-Wall -Wextra -Wold-style-cast -Woverloaded-virtual -Wfloat-equal -Wwrite-strings -Wpointer-arith -Wcast-qual -Wcast-align -Wconversion -Wshadow -Weffc++ -Wredundant-decls -Wdouble-promotion -Winit-self -Wswitch-default -Wswitch-enum -Wundef -Wlogical-op -Winline"),Pf=l(),mo=t("blockquote"),Bl=t("p"),H_=p("For the Debug config, you can put all the flags to detect and display every error or unrecommanded feature of your code."),Rf=l(),vo=t("p"),G_=p("Release Flags"),Lf=l(),Eo=t("p"),xl=t("code"),M_=p("-Werror -Wfatal-errors"),If=l(),_o=t("blockquote"),Nl=t("p"),U_=p("For the Release config, the process abort at the first error"),Bf=l(),Vn=t("p"),z_=p("The "),Wl=t("strong"),q_=p("Debug Flags"),F_=p(" begin with a "),Hl=t("code"),V_=p("-g"),Q_=p(" (for Generate debug informations)"),xf=l(),_n=t("ul"),bo=t("li"),Gl=t("code"),j_=p("-g0"),K_=p(" no debug informations"),Y_=l(),yo=t("li"),Ml=t("code"),X_=p("-g1"),J_=p(" minimal debug informations"),Z_=l(),wo=t("li"),Ul=t("code"),$_=p("-g"),n3=p(" default debug informations"),s3=l(),To=t("li"),zl=t("code"),a3=p("-g3"),t3=p(" maximal debug informations"),Nf=l(),Co=t("blockquote"),ns=t("p"),o3=p("I recommand to stay with the default value "),ql=t("code"),e3=p("-g"),p3=p(" and switch to higher level "),Fl=t("code"),c3=p("-g3"),l3=p(" if you have no clue on the error."),Wf=l(),Do=t("p"),u3=p("Optimisation:"),Hf=l(),Qn=t("p"),r3=p("The "),Vl=t("strong"),i3=p("Optimisation Flags"),k3=p(" begin with a "),Ql=t("code"),d3=p("-O"),f3=p(" (for Optimisation)"),Gf=l(),is=t("table"),jl=t("thead"),H=t("tr"),Kl=t("th"),h3=p("Option"),m3=l(),Yl=t("th"),v3=p("Optimization Level"),E3=l(),Xl=t("th"),_3=p("Execution Time"),b3=l(),Jl=t("th"),y3=p("Code Size"),w3=l(),Zl=t("th"),T3=p("Memory Usage"),C3=l(),$l=t("th"),D3=p("Compilation Time"),g3=l(),G=t("tbody"),M=t("tr"),nu=t("td"),su=t("code"),O3=p("-O0"),A3=l(),au=t("td"),S3=p("compilation time"),P3=l(),tu=t("td"),R3=p("+"),L3=l(),ou=t("td"),I3=p("+"),B3=l(),eu=t("td"),x3=p("-"),N3=l(),pu=t("td"),W3=p("-"),H3=l(),U=t("tr"),cu=t("td"),lu=t("code"),G3=p("-O1 /-O"),M3=l(),uu=t("td"),U3=p("code size/exe time"),z3=l(),ru=t("td"),q3=p("-"),F3=l(),iu=t("td"),V3=p("-"),Q3=l(),ku=t("td"),j3=p("+"),K3=l(),du=t("td"),Y3=p("+"),X3=l(),z=t("tr"),fu=t("td"),hu=t("code"),J3=p("-O2"),Z3=l(),mu=t("td"),$3=p("code size/exe time"),nb=l(),vu=t("td"),sb=p("- -"),ab=l(),Eu=t("td"),tb=p("="),ob=l(),_u=t("td"),eb=p("+"),pb=l(),bu=t("td"),cb=p("+ +"),lb=l(),q=t("tr"),yu=t("td"),wu=t("code"),ub=p("-O3"),rb=l(),Tu=t("td"),ib=p("code size/exe time"),kb=l(),Cu=t("td"),db=p("- - -"),fb=l(),Du=t("td"),hb=p("="),mb=l(),gu=t("td"),vb=p("+"),Eb=l(),Ou=t("td"),_b=p("+ + +"),bb=l(),F=t("tr"),Au=t("td"),Su=t("code"),yb=p("-Os"),wb=l(),Pu=t("td"),Tb=p("code size"),Cb=l(),Ru=t("td"),Db=p("="),gb=l(),Lu=t("td"),Ob=p("-"),Ab=l(),Iu=t("td"),Sb=p("="),Pb=l(),Bu=t("td"),Rb=p("++"),Lb=l(),V=t("tr"),xu=t("td"),Nu=t("code"),Ib=p("-Ofast"),Bb=l(),Wu=t("td"),xb=p("imprecise fast math"),Nb=l(),Hu=t("td"),Wb=p("- - -"),Hb=l(),Gu=t("td"),Gb=p("="),Mb=l(),Mu=t("td"),Ub=p("+"),zb=l(),Uu=t("td"),qb=p("+ + +"),Mf=l(),go=t("p"),Oo=t("em"),Fb=p("informations from "),ra=t("a"),Vb=p("https://www.rapidtables.com/code/linux/gcc/gcc-o.html#optimization"),Uf=l(),ia=t("h3"),Ao=t("a"),Qb=p("Import and use Libraries"),zf=l(),ka=t("h4"),So=t("a"),jb=p("Includes and Dependancies"),qf=l(),jn=t("p"),Kb=p("To "),zu=t("strong"),Yb=p("include a library"),Xb=p(" we use the "),qu=t("code"),Jb=p("#include"),Zb=p(" command."),Ff=l(),ks=t("ul"),Po=t("li"),Fu=t("code"),$b=p("#include <library.h>"),n5=p(` when the headers folder is already linked in
the compiler`),s5=l(),Ro=t("li"),Vu=t("code"),a5=p('#include "folder/library.h"'),t5=p(` to search in a specific folder with
the path`),Vf=l(),Lo=t("p"),o5=p("List of the most common and used system libraries:"),Qf=l(),v=t("ul"),da=t("li"),Qu=t("strong"),e5=p("C"),p5=p(" Input/Output library: "),ju=t("code"),c5=p("#include <stdio.h>"),l5=l(),fa=t("li"),Ku=t("strong"),u5=p("C"),r5=p(" General library: "),Yu=t("code"),i5=p("#include <stdlib.h>"),k5=l(),ha=t("li"),Xu=t("strong"),d5=p("C"),f5=p(" Numerics library : "),Ju=t("code"),h5=p("#include <cmath.h>"),m5=l(),ma=t("li"),Zu=t("strong"),v5=p("C"),E5=p(" Strings library: "),$u=t("code"),_5=p("#include <string.h>"),b5=l(),va=t("li"),nr=t("strong"),y5=p("C"),w5=p(" Time library: "),sr=t("code"),T5=p("#include <time.h>"),C5=l(),Ea=t("li"),ar=t("strong"),D5=p("C++"),g5=p(" Time library: "),tr=t("code"),O5=p("#include <chrono>"),A5=l(),_a=t("li"),or=t("strong"),S5=p("C++"),P5=p(" Treads library: "),er=t("code"),R5=p("#include <thread>"),jf=l(),Io=t("p"),Bo=t("em"),L5=p("informations from "),ba=t("a"),I5=p("https://en.cppreference.com/w/cpp/header"),Kf=l(),ya=t("h4"),xo=t("a"),B5=p("Namespace and utilities"),Yf=l(),Kn=t("p"),x5=p("When you use multiple libraries, it could be some "),pr=t("code"),N5=p("conflicts"),W5=p(` under
names between some libraries, that’s why we use `),cr=t("code"),H5=p("namespaces"),G5=p("."),Xf=l(),No=t("blockquote"),Wo=t("p"),M5=p(`“Namespaces provide a method for preventing name conflicts in large projects.”
`),wa=t("a"),U5=p("source"),Jf=l(),Ta=t("p"),z5=p("We can use namespaces like that: "),lr=t("code"),q5=p("sf::..."),Zf=l(),Ca=t("pre"),$f=l(),Da=t("p"),F5=p("Or like that: "),ur=t("code"),V5=p("namespace sf { ... }"),n1=l(),ga=t("pre"),s1=l(),Oa=t("p"),Q5=p("Or even like that: "),rr=t("code"),j5=p("using namespace sf;"),a1=l(),Aa=t("pre"),t1=l(),Ho=t("blockquote"),Yn=t("p"),ir=t("strong"),K5=p("I recommand the first two methods"),Y5=p(`, the problem with the last one is
that you `),kr=t("code"),X5=p("loose all the purpose"),J5=p(" of the namespace, and it’s "),dr=t("code"),Z5=p("confusing"),$5=p(`
when you want to use both functions from libraries that would be in
conflict, you will have to mix the third and the first method...`),o1=l(),Sa=t("h2"),Go=t("a"),n0=p("Cheat Sheets"),e1=l(),Pa=t("h3"),Mo=t("a"),s0=p("Usefull Informations"),p1=l(),Uo=t("blockquote"),zo=t("p"),a0=p("Unofficial Documentation: "),Ra=t("a"),t0=p("https://en.cppreference.com/w/"),c1=l(),qo=t("p"),fr=t("strong"),o0=p("About Cpp"),l1=l(),Y=t("ul"),Fo=t("li"),hr=t("strong"),e0=p("Type of Language:"),p0=p(" Procedural, Object-Oriented"),c0=l(),Vo=t("li"),mr=t("strong"),l0=p("Born in:"),u0=p(" 1985"),r0=l(),Qo=t("li"),vr=t("strong"),i0=p("Caracteristics:"),k0=p(" Statically typed, low level, fast"),d0=l(),La=t("li"),Er=t("strong"),f0=p("Popularity:"),h0=p(" 5.8% (6th) "),Ia=t("a"),m0=p("src"),v0=l(),jo=t("li"),_r=t("strong"),E0=p("Usefull for:"),_0=p(" softwares, games, embedded…"),u1=l(),Ba=t("h3"),Ko=t("a"),b0=p("Basic C Cheat Sheet"),r1=l(),xa=t("h4"),Yo=t("a"),y0=p("Types and Variables"),i1=l(),bn=t("p"),br=t("code"),w0=p("/s/"),T0=p(" stand for "),yr=t("strong"),C0=p("Signed"),D0=p(" and "),wr=t("code"),g0=p("/u/"),O0=p(" for "),Tr=t("strong"),A0=p("Unsigned"),k1=l(),Xo=t("p"),Cr=t("strong"),S0=p("NUMERICS"),d1=l(),ds=t("table"),Dr=t("thead"),E=t("tr"),gr=t("th"),P0=p("Name"),R0=l(),Or=t("th"),L0=p("Syntax"),I0=l(),Ar=t("th"),B0=p("Size"),x0=l(),Sr=t("th"),N0=p("Min"),W0=l(),Pr=t("th"),H0=p("Max"),G0=l(),Rr=t("th"),M0=p("Letter"),U0=l(),Lr=t("th"),z0=p("Aliases"),q0=l(),m=t("tbody"),y=t("tr"),Na=t("td"),F0=p("Short "),Ir=t("code"),V0=p("/s/"),Q0=p(" Integer"),j0=l(),Br=t("td"),xr=t("code"),K0=p("short int"),Y0=l(),Nr=t("td"),Wr=t("code"),X0=p("16+ bits"),J0=l(),Jo=t("td"),Z0=p("-32 768 "),fs=t("span"),$0=p("(−2"),Hr=t("sup"),n4=p("15"),s4=p(")"),a4=l(),Zo=t("td"),t4=p("32 767 "),hs=t("span"),o4=p("(2"),Gr=t("sup"),e4=p("15"),p4=p("−1)"),c4=l(),Mr=t("td"),Ur=t("code"),l4=p("%h"),u4=l(),Wa=t("td"),zr=t("code"),r4=p("short"),i4=l(),qr=t("code"),k4=p("signed short"),d4=l(),w=t("tr"),Ha=t("td"),f4=p("Short "),Fr=t("code"),h4=p("/u/"),m4=p(" Integer"),v4=l(),Vr=t("td"),Qr=t("code"),E4=p("unsigned short int"),_4=l(),jr=t("td"),Kr=t("code"),b4=p("16+ bits"),y4=l(),$o=t("td"),w4=p("0 "),ne=t("span"),T4=p("(0)"),C4=l(),se=t("td"),D4=p("65 535 "),ms=t("span"),g4=p("(2"),Yr=t("sup"),O4=p("16"),A4=p("−1)"),S4=l(),Xr=t("td"),Jr=t("code"),P4=p("%h"),R4=l(),Ga=t("td"),Zr=t("code"),L4=p("unsigned"),I4=l(),$r=t("code"),B4=p("short"),x4=l(),T=t("tr"),ae=t("td"),N4=p("Integer "),ni=t("code"),W4=p("/s/"),H4=l(),si=t("td"),ai=t("code"),G4=p("int"),M4=l(),ti=t("td"),oi=t("code"),U4=p("16+ bits"),z4=l(),te=t("td"),q4=p("-32 768 "),vs=t("span"),F4=p("(−2"),ei=t("sup"),V4=p("15"),Q4=p(")"),j4=l(),oe=t("td"),K4=p("32 767 "),Es=t("span"),Y4=p("(2"),pi=t("sup"),X4=p("15"),J4=p("−1)"),Z4=l(),ci=t("td"),li=t("code"),$4=p("%i"),ny=l(),Ma=t("td"),ui=t("code"),sy=p("signed"),ay=l(),ri=t("code"),ty=p("signed int"),oy=l(),C=t("tr"),ee=t("td"),ey=p("Integer "),ii=t("code"),py=p("/u/"),cy=l(),ki=t("td"),di=t("code"),ly=p("unsigned int"),uy=l(),fi=t("td"),hi=t("code"),ry=p("16+ bits"),iy=l(),pe=t("td"),ky=p("0 "),ce=t("span"),dy=p("(0)"),fy=l(),le=t("td"),hy=p("65 535 "),_s=t("span"),my=p("(2"),mi=t("sup"),vy=p("16"),Ey=p("−1)"),_y=l(),vi=t("td"),Ei=t("code"),by=p("%i"),yy=l(),Ua=t("td"),_i=t("code"),wy=p("unsigned"),Ty=l(),bi=t("code"),Cy=p("unsigned int"),Dy=l(),D=t("tr"),za=t("td"),gy=p("Long "),yi=t("code"),Oy=p("/s/"),Ay=p(" Integer"),Sy=l(),wi=t("td"),Ti=t("code"),Py=p("long int"),Ry=l(),Ci=t("td"),Di=t("code"),Ly=p("32+ bits"),Iy=l(),ue=t("td"),By=p("-2 147 483 648 "),bs=t("span"),xy=p("(−2"),gi=t("sup"),Ny=p("31"),Wy=p(")"),Hy=l(),re=t("td"),Gy=p("2 147 483 647 "),ys=t("span"),My=p("(2"),Oi=t("sup"),Uy=p("31"),zy=p("−1)"),qy=l(),Ai=t("td"),Si=t("code"),Fy=p("%l"),Vy=l(),Pi=t("td"),Ri=t("code"),Qy=p("signed long int"),jy=l(),g=t("tr"),qa=t("td"),Ky=p("Long "),Li=t("code"),Yy=p("/u/"),Xy=p(" Integer"),Jy=l(),Ii=t("td"),Bi=t("code"),Zy=p("unsigned long int"),$y=l(),xi=t("td"),Ni=t("code"),nw=p("32+ bits"),sw=l(),ie=t("td"),aw=p("0 "),ke=t("span"),tw=p("(0)"),ow=l(),de=t("td"),ew=p("4 294 967 295 "),ws=t("span"),pw=p("(2"),Wi=t("sup"),cw=p("32"),lw=p("−1)"),uw=l(),Hi=t("td"),Gi=t("code"),rw=p("%l"),iw=l(),Mi=t("td"),Ui=t("code"),kw=p("unsigned long"),dw=l(),O=t("tr"),Fa=t("td"),fw=p("Long Long "),zi=t("code"),hw=p("/s/"),mw=p(" Integer"),vw=l(),qi=t("td"),Fi=t("code"),Ew=p("long long int"),_w=l(),Vi=t("td"),Qi=t("code"),bw=p("64+ bits"),yw=l(),fe=t("td"),ww=p("-9.223e-15 "),Ts=t("span"),Tw=p("(−2"),ji=t("sup"),Cw=p("63"),Dw=p(")"),gw=l(),he=t("td"),Ow=p("9.223e+15 "),Cs=t("span"),Aw=p("(2"),Ki=t("sup"),Sw=p("63"),Pw=p("−1)"),Rw=l(),Yi=t("td"),Xi=t("code"),Lw=p("%ll"),Iw=l(),Ji=t("td"),Zi=t("code"),Bw=p("signed long long"),xw=l(),A=t("tr"),Va=t("td"),Nw=p("Long Long "),$i=t("code"),Ww=p("/u/"),Hw=p(" Integer"),Gw=l(),nk=t("td"),sk=t("code"),Mw=p("unsigned long long int"),Uw=l(),ak=t("td"),tk=t("code"),zw=p("64+ bits"),qw=l(),me=t("td"),Fw=p("0 "),ve=t("span"),Vw=p("(0)"),Qw=l(),Ee=t("td"),jw=p("18.446e+15 "),Ds=t("span"),Kw=p("(2"),ok=t("sup"),Yw=p("64"),Xw=p("−1)"),Jw=l(),ek=t("td"),pk=t("code"),Zw=p("%ll"),$w=l(),ck=t("td"),lk=t("code"),n6=p("unsigned long long"),f1=l(),_e=t("blockquote"),uk=t("p"),s6=p("Integers are not rounded they are truncated toward 0. I recommand to not use short appart if you know what you do."),h1=l(),be=t("p"),rk=t("strong"),a6=p("CHARS"),m1=l(),gs=t("table"),ik=t("thead"),_=t("tr"),kk=t("th"),t6=p("Name"),o6=l(),dk=t("th"),e6=p("Syntax"),p6=l(),fk=t("th"),c6=p("Size"),l6=l(),hk=t("th"),u6=p("Min"),r6=l(),mk=t("th"),i6=p("Max"),k6=l(),vk=t("th"),d6=p("Letter"),f6=l(),Ek=t("th"),h6=p("Aliases"),m6=l(),Q=t("tbody"),S=t("tr"),ye=t("td"),v6=p("Char "),_k=t("code"),E6=p("/s/"),_6=l(),bk=t("td"),yk=t("code"),b6=p("char"),y6=l(),wk=t("td"),Tk=t("code"),w6=p("8+ bits"),T6=l(),we=t("td"),C6=p("-128 "),Os=t("span"),D6=p("(−2"),Ck=t("sup"),g6=p("7"),O6=p(")"),A6=l(),Te=t("td"),S6=p("127 "),As=t("span"),P6=p("(2"),Dk=t("sup"),R6=p("7"),L6=p("−1)"),I6=l(),gk=t("td"),Ok=t("code"),B6=p("%hh"),x6=l(),Ak=t("td"),Sk=t("code"),N6=p("signed char"),W6=l(),P=t("tr"),Ce=t("td"),H6=p("Char "),Pk=t("code"),G6=p("/u/"),M6=l(),Rk=t("td"),Lk=t("code"),U6=p("unsigned char"),z6=l(),Ik=t("td"),Bk=t("code"),q6=p("8+ bits"),F6=l(),De=t("td"),V6=p("0 "),ge=t("span"),Q6=p("(0)"),j6=l(),Oe=t("td"),K6=p("255 "),Ss=t("span"),Y6=p("(2"),xk=t("sup"),X6=p("8"),J6=p("−1)"),Z6=l(),Nk=t("td"),Wk=t("code"),$6=p("%hh"),n7=l(),v1=t("td"),s7=l(),R=t("tr"),Ae=t("td"),a7=p("char8_t "),Hk=t("code"),t7=p("/u/"),o7=l(),Gk=t("td"),Mk=t("code"),e7=p("unsigned char"),p7=l(),Uk=t("td"),zk=t("code"),c7=p("8+ bits"),l7=l(),Se=t("td"),u7=p("0 "),Pe=t("span"),r7=p("(0)"),i7=l(),Re=t("td"),k7=p("255 "),Ps=t("span"),d7=p("(2"),qk=t("sup"),f7=p("8"),h7=p("−1)"),m7=l(),Fk=t("td"),Vk=t("code"),v7=p("%hh"),E7=l(),E1=t("td"),_7=l(),L=t("tr"),Le=t("td"),b7=p("char16_t "),Qk=t("code"),y7=p("/u/"),w7=l(),jk=t("td"),Kk=t("code"),T7=p("unsigned char"),C7=l(),Yk=t("td"),Xk=t("code"),D7=p("8+ bits"),g7=l(),Ie=t("td"),O7=p("0 "),Be=t("span"),A7=p("(0)"),S7=l(),xe=t("td"),P7=p("255 "),Rs=t("span"),R7=p("(2"),Jk=t("sup"),L7=p("8"),I7=p("−1)"),B7=l(),Zk=t("td"),$k=t("code"),x7=p("%hh"),N7=l(),_1=t("td"),W7=l(),I=t("tr"),Ne=t("td"),H7=p("char32_t "),nd=t("code"),G7=p("/u/"),M7=l(),sd=t("td"),ad=t("code"),U7=p("unsigned char"),z7=l(),td=t("td"),od=t("code"),q7=p("8+ bits"),F7=l(),We=t("td"),V7=p("0 "),He=t("span"),Q7=p("(0)"),j7=l(),Ge=t("td"),K7=p("255 "),Ls=t("span"),Y7=p("(2"),ed=t("sup"),X7=p("8"),J7=p("−1)"),Z7=l(),pd=t("td"),cd=t("code"),$7=p("%hh"),n8=l(),b1=t("td"),s8=l(),B=t("tr"),Me=t("td"),a8=p("wchar_t "),ld=t("code"),t8=p("/u/"),o8=l(),ud=t("td"),rd=t("code"),e8=p("unsigned char"),p8=l(),id=t("td"),kd=t("code"),c8=p("8+ bits"),l8=l(),Ue=t("td"),u8=p("0 "),ze=t("span"),r8=p("(0)"),i8=l(),qe=t("td"),k8=p("255 "),Is=t("span"),d8=p("(2"),dd=t("sup"),f8=p("8"),h8=p("−1)"),m8=l(),fd=t("td"),hd=t("code"),v8=p("%hh"),E8=l(),y1=t("td"),w1=l(),Fe=t("blockquote"),md=t("p"),_8=p("Chars are just integers linked to an characted by the ascii table."),T1=l(),Ve=t("p"),Qe=t("em"),b8=p("informations from "),Qa=t("a"),y8=p("https://fr.cppreference.com/w/cpp/language/ascii"),C1=l(),ja=t("h4"),je=t("a"),w8=p("Input Output"),D1=l(),Ka=t("pre"),g1=l(),Ke=t("p"),vd=t("strong"),T8=p("output"),O1=l(),Ya=t("pre"),A1=l(),Ye=t("p"),C8=p("Note:"),S1=l(),Xe=t("blockquote"),Nn=t("p"),D8=p("If you input "),Ed=t("code"),g8=p("a"),O8=p(" you will have an output of "),_d=t("code"),A8=p("4194432"),S8=p(`. That’s because
scanf don’t convert the string to an int. When the value is not in
the right format, it will get the `),bd=t("code"),P8=p("memory location"),R8=p("."),P1=l(),Je=t("blockquote"),b=t("p"),L8=p("For the boundaries, an input of "),yd=t("code"),I8=p("2147483647"),B8=p(" will output "),wd=t("code"),x8=p("2147483647"),N8=p(`,
but if you try to enter a value of `),Td=t("code"),W8=p("2147483648"),H8=p(` you will have an
output of `),Cd=t("code"),G8=p("-2147483648"),M8=p(`. Thats because the signed value is greater
than `),Ze=t("span"),U8=p(". The default int boundaries are "),Dd=t("code"),z8=p("32bits"),q8=p(` on my
`),gd=t("code"),F8=p("x64 processor"),R1=l(),Xa=t("h4"),$e=t("a"),V8=p("Variables, Tests and Loops"),L1=l(),np=t("p"),Od=t("strong"),Q8=p("VARIABLES DECLARATIONS"),I1=l(),Ja=t("pre"),B1=l(),sp=t("p"),Ad=t("strong"),j8=p("TESTS"),x1=l(),Za=t("pre"),N1=l(),ap=t("p"),Sd=t("strong"),K8=p("SWITCH"),W1=l(),$a=t("pre"),H1=l(),tp=t("p"),Pd=t("strong"),Y8=p("LOOPS"),G1=l(),nt=t("pre"),M1=l(),op=t("blockquote"),st=t("p"),X8=p("You can use "),Rd=t("code"),J8=p("break;"),Z8=p(" to stop a loop."),U1=l(),at=t("h4"),ep=t("a"),$8=p("Random numbers"),z1=l(),pp=t("p"),Ld=t("strong"),n9=p("RANDOM"),q1=l(),tt=t("pre"),F1=l(),cp=t("blockquote"),ss=t("p"),s9=p("You can see the max of "),Id=t("code"),a9=p("rand()"),t9=p(" with "),Bd=t("code"),o9=p("RAND_MAX"),e9=p(" (32767+). For betters randoms number you can use the BOOST library."),V1=l(),ot=t("h4"),lp=t("a"),p9=p("Arrays"),Q1=l(),up=t("p"),xd=t("strong"),c9=p("ARRAYS"),j1=l(),et=t("pre"),K1=l(),rp=t("p"),Nd=t("strong"),l9=p("STRINGS"),Y1=l(),pt=t("pre"),X1=l(),ct=t("pre"),J1=l(),lt=t("h4"),ip=t("a"),u9=p("Functions"),Z1=l(),ut=t("pre"),$1=l(),rt=t("h4"),kp=t("a"),r9=p("Structures"),nh=l(),dp=t("p"),Wd=t("strong"),i9=p("RECTANGLE STRUCTURE EXAMPLE"),sh=l(),it=t("pre"),ah=l(),fp=t("p"),k9=p("output"),th=l(),kt=t("pre"),oh=l(),hp=t("blockquote"),Hd=t("p"),d9=p("Take care of the order in which you declare your structure fields, because it will impact the size of the final data."),eh=l(),mp=t("p"),Gd=t("strong"),f9=p("For instance…"),ph=l(),dt=t("pre"),ch=l(),ft=t("h4"),vp=t("a"),h9=p("Pointers and Smart pointers"),lh=l(),ht=t("pre"),uh=l(),mt=t("h3"),Ep=t("a"),m9=p("Basic C++ Cheat Sheet"),rh=l(),vt=t("h4"),_p=t("a"),v9=p("Macros"),ih=l(),Et=t("pre"),kh=l(),_t=t("h4"),bp=t("a"),E9=p("Arrays"),dh=l(),bt=t("pre"),fh=l(),yt=t("h4"),yp=t("a"),_9=p("Stack & Heap"),hh=l(),wt=t("pre"),mh=l(),wp=t("p"),Md=t("strong"),b9=p("c style"),vh=l(),Tt=t("pre"),Eh=l(),Tp=t("p"),Ud=t("strong"),y9=p("c++ style"),_h=l(),Ct=t("pre"),bh=l(),Dt=t("h4"),Cp=t("a"),w9=p("By reference vs By copy"),yh=l(),gt=t("pre"),wh=l(),Ot=t("h4"),Dp=t("a"),T9=p("Inheritances"),Th=l(),At=t("pre"),Ch=l(),St=t("h4"),gp=t("a"),C9=p("Threads"),Dh=l(),Pt=t("pre"),gh=l(),Rt=t("h2"),Op=t("a"),D9=p("SFML"),Oh=l(),Lt=t("pre"),Ah=l(),It=t("h2"),Ap=t("a"),g9=p("Qt"),Sh=l(),Sp=t("blockquote"),zd=t("p"),O9=p("TODO"),Ph=l(),Bt=t("h2"),Pp=t("a"),A9=p("CUDA"),Rh=l(),Rp=t("blockquote"),qd=t("p"),S9=p("TODO"),Lh=l(),xt=t("h2"),Lp=t("a"),P9=p("CMake and Builds"),Ih=l(),Ip=t("blockquote"),Fd=t("p"),R9=p("TODO"),this.h()},l(a){Zn=o(a,"H2",{id:!0});var r=e(Zn);Ht=o(r,"A",{href:!0});var QT=e(Ht);Pm=c(QT,"Introduction"),QT.forEach(s),r.forEach(s),Yd=u(a),Vs=o(a,"H3",{id:!0});var jT=e(Vs);Gt=o(jT,"A",{href:!0});var KT=e(Gt);Rm=c(KT,"History of the C language"),KT.forEach(s),jT.forEach(s),Xd=u(a),hn=o(a,"P",{});var Bs=e(hn);Lm=c(Bs,"C is an "),Kp=o(Bs,"CODE",{});var YT=e(Kp);Im=c(YT,"imperative procedural language"),YT.forEach(s),Bm=c(Bs,`. It was designed to be
`),Yp=o(Bs,"CODE",{});var XT=e(Yp);xm=c(XT,"compiled"),XT.forEach(s),Nm=c(Bs," to provide "),Xp=o(Bs,"CODE",{});var JT=e(Xp);Wm=c(JT,"low-level access to memory"),JT.forEach(s),Hm=c(Bs,"."),Bs.forEach(s),Jd=u(a),Wn=o(a,"P",{});var Bp=e(Wn);Gm=c(Bp,"It was developed between 1972 and 1973 by "),Jp=o(Bp,"CODE",{});var ZT=e(Jp);Mm=c(ZT,"Dennis Ritchie"),ZT.forEach(s),Um=c(Bp,`, initially to
construct utilities running on the `),Zp=o(Bp,"CODE",{});var $T=e(Zp);zm=c($T,"Unix"),$T.forEach(s),qm=c(Bp,` operating system. During the
1980s, C gradually gained popularity and became one of the most widely
used programming languages.`),Bp.forEach(s),Zd=u(a),Hn=o(a,"P",{});var xp=e(Hn);Fm=c(xp,`Today, the C is not as popular as it used to be, but it’s still a very
good language to begin with and understand the rules of programmation.
Moreover, it is realy `),$p=o(xp,"CODE",{});var nC=e($p);Vm=c(nC,"fast and light"),nC.forEach(s),Qm=c(xp,` and permit to manage the low
level datas with the `),nc=o(xp,"CODE",{});var sC=e(nc);jm=c(sC,"pointers"),sC.forEach(s),Km=c(xp,`, one thing that most of the high level
languages can’t.`),xp.forEach(s),$d=u(a),Qs=o(a,"H3",{id:!0});var aC=e(Qs);Mt=o(aC,"A",{href:!0});var tC=e(Mt);Ym=c(tC,"Evolution toward C++"),tC.forEach(s),aC.forEach(s),nf=u(a),mn=o(a,"P",{});var xs=e(mn);Xm=c(xs,"C++ was developped in 1979 by "),sc=o(xs,"CODE",{});var oC=e(sc);Jm=c(oC,"Bjarne Stroustrup"),oC.forEach(s),Zm=c(xs,`. It was firstly named
`),ac=o(xs,"CODE",{});var eC=e(ac);$m=c(eC,"C with Classes"),eC.forEach(s),n2=c(xs,` by it’s creator, then renamed in 1983. It is an
evolution toward an more `),tc=o(xs,"CODE",{});var pC=e(tc);s2=c(pC,"Object Oriented programming language"),pC.forEach(s),a2=c(xs,`, that it
implements with Classes, Inheritance and many others functionnalities.`),xs.forEach(s),sf=u(a),Gn=o(a,"P",{});var Np=e(Gn);t2=c(Np,"The current version of it is "),oc=o(Np,"CODE",{});var cC=e(oc);o2=c(cC,"C++17"),cC.forEach(s),e2=c(Np,` (2017). A new one is standardized
by the ISO every 3 years since 2011, the next versions is `),ec=o(Np,"CODE",{});var lC=e(ec);p2=c(lC,"C++20"),lC.forEach(s),c2=c(Np,`,
already released but not every functionnality are supported yet on the
compilators.`),Np.forEach(s),af=u(a),js=o(a,"H2",{id:!0});var uC=e(js);Ut=o(uC,"A",{href:!0});var rC=e(Ut);l2=c(rC,"Programming in C"),rC.forEach(s),uC.forEach(s),tf=u(a),Ks=o(a,"H3",{id:!0});var iC=e(Ks);zt=o(iC,"A",{href:!0});var kC=e(zt);u2=c(kC,"First Program : helloworld.c"),kC.forEach(s),iC.forEach(s),of=u(a),Ys=o(a,"PRE",{class:!0});var jI=e(Ys);jI.forEach(s),ef=u(a),d=o(a,"P",{});var f=e(d);r2=c(f,"This file is a simple "),pc=o(f,"CODE",{});var dC=e(pc);i2=c(dC,".txt file"),dC.forEach(s),k2=c(f,", I just edited the "),cc=o(f,"STRONG",{});var fC=e(cc);d2=c(fC,"extension"),fC.forEach(s),f2=c(f,`. Like
you can see, it is `),lc=o(f,"CODE",{});var hC=e(lc);h2=c(hC,".c"),hC.forEach(s),m2=c(f," for the base language, and "),uc=o(f,"CODE",{});var mC=e(uc);v2=c(mC,".cpp"),mC.forEach(s),E2=c(f,` for C++, but
these are not the only ones that exist, there are many others, like `),rc=o(f,"CODE",{});var vC=e(rc);_2=c(vC,".h"),vC.forEach(s),b2=c(f,`
and `),ic=o(f,"CODE",{});var EC=e(ic);y2=c(EC,".hpp"),EC.forEach(s),w2=c(f," for the "),kc=o(f,"STRONG",{});var _C=e(kc);T2=c(_C,"header files"),_C.forEach(s),C2=c(f,", "),dc=o(f,"CODE",{});var bC=e(dc);D2=c(bC,".cuh"),bC.forEach(s),g2=c(f," and "),fc=o(f,"CODE",{});var yC=e(fc);O2=c(yC,".cu"),yC.forEach(s),A2=c(f," for CUDA..."),f.forEach(s),pf=u(a),x=o(a,"P",{});var yn=e(x);S2=c(yn,"To have your program working, you’ll have to "),hc=o(yn,"STRONG",{});var wC=e(hc);P2=c(wC,"build the file"),wC.forEach(s),R2=c(yn,`: To put
it simply, we get the `),mc=o(yn,"CODE",{});var TC=e(mc);L2=c(TC,"source code"),TC.forEach(s),I2=c(yn,` (helloworld.c) and put it into a
`),vc=o(yn,"CODE",{});var CC=e(vc);B2=c(CC,"compiler"),CC.forEach(s),x2=c(yn,` with the right settings and dependancies, and this compiler
output and `),Ec=o(yn,"CODE",{});var DC=e(Ec);N2=c(DC,"executable"),DC.forEach(s),W2=c(yn,` (helloworld.exe) that you can run from your
machine. We will use the `),_c=o(yn,"CODE",{});var gC=e(_c);H2=c(gC,"command line"),gC.forEach(s),G2=c(yn,` to build and run this file,
it’s realy easy.`),yn.forEach(s),cf=u(a),Xs=o(a,"H3",{id:!0});var OC=e(Xs);qt=o(OC,"A",{href:!0});var AC=e(qt);M2=c(AC,"Compiling"),AC.forEach(s),OC.forEach(s),lf=u(a),vn=o(a,"P",{});var Ns=e(vn);U2=c(Ns,`But first of all, you will need a compiler. That’s a piece of software
that transform your file from `),bc=o(Ns,"CODE",{});var SC=e(bc);z2=c(SC,"readable instructions"),SC.forEach(s),q2=c(Ns,` (in english) into
a language that your machine can understand: `),yc=o(Ns,"CODE",{});var PC=e(yc);F2=c(PC,"binaries"),PC.forEach(s),V2=c(Ns,` (0 and 1),
that’s what an `),wc=o(Ns,"CODE",{});var RC=e(wc);Q2=c(RC,".exe"),RC.forEach(s),j2=c(Ns,` file is (if you open it with and text editor, you
will see some stranges charaters).`),Ns.forEach(s),uf=u(a),os=o(a,"P",{});var Bh=e(os);K2=c(Bh,"Many C compiler exists, ("),Js=o(Bh,"A",{href:!0,rel:!0});var LC=e(Js);Y2=c(LC,"See all"),LC.forEach(s),X2=c(Bh,")"),Bh.forEach(s),rf=u(a),Ft=o(a,"P",{});var IC=e(Ft);J2=c(IC,"I recommand these ones:"),IC.forEach(s),kf=u(a),es=o(a,"UL",{});var xh=e(es);Vt=o(xh,"LI",{});var L9=e(Vt);Z2=c(L9,"GCC (from GNU, Open sources): "),Zs=o(L9,"A",{href:!0,rel:!0});var BC=e(Zs);$2=c(BC,"Download GCC from GNU"),BC.forEach(s),L9.forEach(s),nv=u(xh),Qt=o(xh,"LI",{});var I9=e(Qt);sv=c(I9,"MSVC (from Microsoft Visual Studio): "),$s=o(I9,"A",{href:!0,rel:!0});var xC=e($s);av=c(xC,"Download Visual Studio"),xC.forEach(s),I9.forEach(s),xh.forEach(s),df=u(a),fn=o(a,"P",{});var as=e(fn);tv=c(as,"For this example, I’m using "),jt=o(as,"A",{href:!0});var NC=e(jt);ov=c(NC,"GCC 10.0.1"),NC.forEach(s),ev=c(as,", the base "),Tc=o(as,"CODE",{});var WC=e(Tc);pv=c(WC,"command line"),WC.forEach(s),cv=c(as," from "),Cc=o(as,"STRONG",{});var HC=e(Cc);lv=c(HC,"Windows 10"),HC.forEach(s),uv=c(as," and the text editor "),na=o(as,"A",{href:!0,rel:!0});var GC=e(na);rv=c(GC,"Sublime Text 3"),GC.forEach(s),as.forEach(s),ff=u(a),ps=o(a,"BLOCKQUOTE",{});var Nh=e(ps);Dc=o(Nh,"P",{});var MC=e(Dc);iv=c(MC,"I recommand to install GCC from MinGW instead of compiling it yourself."),MC.forEach(s),kv=u(Nh),Kt=o(Nh,"P",{});var B9=e(Kt);dv=c(B9,"you will find explanations on how to proceed "),sa=o(B9,"A",{href:!0,rel:!0});var UC=e(sa);fv=c(UC,"here"),UC.forEach(s),B9.forEach(s),Nh.forEach(s),hf=u(a),aa=o(a,"H4",{id:!0});var zC=e(aa);Yt=o(zC,"A",{href:!0});var qC=e(Yt);hv=c(qC,"Setup GCC and compiling a basic program"),qC.forEach(s),zC.forEach(s),mf=u(a),Mn=o(a,"OL",{});var Wp=e(Mn);ta=o(Wp,"LI",{});var Wh=e(ta);Rn=o(Wh,"P",{});var Ws=e(Rn);mv=c(Ws,"If you are on windows, you can press "),gc=o(Ws,"CODE",{});var FC=e(gc);vv=c(FC,"Windows"),FC.forEach(s),Ev=c(Ws," + "),Oc=o(Ws,"CODE",{});var VC=e(Oc);_v=c(VC,"Q"),VC.forEach(s),bv=c(Ws," then type "),Ac=o(Ws,"CODE",{});var QC=e(Ac);yv=c(QC,"cmd"),QC.forEach(s),wv=c(Ws," to open the command line."),Ws.forEach(s),Tv=u(Wh),Ln=o(Wh,"OL",{});var Hs=e(Ln);Sc=o(Hs,"LI",{});var jC=e(Sc);cs=o(jC,"P",{});var Vd=e(cs);Cv=c(Vd,"Open it and try to type "),Pc=o(Vd,"CODE",{});var KC=e(Pc);Dv=c(KC,"gcc"),KC.forEach(s),gv=c(Vd," and press "),Rc=o(Vd,"CODE",{});var YC=e(Rc);Ov=c(YC,"Enter"),YC.forEach(s),Vd.forEach(s),jC.forEach(s),Av=u(Hs),Lc=o(Hs,"LI",{});var XC=e(Lc);oa=o(XC,"P",{});var Hh=e(oa);Sv=c(Hh,"If you have a message that look like that: "),Ic=o(Hh,"CODE",{});var JC=e(Ic);Pv=c(JC,"'gcc' is not recognised as an internal command"),JC.forEach(s),Rv=c(Hh,", make sure that you downloaded GCC and go to the next step: We will add GCC to the environment variables so the system can find it."),Hh.forEach(s),XC.forEach(s),Lv=u(Hs),ea=o(Hs,"LI",{});var Gh=e(ea);Bc=o(Gh,"P",{});var ZC=e(Bc);Iv=c(ZC,"The system need to know where the compiler is to understand that you call it from the command line."),ZC.forEach(s),Bv=u(Gh),In=o(Gh,"OL",{});var Gs=e(In);xc=o(Gs,"LI",{});var $C=e(xc);En=o($C,"P",{});var ts=e(En);xv=c(ts,"Press "),Nc=o(ts,"CODE",{});var nD=e(Nc);Nv=c(nD,"Windows"),nD.forEach(s),Wv=c(ts," + "),Wc=o(ts,"CODE",{});var sD=e(Wc);Hv=c(sD,"Q"),sD.forEach(s),Gv=c(ts," then type "),Hc=o(ts,"CODE",{});var aD=e(Hc);Mv=c(aD,"env"),aD.forEach(s),Uv=c(ts," and open "),Gc=o(ts,"CODE",{});var tD=e(Gc);zv=c(tD,"Edit the system environment variables"),tD.forEach(s),ts.forEach(s),$C.forEach(s),qv=u(Gs),Mc=o(Gs,"LI",{});var oD=e(Mc);pa=o(oD,"P",{});var Mh=e(pa);Fv=c(Mh,"Click on the "),Uc=o(Mh,"CODE",{});var eD=e(Uc);Vv=c(eD,"Environment variables"),eD.forEach(s),Qv=c(Mh," button"),Mh.forEach(s),oD.forEach(s),jv=u(Gs),zc=o(Gs,"LI",{});var pD=e(zc);ls=o(pD,"P",{});var Qd=e(ls);Kv=c(Qd,"Select "),qc=o(Qd,"CODE",{});var cD=e(qc);Yv=c(cD,"Path"),cD.forEach(s),Xv=c(Qd," and click on "),Fc=o(Qd,"CODE",{});var lD=e(Fc);Jv=c(lD,"Edit"),lD.forEach(s),Qd.forEach(s),pD.forEach(s),Zv=u(Gs),Vc=o(Gs,"LI",{});var uD=e(Vc);$n=o(uD,"P",{});var Hp=e($n);$v=c(Hp,"Finally, click on "),Qc=o(Hp,"CODE",{});var rD=e(Qc);nE=c(rD,"New"),rD.forEach(s),sE=c(Hp," and paste the link to GCC (ex: "),jc=o(Hp,"CODE",{});var iD=e(jc);aE=c(iD,"C:\\MinGW\\bin"),iD.forEach(s),tE=c(Hp,")"),Hp.forEach(s),uD.forEach(s),Gs.forEach(s),Gh.forEach(s),oE=u(Hs),Kc=o(Hs,"LI",{});var kD=e(Kc);us=o(kD,"P",{});var jd=e(us);eE=c(jd,"Open a new command and type "),Yc=o(jd,"CODE",{});var dD=e(Yc);pE=c(dD,"gcc"),dD.forEach(s),cE=c(jd,", now it should work and diplay that message: "),Xc=o(jd,"CODE",{});var fD=e(Xc);lE=c(fD,"gcc: fatal error: no input files. compilation terminated."),fD.forEach(s),jd.forEach(s),kD.forEach(s),Hs.forEach(s),Wh.forEach(s),uE=u(Wp),ca=o(Wp,"LI",{});var Uh=e(ca);Xt=o(Uh,"P",{});var x9=e(Xt);rE=c(x9,"Now we will compile the file "),Jc=o(x9,"CODE",{});var hD=e(Jc);iE=c(hD,"helloworld.c"),hD.forEach(s),x9.forEach(s),kE=u(Uh),Bn=o(Uh,"OL",{});var Ms=e(Bn);Zc=o(Ms,"LI",{});var mD=e(Zc);$c=o(mD,"P",{});var vD=e($c);dE=c(vD,"Open a command in the same directory as the C file"),vD.forEach(s),mD.forEach(s),fE=u(Ms),nl=o(Ms,"LI",{});var ED=e(nl);Jt=o(ED,"P",{});var N9=e(Jt);hE=c(N9,"type "),sl=o(N9,"CODE",{});var _D=e(sl);mE=c(_D,"gcc helloworld.c -o helloworld.exe"),_D.forEach(s),N9.forEach(s),ED.forEach(s),vE=u(Ms),al=o(Ms,"LI",{});var bD=e(al);Zt=o(bD,"P",{});var W9=e(Zt);EE=c(W9,"then "),tl=o(W9,"CODE",{});var yD=e(tl);_E=c(yD,"./helloworld.exe"),yD.forEach(s),W9.forEach(s),bD.forEach(s),bE=u(Ms),ol=o(Ms,"LI",{});var wD=e(ol);$t=o(wD,"P",{});var H9=e($t);yE=c(H9,"The program will output this string: "),el=o(H9,"CODE",{});var TD=e(el);wE=c(TD,"Hello, World!"),TD.forEach(s),H9.forEach(s),wD.forEach(s),Ms.forEach(s),Uh.forEach(s),TE=u(Wp),pl=o(Wp,"LI",{});var CD=e(pl);xn=o(CD,"P",{});var Us=e(xn);CE=c(Us,"Great, you have now a "),cl=o(Us,"CODE",{});var DD=e(cl);DE=c(DD,"working basis"),DD.forEach(s),gE=c(Us," to begin your learning of the "),ll=o(Us,"CODE",{});var gD=e(ll);OE=c(gD,"C"),gD.forEach(s),AE=c(Us," and "),ul=o(Us,"CODE",{});var OD=e(ul);SE=c(OD,"C++"),OD.forEach(s),PE=c(Us," languages."),Us.forEach(s),CD.forEach(s),Wp.forEach(s),vf=u(a),la=o(a,"H4",{id:!0});var AD=e(la);no=o(AD,"A",{href:!0});var SD=e(no);RE=c(SD,"Compilator settings and flags"),SD.forEach(s),AD.forEach(s),Ef=u(a),so=o(a,"BLOCKQUOTE",{});var PD=e(so);h=o(PD,"P",{});var N=e(h);LE=c(N,"You can call the compiler by "),rl=o(N,"CODE",{});var RD=e(rl);IE=c(RD,"gcc"),RD.forEach(s),BE=c(N," for the "),il=o(N,"STRONG",{});var LD=e(il);xE=c(LD,"C compiler"),LD.forEach(s),NE=c(N," and "),kl=o(N,"CODE",{});var ID=e(kl);WE=c(ID,"g++"),ID.forEach(s),HE=c(N,`
for the `),dl=o(N,"STRONG",{});var BD=e(dl);GE=c(BD,"C++ compiler"),BD.forEach(s),ME=c(N,`. I explain here the flags that I use and find
the `),fl=o(N,"STRONG",{});var xD=e(fl);UE=c(xD,"most important"),xD.forEach(s),zE=c(N,`, but you can find all the gcc flags
`),ua=o(N,"A",{href:!0,rel:!0});var ND=e(ua);qE=c(ND,"HERE"),ND.forEach(s),FE=c(N,`. If you
want, you can even create a `),hl=o(N,"CODE",{});var WD=e(hl);VE=c(WD,".bat"),WD.forEach(s),QE=c(N,` file to automate the command and
launch the compilations.`),N.forEach(s),PD.forEach(s),_f=u(a),ao=o(a,"P",{});var HD=e(ao);jE=c(HD,"Command Syntax:"),HD.forEach(s),bf=u(a),to=o(a,"P",{});var GD=e(to);ml=o(GD,"CODE",{});var MD=e(ml);KE=c(MD,"gcc [options] [source files] [object files] -o output file"),MD.forEach(s),GD.forEach(s),yf=u(a),Un=o(a,"P",{});var Gp=e(Un);YE=c(Gp,"If you don’t put "),vl=o(Gp,"CODE",{});var UD=e(vl);XE=c(UD,"-o output file"),UD.forEach(s),JE=c(Gp,", the output file will be "),El=o(Gp,"CODE",{});var zD=e(El);ZE=c(zD,"a.exe"),zD.forEach(s),$E=c(Gp," per default."),Gp.forEach(s),wf=u(a),oo=o(a,"P",{});var qD=e(oo);n_=c(qD,"Add libraries:"),qD.forEach(s),Tf=u(a),eo=o(a,"P",{});var FD=e(eo);_l=o(FD,"CODE",{});var VD=e(_l);s_=c(VD,"-I %libpath%\\include -L %libpath%\\lib -l libfileA -l libfileB"),VD.forEach(s),FD.forEach(s),Cf=u(a),zn=o(a,"UL",{});var Mp=e(zn);rs=o(Mp,"LI",{});var Kd=e(rs);bl=o(Kd,"CODE",{});var QD=e(bl);a_=c(QD,"-I"),QD.forEach(s),t_=c(Kd," define the include folder, generally where the headers files "),yl=o(Kd,"CODE",{});var jD=e(yl);o_=c(jD,".h"),jD.forEach(s),e_=c(Kd," are"),Kd.forEach(s),p_=u(Mp),po=o(Mp,"LI",{});var G9=e(po);wl=o(G9,"CODE",{});var KD=e(wl);c_=c(KD,"-L"),KD.forEach(s),l_=c(G9," define the folder where to look at the source files"),G9.forEach(s),u_=u(Mp),qn=o(Mp,"LI",{});var Nt=e(qn);Tl=o(Nt,"CODE",{});var YD=e(Tl);r_=c(YD,"-l"),YD.forEach(s),i_=c(Nt," define the name/link for the library to include "),Cl=o(Nt,"CODE",{});var XD=e(Cl);k_=c(XD,".dll"),XD.forEach(s),d_=c(Nt," if the lib is dynamically compiled, and "),Dl=o(Nt,"CODE",{});var JD=e(Dl);f_=c(JD,".lib"),JD.forEach(s),h_=c(Nt," if it is staticaly compiled"),Nt.forEach(s),Mp.forEach(s),Df=u(a),co=o(a,"P",{});var ZD=e(co);m_=c(ZD,"Warnings and Errors:"),ZD.forEach(s),gf=u(a),Fn=o(a,"P",{});var Up=e(Fn);v_=c(Up,"The "),gl=o(Up,"STRONG",{});var $D=e(gl);E_=c($D,"Errors Flags"),$D.forEach(s),__=c(Up," begin with a "),Ol=o(Up,"CODE",{});var ng=e(Ol);b_=c(ng,"-W"),ng.forEach(s),y_=c(Up," (for Warning):"),Up.forEach(s),Of=u(a),K=o(a,"UL",{});var Xn=e(K);lo=o(Xn,"LI",{});var M9=e(lo);Al=o(M9,"CODE",{});var sg=e(Al);w_=c(sg,"-w"),sg.forEach(s),T_=c(M9," disable all warnings messages, the program will keep compiling"),M9.forEach(s),C_=u(Xn),uo=o(Xn,"LI",{});var U9=e(uo);Sl=o(U9,"CODE",{});var ag=e(Sl);D_=c(ag,"-Wall"),ag.forEach(s),g_=c(U9," enables all the warnings for minors errors"),U9.forEach(s),O_=u(Xn),ro=o(Xn,"LI",{});var z9=e(ro);Pl=o(z9,"CODE",{});var tg=e(Pl);A_=c(tg,"-Wextra"),tg.forEach(s),S_=c(z9,` enables some extra warning flags that -Wall don’t
activate`),z9.forEach(s),P_=u(Xn),io=o(Xn,"LI",{});var q9=e(io);Rl=o(q9,"CODE",{});var og=e(Rl);R_=c(og,"-Werror"),og.forEach(s),L_=c(q9," make all warnings into errors."),q9.forEach(s),I_=u(Xn),ko=o(Xn,"LI",{});var F9=e(ko);Ll=o(F9,"CODE",{});var eg=e(Ll);B_=c(eg,"-Wfatal-errors"),eg.forEach(s),x_=c(F9," abort compilation on the first error"),F9.forEach(s),Xn.forEach(s),Af=u(a),fo=o(a,"P",{});var pg=e(fo);N_=c(pg,"Debug Flags:"),pg.forEach(s),Sf=u(a),ho=o(a,"P",{});var cg=e(ho);Il=o(cg,"CODE",{});var lg=e(Il);W_=c(lg,"-Wall -Wextra -Wold-style-cast -Woverloaded-virtual -Wfloat-equal -Wwrite-strings -Wpointer-arith -Wcast-qual -Wcast-align -Wconversion -Wshadow -Weffc++ -Wredundant-decls -Wdouble-promotion -Winit-self -Wswitch-default -Wswitch-enum -Wundef -Wlogical-op -Winline"),lg.forEach(s),cg.forEach(s),Pf=u(a),mo=o(a,"BLOCKQUOTE",{});var ug=e(mo);Bl=o(ug,"P",{});var rg=e(Bl);H_=c(rg,"For the Debug config, you can put all the flags to detect and display every error or unrecommanded feature of your code."),rg.forEach(s),ug.forEach(s),Rf=u(a),vo=o(a,"P",{});var ig=e(vo);G_=c(ig,"Release Flags"),ig.forEach(s),Lf=u(a),Eo=o(a,"P",{});var kg=e(Eo);xl=o(kg,"CODE",{});var dg=e(xl);M_=c(dg,"-Werror -Wfatal-errors"),dg.forEach(s),kg.forEach(s),If=u(a),_o=o(a,"BLOCKQUOTE",{});var fg=e(_o);Nl=o(fg,"P",{});var hg=e(Nl);U_=c(hg,"For the Release config, the process abort at the first error"),hg.forEach(s),fg.forEach(s),Bf=u(a),Vn=o(a,"P",{});var zp=e(Vn);z_=c(zp,"The "),Wl=o(zp,"STRONG",{});var mg=e(Wl);q_=c(mg,"Debug Flags"),mg.forEach(s),F_=c(zp," begin with a "),Hl=o(zp,"CODE",{});var vg=e(Hl);V_=c(vg,"-g"),vg.forEach(s),Q_=c(zp," (for Generate debug informations)"),zp.forEach(s),xf=u(a),_n=o(a,"UL",{});var zs=e(_n);bo=o(zs,"LI",{});var V9=e(bo);Gl=o(V9,"CODE",{});var Eg=e(Gl);j_=c(Eg,"-g0"),Eg.forEach(s),K_=c(V9," no debug informations"),V9.forEach(s),Y_=u(zs),yo=o(zs,"LI",{});var Q9=e(yo);Ml=o(Q9,"CODE",{});var _g=e(Ml);X_=c(_g,"-g1"),_g.forEach(s),J_=c(Q9," minimal debug informations"),Q9.forEach(s),Z_=u(zs),wo=o(zs,"LI",{});var j9=e(wo);Ul=o(j9,"CODE",{});var bg=e(Ul);$_=c(bg,"-g"),bg.forEach(s),n3=c(j9," default debug informations"),j9.forEach(s),s3=u(zs),To=o(zs,"LI",{});var K9=e(To);zl=o(K9,"CODE",{});var yg=e(zl);a3=c(yg,"-g3"),yg.forEach(s),t3=c(K9," maximal debug informations"),K9.forEach(s),zs.forEach(s),Nf=u(a),Co=o(a,"BLOCKQUOTE",{});var wg=e(Co);ns=o(wg,"P",{});var qp=e(ns);o3=c(qp,"I recommand to stay with the default value "),ql=o(qp,"CODE",{});var Tg=e(ql);e3=c(Tg,"-g"),Tg.forEach(s),p3=c(qp," and switch to higher level "),Fl=o(qp,"CODE",{});var Cg=e(Fl);c3=c(Cg,"-g3"),Cg.forEach(s),l3=c(qp," if you have no clue on the error."),qp.forEach(s),wg.forEach(s),Wf=u(a),Do=o(a,"P",{});var Dg=e(Do);u3=c(Dg,"Optimisation:"),Dg.forEach(s),Hf=u(a),Qn=o(a,"P",{});var Fp=e(Qn);r3=c(Fp,"The "),Vl=o(Fp,"STRONG",{});var gg=e(Vl);i3=c(gg,"Optimisation Flags"),gg.forEach(s),k3=c(Fp," begin with a "),Ql=o(Fp,"CODE",{});var Og=e(Ql);d3=c(Og,"-O"),Og.forEach(s),f3=c(Fp," (for Optimisation)"),Fp.forEach(s),Gf=u(a),is=o(a,"TABLE",{});var zh=e(is);jl=o(zh,"THEAD",{});var Ag=e(jl);H=o(Ag,"TR",{});var wn=e(H);Kl=o(wn,"TH",{});var Sg=e(Kl);h3=c(Sg,"Option"),Sg.forEach(s),m3=u(wn),Yl=o(wn,"TH",{});var Pg=e(Yl);v3=c(Pg,"Optimization Level"),Pg.forEach(s),E3=u(wn),Xl=o(wn,"TH",{});var Rg=e(Xl);_3=c(Rg,"Execution Time"),Rg.forEach(s),b3=u(wn),Jl=o(wn,"TH",{});var Lg=e(Jl);y3=c(Lg,"Code Size"),Lg.forEach(s),w3=u(wn),Zl=o(wn,"TH",{});var Ig=e(Zl);T3=c(Ig,"Memory Usage"),Ig.forEach(s),C3=u(wn),$l=o(wn,"TH",{});var Bg=e($l);D3=c(Bg,"Compilation Time"),Bg.forEach(s),wn.forEach(s),Ag.forEach(s),g3=u(zh),G=o(zh,"TBODY",{});var Tn=e(G);M=o(Tn,"TR",{});var Cn=e(M);nu=o(Cn,"TD",{});var xg=e(nu);su=o(xg,"CODE",{});var Ng=e(su);O3=c(Ng,"-O0"),Ng.forEach(s),xg.forEach(s),A3=u(Cn),au=o(Cn,"TD",{});var Wg=e(au);S3=c(Wg,"compilation time"),Wg.forEach(s),P3=u(Cn),tu=o(Cn,"TD",{});var Hg=e(tu);R3=c(Hg,"+"),Hg.forEach(s),L3=u(Cn),ou=o(Cn,"TD",{});var Gg=e(ou);I3=c(Gg,"+"),Gg.forEach(s),B3=u(Cn),eu=o(Cn,"TD",{});var Mg=e(eu);x3=c(Mg,"-"),Mg.forEach(s),N3=u(Cn),pu=o(Cn,"TD",{});var Ug=e(pu);W3=c(Ug,"-"),Ug.forEach(s),Cn.forEach(s),H3=u(Tn),U=o(Tn,"TR",{});var Dn=e(U);cu=o(Dn,"TD",{});var zg=e(cu);lu=o(zg,"CODE",{});var qg=e(lu);G3=c(qg,"-O1 /-O"),qg.forEach(s),zg.forEach(s),M3=u(Dn),uu=o(Dn,"TD",{});var Fg=e(uu);U3=c(Fg,"code size/exe time"),Fg.forEach(s),z3=u(Dn),ru=o(Dn,"TD",{});var Vg=e(ru);q3=c(Vg,"-"),Vg.forEach(s),F3=u(Dn),iu=o(Dn,"TD",{});var Qg=e(iu);V3=c(Qg,"-"),Qg.forEach(s),Q3=u(Dn),ku=o(Dn,"TD",{});var jg=e(ku);j3=c(jg,"+"),jg.forEach(s),K3=u(Dn),du=o(Dn,"TD",{});var Kg=e(du);Y3=c(Kg,"+"),Kg.forEach(s),Dn.forEach(s),X3=u(Tn),z=o(Tn,"TR",{});var gn=e(z);fu=o(gn,"TD",{});var Yg=e(fu);hu=o(Yg,"CODE",{});var Xg=e(hu);J3=c(Xg,"-O2"),Xg.forEach(s),Yg.forEach(s),Z3=u(gn),mu=o(gn,"TD",{});var Jg=e(mu);$3=c(Jg,"code size/exe time"),Jg.forEach(s),nb=u(gn),vu=o(gn,"TD",{});var Zg=e(vu);sb=c(Zg,"- -"),Zg.forEach(s),ab=u(gn),Eu=o(gn,"TD",{});var $g=e(Eu);tb=c($g,"="),$g.forEach(s),ob=u(gn),_u=o(gn,"TD",{});var nO=e(_u);eb=c(nO,"+"),nO.forEach(s),pb=u(gn),bu=o(gn,"TD",{});var sO=e(bu);cb=c(sO,"+ +"),sO.forEach(s),gn.forEach(s),lb=u(Tn),q=o(Tn,"TR",{});var On=e(q);yu=o(On,"TD",{});var aO=e(yu);wu=o(aO,"CODE",{});var tO=e(wu);ub=c(tO,"-O3"),tO.forEach(s),aO.forEach(s),rb=u(On),Tu=o(On,"TD",{});var oO=e(Tu);ib=c(oO,"code size/exe time"),oO.forEach(s),kb=u(On),Cu=o(On,"TD",{});var eO=e(Cu);db=c(eO,"- - -"),eO.forEach(s),fb=u(On),Du=o(On,"TD",{});var pO=e(Du);hb=c(pO,"="),pO.forEach(s),mb=u(On),gu=o(On,"TD",{});var cO=e(gu);vb=c(cO,"+"),cO.forEach(s),Eb=u(On),Ou=o(On,"TD",{});var lO=e(Ou);_b=c(lO,"+ + +"),lO.forEach(s),On.forEach(s),bb=u(Tn),F=o(Tn,"TR",{});var An=e(F);Au=o(An,"TD",{});var uO=e(Au);Su=o(uO,"CODE",{});var rO=e(Su);yb=c(rO,"-Os"),rO.forEach(s),uO.forEach(s),wb=u(An),Pu=o(An,"TD",{});var iO=e(Pu);Tb=c(iO,"code size"),iO.forEach(s),Cb=u(An),Ru=o(An,"TD",{});var kO=e(Ru);Db=c(kO,"="),kO.forEach(s),gb=u(An),Lu=o(An,"TD",{});var dO=e(Lu);Ob=c(dO,"-"),dO.forEach(s),Ab=u(An),Iu=o(An,"TD",{});var fO=e(Iu);Sb=c(fO,"="),fO.forEach(s),Pb=u(An),Bu=o(An,"TD",{});var hO=e(Bu);Rb=c(hO,"++"),hO.forEach(s),An.forEach(s),Lb=u(Tn),V=o(Tn,"TR",{});var Sn=e(V);xu=o(Sn,"TD",{});var mO=e(xu);Nu=o(mO,"CODE",{});var vO=e(Nu);Ib=c(vO,"-Ofast"),vO.forEach(s),mO.forEach(s),Bb=u(Sn),Wu=o(Sn,"TD",{});var EO=e(Wu);xb=c(EO,"imprecise fast math"),EO.forEach(s),Nb=u(Sn),Hu=o(Sn,"TD",{});var _O=e(Hu);Wb=c(_O,"- - -"),_O.forEach(s),Hb=u(Sn),Gu=o(Sn,"TD",{});var bO=e(Gu);Gb=c(bO,"="),bO.forEach(s),Mb=u(Sn),Mu=o(Sn,"TD",{});var yO=e(Mu);Ub=c(yO,"+"),yO.forEach(s),zb=u(Sn),Uu=o(Sn,"TD",{});var wO=e(Uu);qb=c(wO,"+ + +"),wO.forEach(s),Sn.forEach(s),Tn.forEach(s),zh.forEach(s),Mf=u(a),go=o(a,"P",{});var TO=e(go);Oo=o(TO,"EM",{});var Y9=e(Oo);Fb=c(Y9,"informations from "),ra=o(Y9,"A",{href:!0,rel:!0});var CO=e(ra);Vb=c(CO,"https://www.rapidtables.com/code/linux/gcc/gcc-o.html#optimization"),CO.forEach(s),Y9.forEach(s),TO.forEach(s),Uf=u(a),ia=o(a,"H3",{id:!0});var DO=e(ia);Ao=o(DO,"A",{href:!0});var gO=e(Ao);Qb=c(gO,"Import and use Libraries"),gO.forEach(s),DO.forEach(s),zf=u(a),ka=o(a,"H4",{id:!0});var OO=e(ka);So=o(OO,"A",{href:!0});var AO=e(So);jb=c(AO,"Includes and Dependancies"),AO.forEach(s),OO.forEach(s),qf=u(a),jn=o(a,"P",{});var Vp=e(jn);Kb=c(Vp,"To "),zu=o(Vp,"STRONG",{});var SO=e(zu);Yb=c(SO,"include a library"),SO.forEach(s),Xb=c(Vp," we use the "),qu=o(Vp,"CODE",{});var PO=e(qu);Jb=c(PO,"#include"),PO.forEach(s),Zb=c(Vp," command."),Vp.forEach(s),Ff=u(a),ks=o(a,"UL",{});var qh=e(ks);Po=o(qh,"LI",{});var X9=e(Po);Fu=o(X9,"CODE",{});var RO=e(Fu);$b=c(RO,"#include <library.h>"),RO.forEach(s),n5=c(X9,` when the headers folder is already linked in
the compiler`),X9.forEach(s),s5=u(qh),Ro=o(qh,"LI",{});var J9=e(Ro);Vu=o(J9,"CODE",{});var LO=e(Vu);a5=c(LO,'#include "folder/library.h"'),LO.forEach(s),t5=c(J9,` to search in a specific folder with
the path`),J9.forEach(s),qh.forEach(s),Vf=u(a),Lo=o(a,"P",{});var IO=e(Lo);o5=c(IO,"List of the most common and used system libraries:"),IO.forEach(s),Qf=u(a),v=o(a,"UL",{});var X=e(v);da=o(X,"LI",{});var Fh=e(da);Qu=o(Fh,"STRONG",{});var BO=e(Qu);e5=c(BO,"C"),BO.forEach(s),p5=c(Fh," Input/Output library: "),ju=o(Fh,"CODE",{});var xO=e(ju);c5=c(xO,"#include <stdio.h>"),xO.forEach(s),Fh.forEach(s),l5=u(X),fa=o(X,"LI",{});var Vh=e(fa);Ku=o(Vh,"STRONG",{});var NO=e(Ku);u5=c(NO,"C"),NO.forEach(s),r5=c(Vh," General library: "),Yu=o(Vh,"CODE",{});var WO=e(Yu);i5=c(WO,"#include <stdlib.h>"),WO.forEach(s),Vh.forEach(s),k5=u(X),ha=o(X,"LI",{});var Qh=e(ha);Xu=o(Qh,"STRONG",{});var HO=e(Xu);d5=c(HO,"C"),HO.forEach(s),f5=c(Qh," Numerics library : "),Ju=o(Qh,"CODE",{});var GO=e(Ju);h5=c(GO,"#include <cmath.h>"),GO.forEach(s),Qh.forEach(s),m5=u(X),ma=o(X,"LI",{});var jh=e(ma);Zu=o(jh,"STRONG",{});var MO=e(Zu);v5=c(MO,"C"),MO.forEach(s),E5=c(jh," Strings library: "),$u=o(jh,"CODE",{});var UO=e($u);_5=c(UO,"#include <string.h>"),UO.forEach(s),jh.forEach(s),b5=u(X),va=o(X,"LI",{});var Kh=e(va);nr=o(Kh,"STRONG",{});var zO=e(nr);y5=c(zO,"C"),zO.forEach(s),w5=c(Kh," Time library: "),sr=o(Kh,"CODE",{});var qO=e(sr);T5=c(qO,"#include <time.h>"),qO.forEach(s),Kh.forEach(s),C5=u(X),Ea=o(X,"LI",{});var Yh=e(Ea);ar=o(Yh,"STRONG",{});var FO=e(ar);D5=c(FO,"C++"),FO.forEach(s),g5=c(Yh," Time library: "),tr=o(Yh,"CODE",{});var VO=e(tr);O5=c(VO,"#include <chrono>"),VO.forEach(s),Yh.forEach(s),A5=u(X),_a=o(X,"LI",{});var Xh=e(_a);or=o(Xh,"STRONG",{});var QO=e(or);S5=c(QO,"C++"),QO.forEach(s),P5=c(Xh," Treads library: "),er=o(Xh,"CODE",{});var jO=e(er);R5=c(jO,"#include <thread>"),jO.forEach(s),Xh.forEach(s),X.forEach(s),jf=u(a),Io=o(a,"P",{});var KO=e(Io);Bo=o(KO,"EM",{});var Z9=e(Bo);L5=c(Z9,"informations from "),ba=o(Z9,"A",{href:!0,rel:!0});var YO=e(ba);I5=c(YO,"https://en.cppreference.com/w/cpp/header"),YO.forEach(s),Z9.forEach(s),KO.forEach(s),Kf=u(a),ya=o(a,"H4",{id:!0});var XO=e(ya);xo=o(XO,"A",{href:!0});var JO=e(xo);B5=c(JO,"Namespace and utilities"),JO.forEach(s),XO.forEach(s),Yf=u(a),Kn=o(a,"P",{});var Qp=e(Kn);x5=c(Qp,"When you use multiple libraries, it could be some "),pr=o(Qp,"CODE",{});var ZO=e(pr);N5=c(ZO,"conflicts"),ZO.forEach(s),W5=c(Qp,` under
names between some libraries, that’s why we use `),cr=o(Qp,"CODE",{});var $O=e(cr);H5=c($O,"namespaces"),$O.forEach(s),G5=c(Qp,"."),Qp.forEach(s),Xf=u(a),No=o(a,"BLOCKQUOTE",{});var nA=e(No);Wo=o(nA,"P",{});var $9=e(Wo);M5=c($9,`“Namespaces provide a method for preventing name conflicts in large projects.”
`),wa=o($9,"A",{href:!0,rel:!0});var sA=e(wa);U5=c(sA,"source"),sA.forEach(s),$9.forEach(s),nA.forEach(s),Jf=u(a),Ta=o(a,"P",{});var nT=e(Ta);z5=c(nT,"We can use namespaces like that: "),lr=o(nT,"CODE",{});var aA=e(lr);q5=c(aA,"sf::..."),aA.forEach(s),nT.forEach(s),Zf=u(a),Ca=o(a,"PRE",{class:!0});var KI=e(Ca);KI.forEach(s),$f=u(a),Da=o(a,"P",{});var sT=e(Da);F5=c(sT,"Or like that: "),ur=o(sT,"CODE",{});var tA=e(ur);V5=c(tA,"namespace sf { ... }"),tA.forEach(s),sT.forEach(s),n1=u(a),ga=o(a,"PRE",{class:!0});var YI=e(ga);YI.forEach(s),s1=u(a),Oa=o(a,"P",{});var aT=e(Oa);Q5=c(aT,"Or even like that: "),rr=o(aT,"CODE",{});var oA=e(rr);j5=c(oA,"using namespace sf;"),oA.forEach(s),aT.forEach(s),a1=u(a),Aa=o(a,"PRE",{class:!0});var XI=e(Aa);XI.forEach(s),t1=u(a),Ho=o(a,"BLOCKQUOTE",{});var eA=e(Ho);Yn=o(eA,"P",{});var Wt=e(Yn);ir=o(Wt,"STRONG",{});var pA=e(ir);K5=c(pA,"I recommand the first two methods"),pA.forEach(s),Y5=c(Wt,`, the problem with the last one is
that you `),kr=o(Wt,"CODE",{});var cA=e(kr);X5=c(cA,"loose all the purpose"),cA.forEach(s),J5=c(Wt," of the namespace, and it’s "),dr=o(Wt,"CODE",{});var lA=e(dr);Z5=c(lA,"confusing"),lA.forEach(s),$5=c(Wt,`
when you want to use both functions from libraries that would be in
conflict, you will have to mix the third and the first method...`),Wt.forEach(s),eA.forEach(s),o1=u(a),Sa=o(a,"H2",{id:!0});var uA=e(Sa);Go=o(uA,"A",{href:!0});var rA=e(Go);n0=c(rA,"Cheat Sheets"),rA.forEach(s),uA.forEach(s),e1=u(a),Pa=o(a,"H3",{id:!0});var iA=e(Pa);Mo=o(iA,"A",{href:!0});var kA=e(Mo);s0=c(kA,"Usefull Informations"),kA.forEach(s),iA.forEach(s),p1=u(a),Uo=o(a,"BLOCKQUOTE",{});var dA=e(Uo);zo=o(dA,"P",{});var tT=e(zo);a0=c(tT,"Unofficial Documentation: "),Ra=o(tT,"A",{href:!0,rel:!0});var fA=e(Ra);t0=c(fA,"https://en.cppreference.com/w/"),fA.forEach(s),tT.forEach(s),dA.forEach(s),c1=u(a),qo=o(a,"P",{});var hA=e(qo);fr=o(hA,"STRONG",{});var mA=e(fr);o0=c(mA,"About Cpp"),mA.forEach(s),hA.forEach(s),l1=u(a),Y=o(a,"UL",{});var Jn=e(Y);Fo=o(Jn,"LI",{});var oT=e(Fo);hr=o(oT,"STRONG",{});var vA=e(hr);e0=c(vA,"Type of Language:"),vA.forEach(s),p0=c(oT," Procedural, Object-Oriented"),oT.forEach(s),c0=u(Jn),Vo=o(Jn,"LI",{});var eT=e(Vo);mr=o(eT,"STRONG",{});var EA=e(mr);l0=c(EA,"Born in:"),EA.forEach(s),u0=c(eT," 1985"),eT.forEach(s),r0=u(Jn),Qo=o(Jn,"LI",{});var pT=e(Qo);vr=o(pT,"STRONG",{});var _A=e(vr);i0=c(_A,"Caracteristics:"),_A.forEach(s),k0=c(pT," Statically typed, low level, fast"),pT.forEach(s),d0=u(Jn),La=o(Jn,"LI",{});var Jh=e(La);Er=o(Jh,"STRONG",{});var bA=e(Er);f0=c(bA,"Popularity:"),bA.forEach(s),h0=c(Jh," 5.8% (6th) "),Ia=o(Jh,"A",{href:!0,rel:!0});var yA=e(Ia);m0=c(yA,"src"),yA.forEach(s),Jh.forEach(s),v0=u(Jn),jo=o(Jn,"LI",{});var cT=e(jo);_r=o(cT,"STRONG",{});var wA=e(_r);E0=c(wA,"Usefull for:"),wA.forEach(s),_0=c(cT," softwares, games, embedded…"),cT.forEach(s),Jn.forEach(s),u1=u(a),Ba=o(a,"H3",{id:!0});var TA=e(Ba);Ko=o(TA,"A",{href:!0});var CA=e(Ko);b0=c(CA,"Basic C Cheat Sheet"),CA.forEach(s),TA.forEach(s),r1=u(a),xa=o(a,"H4",{id:!0});var DA=e(xa);Yo=o(DA,"A",{href:!0});var gA=e(Yo);y0=c(gA,"Types and Variables"),gA.forEach(s),DA.forEach(s),i1=u(a),bn=o(a,"P",{});var qs=e(bn);br=o(qs,"CODE",{});var OA=e(br);w0=c(OA,"/s/"),OA.forEach(s),T0=c(qs," stand for "),yr=o(qs,"STRONG",{});var AA=e(yr);C0=c(AA,"Signed"),AA.forEach(s),D0=c(qs," and "),wr=o(qs,"CODE",{});var SA=e(wr);g0=c(SA,"/u/"),SA.forEach(s),O0=c(qs," for "),Tr=o(qs,"STRONG",{});var PA=e(Tr);A0=c(PA,"Unsigned"),PA.forEach(s),qs.forEach(s),k1=u(a),Xo=o(a,"P",{});var RA=e(Xo);Cr=o(RA,"STRONG",{});var LA=e(Cr);S0=c(LA,"NUMERICS"),LA.forEach(s),RA.forEach(s),d1=u(a),ds=o(a,"TABLE",{});var Zh=e(ds);Dr=o(Zh,"THEAD",{});var IA=e(Dr);E=o(IA,"TR",{class:!0});var J=e(E);gr=o(J,"TH",{});var BA=e(gr);P0=c(BA,"Name"),BA.forEach(s),R0=u(J),Or=o(J,"TH",{});var xA=e(Or);L0=c(xA,"Syntax"),xA.forEach(s),I0=u(J),Ar=o(J,"TH",{});var NA=e(Ar);B0=c(NA,"Size"),NA.forEach(s),x0=u(J),Sr=o(J,"TH",{});var WA=e(Sr);N0=c(WA,"Min"),WA.forEach(s),W0=u(J),Pr=o(J,"TH",{});var HA=e(Pr);H0=c(HA,"Max"),HA.forEach(s),G0=u(J),Rr=o(J,"TH",{});var GA=e(Rr);M0=c(GA,"Letter"),GA.forEach(s),U0=u(J),Lr=o(J,"TH",{});var MA=e(Lr);z0=c(MA,"Aliases"),MA.forEach(s),J.forEach(s),IA.forEach(s),q0=u(Zh),m=o(Zh,"TBODY",{});var W=e(m);y=o(W,"TR",{});var Z=e(y);Na=o(Z,"TD",{});var $h=e(Na);F0=c($h,"Short "),Ir=o($h,"CODE",{});var UA=e(Ir);V0=c(UA,"/s/"),UA.forEach(s),Q0=c($h," Integer"),$h.forEach(s),j0=u(Z),Br=o(Z,"TD",{});var zA=e(Br);xr=o(zA,"CODE",{});var qA=e(xr);K0=c(qA,"short int"),qA.forEach(s),zA.forEach(s),Y0=u(Z),Nr=o(Z,"TD",{});var FA=e(Nr);Wr=o(FA,"CODE",{});var VA=e(Wr);X0=c(VA,"16+ bits"),VA.forEach(s),FA.forEach(s),J0=u(Z),Jo=o(Z,"TD",{});var lT=e(Jo);Z0=c(lT,"-32 768 "),fs=o(lT,"SPAN",{class:!0});var nm=e(fs);$0=c(nm,"(−2"),Hr=o(nm,"SUP",{});var QA=e(Hr);n4=c(QA,"15"),QA.forEach(s),s4=c(nm,")"),nm.forEach(s),lT.forEach(s),a4=u(Z),Zo=o(Z,"TD",{});var uT=e(Zo);t4=c(uT,"32 767 "),hs=o(uT,"SPAN",{class:!0});var sm=e(hs);o4=c(sm,"(2"),Gr=o(sm,"SUP",{});var jA=e(Gr);e4=c(jA,"15"),jA.forEach(s),p4=c(sm,"−1)"),sm.forEach(s),uT.forEach(s),c4=u(Z),Mr=o(Z,"TD",{});var KA=e(Mr);Ur=o(KA,"CODE",{});var YA=e(Ur);l4=c(YA,"%h"),YA.forEach(s),KA.forEach(s),u4=u(Z),Wa=o(Z,"TD",{});var am=e(Wa);zr=o(am,"CODE",{});var XA=e(zr);r4=c(XA,"short"),XA.forEach(s),i4=u(am),qr=o(am,"CODE",{});var JA=e(qr);k4=c(JA,"signed short"),JA.forEach(s),am.forEach(s),Z.forEach(s),d4=u(W),w=o(W,"TR",{});var $=e(w);Ha=o($,"TD",{});var tm=e(Ha);f4=c(tm,"Short "),Fr=o(tm,"CODE",{});var ZA=e(Fr);h4=c(ZA,"/u/"),ZA.forEach(s),m4=c(tm," Integer"),tm.forEach(s),v4=u($),Vr=o($,"TD",{});var $A=e(Vr);Qr=o($A,"CODE",{});var nS=e(Qr);E4=c(nS,"unsigned short int"),nS.forEach(s),$A.forEach(s),_4=u($),jr=o($,"TD",{});var sS=e(jr);Kr=o(sS,"CODE",{});var aS=e(Kr);b4=c(aS,"16+ bits"),aS.forEach(s),sS.forEach(s),y4=u($),$o=o($,"TD",{});var rT=e($o);w4=c(rT,"0 "),ne=o(rT,"SPAN",{class:!0});var tS=e(ne);T4=c(tS,"(0)"),tS.forEach(s),rT.forEach(s),C4=u($),se=o($,"TD",{});var iT=e(se);D4=c(iT,"65 535 "),ms=o(iT,"SPAN",{class:!0});var om=e(ms);g4=c(om,"(2"),Yr=o(om,"SUP",{});var oS=e(Yr);O4=c(oS,"16"),oS.forEach(s),A4=c(om,"−1)"),om.forEach(s),iT.forEach(s),S4=u($),Xr=o($,"TD",{});var eS=e(Xr);Jr=o(eS,"CODE",{});var pS=e(Jr);P4=c(pS,"%h"),pS.forEach(s),eS.forEach(s),R4=u($),Ga=o($,"TD",{});var em=e(Ga);Zr=o(em,"CODE",{});var cS=e(Zr);L4=c(cS,"unsigned"),cS.forEach(s),I4=u(em),$r=o(em,"CODE",{});var lS=e($r);B4=c(lS,"short"),lS.forEach(s),em.forEach(s),$.forEach(s),x4=u(W),T=o(W,"TR",{});var nn=e(T);ae=o(nn,"TD",{});var kT=e(ae);N4=c(kT,"Integer "),ni=o(kT,"CODE",{});var uS=e(ni);W4=c(uS,"/s/"),uS.forEach(s),kT.forEach(s),H4=u(nn),si=o(nn,"TD",{});var rS=e(si);ai=o(rS,"CODE",{});var iS=e(ai);G4=c(iS,"int"),iS.forEach(s),rS.forEach(s),M4=u(nn),ti=o(nn,"TD",{});var kS=e(ti);oi=o(kS,"CODE",{});var dS=e(oi);U4=c(dS,"16+ bits"),dS.forEach(s),kS.forEach(s),z4=u(nn),te=o(nn,"TD",{});var dT=e(te);q4=c(dT,"-32 768 "),vs=o(dT,"SPAN",{class:!0});var pm=e(vs);F4=c(pm,"(−2"),ei=o(pm,"SUP",{});var fS=e(ei);V4=c(fS,"15"),fS.forEach(s),Q4=c(pm,")"),pm.forEach(s),dT.forEach(s),j4=u(nn),oe=o(nn,"TD",{});var fT=e(oe);K4=c(fT,"32 767 "),Es=o(fT,"SPAN",{class:!0});var cm=e(Es);Y4=c(cm,"(2"),pi=o(cm,"SUP",{});var hS=e(pi);X4=c(hS,"15"),hS.forEach(s),J4=c(cm,"−1)"),cm.forEach(s),fT.forEach(s),Z4=u(nn),ci=o(nn,"TD",{});var mS=e(ci);li=o(mS,"CODE",{});var vS=e(li);$4=c(vS,"%i"),vS.forEach(s),mS.forEach(s),ny=u(nn),Ma=o(nn,"TD",{});var lm=e(Ma);ui=o(lm,"CODE",{});var ES=e(ui);sy=c(ES,"signed"),ES.forEach(s),ay=u(lm),ri=o(lm,"CODE",{});var _S=e(ri);ty=c(_S,"signed int"),_S.forEach(s),lm.forEach(s),nn.forEach(s),oy=u(W),C=o(W,"TR",{});var sn=e(C);ee=o(sn,"TD",{});var hT=e(ee);ey=c(hT,"Integer "),ii=o(hT,"CODE",{});var bS=e(ii);py=c(bS,"/u/"),bS.forEach(s),hT.forEach(s),cy=u(sn),ki=o(sn,"TD",{});var yS=e(ki);di=o(yS,"CODE",{});var wS=e(di);ly=c(wS,"unsigned int"),wS.forEach(s),yS.forEach(s),uy=u(sn),fi=o(sn,"TD",{});var TS=e(fi);hi=o(TS,"CODE",{});var CS=e(hi);ry=c(CS,"16+ bits"),CS.forEach(s),TS.forEach(s),iy=u(sn),pe=o(sn,"TD",{});var mT=e(pe);ky=c(mT,"0 "),ce=o(mT,"SPAN",{class:!0});var DS=e(ce);dy=c(DS,"(0)"),DS.forEach(s),mT.forEach(s),fy=u(sn),le=o(sn,"TD",{});var vT=e(le);hy=c(vT,"65 535 "),_s=o(vT,"SPAN",{class:!0});var um=e(_s);my=c(um,"(2"),mi=o(um,"SUP",{});var gS=e(mi);vy=c(gS,"16"),gS.forEach(s),Ey=c(um,"−1)"),um.forEach(s),vT.forEach(s),_y=u(sn),vi=o(sn,"TD",{});var OS=e(vi);Ei=o(OS,"CODE",{});var AS=e(Ei);by=c(AS,"%i"),AS.forEach(s),OS.forEach(s),yy=u(sn),Ua=o(sn,"TD",{});var rm=e(Ua);_i=o(rm,"CODE",{});var SS=e(_i);wy=c(SS,"unsigned"),SS.forEach(s),Ty=u(rm),bi=o(rm,"CODE",{});var PS=e(bi);Cy=c(PS,"unsigned int"),PS.forEach(s),rm.forEach(s),sn.forEach(s),Dy=u(W),D=o(W,"TR",{});var an=e(D);za=o(an,"TD",{});var im=e(za);gy=c(im,"Long "),yi=o(im,"CODE",{});var RS=e(yi);Oy=c(RS,"/s/"),RS.forEach(s),Ay=c(im," Integer"),im.forEach(s),Sy=u(an),wi=o(an,"TD",{});var LS=e(wi);Ti=o(LS,"CODE",{});var IS=e(Ti);Py=c(IS,"long int"),IS.forEach(s),LS.forEach(s),Ry=u(an),Ci=o(an,"TD",{});var BS=e(Ci);Di=o(BS,"CODE",{});var xS=e(Di);Ly=c(xS,"32+ bits"),xS.forEach(s),BS.forEach(s),Iy=u(an),ue=o(an,"TD",{});var ET=e(ue);By=c(ET,"-2 147 483 648 "),bs=o(ET,"SPAN",{class:!0});var km=e(bs);xy=c(km,"(−2"),gi=o(km,"SUP",{});var NS=e(gi);Ny=c(NS,"31"),NS.forEach(s),Wy=c(km,")"),km.forEach(s),ET.forEach(s),Hy=u(an),re=o(an,"TD",{});var _T=e(re);Gy=c(_T,"2 147 483 647 "),ys=o(_T,"SPAN",{class:!0});var dm=e(ys);My=c(dm,"(2"),Oi=o(dm,"SUP",{});var WS=e(Oi);Uy=c(WS,"31"),WS.forEach(s),zy=c(dm,"−1)"),dm.forEach(s),_T.forEach(s),qy=u(an),Ai=o(an,"TD",{});var HS=e(Ai);Si=o(HS,"CODE",{});var GS=e(Si);Fy=c(GS,"%l"),GS.forEach(s),HS.forEach(s),Vy=u(an),Pi=o(an,"TD",{});var MS=e(Pi);Ri=o(MS,"CODE",{});var US=e(Ri);Qy=c(US,"signed long int"),US.forEach(s),MS.forEach(s),an.forEach(s),jy=u(W),g=o(W,"TR",{});var tn=e(g);qa=o(tn,"TD",{});var fm=e(qa);Ky=c(fm,"Long "),Li=o(fm,"CODE",{});var zS=e(Li);Yy=c(zS,"/u/"),zS.forEach(s),Xy=c(fm," Integer"),fm.forEach(s),Jy=u(tn),Ii=o(tn,"TD",{});var qS=e(Ii);Bi=o(qS,"CODE",{});var FS=e(Bi);Zy=c(FS,"unsigned long int"),FS.forEach(s),qS.forEach(s),$y=u(tn),xi=o(tn,"TD",{});var VS=e(xi);Ni=o(VS,"CODE",{});var QS=e(Ni);nw=c(QS,"32+ bits"),QS.forEach(s),VS.forEach(s),sw=u(tn),ie=o(tn,"TD",{});var bT=e(ie);aw=c(bT,"0 "),ke=o(bT,"SPAN",{class:!0});var jS=e(ke);tw=c(jS,"(0)"),jS.forEach(s),bT.forEach(s),ow=u(tn),de=o(tn,"TD",{});var yT=e(de);ew=c(yT,"4 294 967 295 "),ws=o(yT,"SPAN",{class:!0});var hm=e(ws);pw=c(hm,"(2"),Wi=o(hm,"SUP",{});var KS=e(Wi);cw=c(KS,"32"),KS.forEach(s),lw=c(hm,"−1)"),hm.forEach(s),yT.forEach(s),uw=u(tn),Hi=o(tn,"TD",{});var YS=e(Hi);Gi=o(YS,"CODE",{});var XS=e(Gi);rw=c(XS,"%l"),XS.forEach(s),YS.forEach(s),iw=u(tn),Mi=o(tn,"TD",{});var JS=e(Mi);Ui=o(JS,"CODE",{});var ZS=e(Ui);kw=c(ZS,"unsigned long"),ZS.forEach(s),JS.forEach(s),tn.forEach(s),dw=u(W),O=o(W,"TR",{});var on=e(O);Fa=o(on,"TD",{});var mm=e(Fa);fw=c(mm,"Long Long "),zi=o(mm,"CODE",{});var $S=e(zi);hw=c($S,"/s/"),$S.forEach(s),mw=c(mm," Integer"),mm.forEach(s),vw=u(on),qi=o(on,"TD",{});var nP=e(qi);Fi=o(nP,"CODE",{});var sP=e(Fi);Ew=c(sP,"long long int"),sP.forEach(s),nP.forEach(s),_w=u(on),Vi=o(on,"TD",{});var aP=e(Vi);Qi=o(aP,"CODE",{});var tP=e(Qi);bw=c(tP,"64+ bits"),tP.forEach(s),aP.forEach(s),yw=u(on),fe=o(on,"TD",{});var wT=e(fe);ww=c(wT,"-9.223e-15 "),Ts=o(wT,"SPAN",{class:!0});var vm=e(Ts);Tw=c(vm,"(−2"),ji=o(vm,"SUP",{});var oP=e(ji);Cw=c(oP,"63"),oP.forEach(s),Dw=c(vm,")"),vm.forEach(s),wT.forEach(s),gw=u(on),he=o(on,"TD",{});var TT=e(he);Ow=c(TT,"9.223e+15 "),Cs=o(TT,"SPAN",{class:!0});var Em=e(Cs);Aw=c(Em,"(2"),Ki=o(Em,"SUP",{});var eP=e(Ki);Sw=c(eP,"63"),eP.forEach(s),Pw=c(Em,"−1)"),Em.forEach(s),TT.forEach(s),Rw=u(on),Yi=o(on,"TD",{});var pP=e(Yi);Xi=o(pP,"CODE",{});var cP=e(Xi);Lw=c(cP,"%ll"),cP.forEach(s),pP.forEach(s),Iw=u(on),Ji=o(on,"TD",{});var lP=e(Ji);Zi=o(lP,"CODE",{});var uP=e(Zi);Bw=c(uP,"signed long long"),uP.forEach(s),lP.forEach(s),on.forEach(s),xw=u(W),A=o(W,"TR",{});var en=e(A);Va=o(en,"TD",{});var _m=e(Va);Nw=c(_m,"Long Long "),$i=o(_m,"CODE",{});var rP=e($i);Ww=c(rP,"/u/"),rP.forEach(s),Hw=c(_m," Integer"),_m.forEach(s),Gw=u(en),nk=o(en,"TD",{});var iP=e(nk);sk=o(iP,"CODE",{});var kP=e(sk);Mw=c(kP,"unsigned long long int"),kP.forEach(s),iP.forEach(s),Uw=u(en),ak=o(en,"TD",{});var dP=e(ak);tk=o(dP,"CODE",{});var fP=e(tk);zw=c(fP,"64+ bits"),fP.forEach(s),dP.forEach(s),qw=u(en),me=o(en,"TD",{});var CT=e(me);Fw=c(CT,"0 "),ve=o(CT,"SPAN",{class:!0});var hP=e(ve);Vw=c(hP,"(0)"),hP.forEach(s),CT.forEach(s),Qw=u(en),Ee=o(en,"TD",{});var DT=e(Ee);jw=c(DT,"18.446e+15 "),Ds=o(DT,"SPAN",{class:!0});var bm=e(Ds);Kw=c(bm,"(2"),ok=o(bm,"SUP",{});var mP=e(ok);Yw=c(mP,"64"),mP.forEach(s),Xw=c(bm,"−1)"),bm.forEach(s),DT.forEach(s),Jw=u(en),ek=o(en,"TD",{});var vP=e(ek);pk=o(vP,"CODE",{});var EP=e(pk);Zw=c(EP,"%ll"),EP.forEach(s),vP.forEach(s),$w=u(en),ck=o(en,"TD",{});var _P=e(ck);lk=o(_P,"CODE",{});var bP=e(lk);n6=c(bP,"unsigned long long"),bP.forEach(s),_P.forEach(s),en.forEach(s),W.forEach(s),Zh.forEach(s),f1=u(a),_e=o(a,"BLOCKQUOTE",{});var yP=e(_e);uk=o(yP,"P",{});var wP=e(uk);s6=c(wP,"Integers are not rounded they are truncated toward 0. I recommand to not use short appart if you know what you do."),wP.forEach(s),yP.forEach(s),h1=u(a),be=o(a,"P",{});var TP=e(be);rk=o(TP,"STRONG",{});var CP=e(rk);a6=c(CP,"CHARS"),CP.forEach(s),TP.forEach(s),m1=u(a),gs=o(a,"TABLE",{});var ym=e(gs);ik=o(ym,"THEAD",{});var DP=e(ik);_=o(DP,"TR",{class:!0});var pn=e(_);kk=o(pn,"TH",{});var gP=e(kk);t6=c(gP,"Name"),gP.forEach(s),o6=u(pn),dk=o(pn,"TH",{});var OP=e(dk);e6=c(OP,"Syntax"),OP.forEach(s),p6=u(pn),fk=o(pn,"TH",{});var AP=e(fk);c6=c(AP,"Size"),AP.forEach(s),l6=u(pn),hk=o(pn,"TH",{});var SP=e(hk);u6=c(SP,"Min"),SP.forEach(s),r6=u(pn),mk=o(pn,"TH",{});var PP=e(mk);i6=c(PP,"Max"),PP.forEach(s),k6=u(pn),vk=o(pn,"TH",{});var RP=e(vk);d6=c(RP,"Letter"),RP.forEach(s),f6=u(pn),Ek=o(pn,"TH",{});var LP=e(Ek);h6=c(LP,"Aliases"),LP.forEach(s),pn.forEach(s),DP.forEach(s),m6=u(ym),Q=o(ym,"TBODY",{});var Pn=e(Q);S=o(Pn,"TR",{});var cn=e(S);ye=o(cn,"TD",{});var gT=e(ye);v6=c(gT,"Char "),_k=o(gT,"CODE",{});var IP=e(_k);E6=c(IP,"/s/"),IP.forEach(s),gT.forEach(s),_6=u(cn),bk=o(cn,"TD",{});var BP=e(bk);yk=o(BP,"CODE",{});var xP=e(yk);b6=c(xP,"char"),xP.forEach(s),BP.forEach(s),y6=u(cn),wk=o(cn,"TD",{});var NP=e(wk);Tk=o(NP,"CODE",{});var WP=e(Tk);w6=c(WP,"8+ bits"),WP.forEach(s),NP.forEach(s),T6=u(cn),we=o(cn,"TD",{});var OT=e(we);C6=c(OT,"-128 "),Os=o(OT,"SPAN",{class:!0});var wm=e(Os);D6=c(wm,"(−2"),Ck=o(wm,"SUP",{});var HP=e(Ck);g6=c(HP,"7"),HP.forEach(s),O6=c(wm,")"),wm.forEach(s),OT.forEach(s),A6=u(cn),Te=o(cn,"TD",{});var AT=e(Te);S6=c(AT,"127 "),As=o(AT,"SPAN",{class:!0});var Tm=e(As);P6=c(Tm,"(2"),Dk=o(Tm,"SUP",{});var GP=e(Dk);R6=c(GP,"7"),GP.forEach(s),L6=c(Tm,"−1)"),Tm.forEach(s),AT.forEach(s),I6=u(cn),gk=o(cn,"TD",{});var MP=e(gk);Ok=o(MP,"CODE",{});var UP=e(Ok);B6=c(UP,"%hh"),UP.forEach(s),MP.forEach(s),x6=u(cn),Ak=o(cn,"TD",{});var zP=e(Ak);Sk=o(zP,"CODE",{});var qP=e(Sk);N6=c(qP,"signed char"),qP.forEach(s),zP.forEach(s),cn.forEach(s),W6=u(Pn),P=o(Pn,"TR",{});var ln=e(P);Ce=o(ln,"TD",{});var ST=e(Ce);H6=c(ST,"Char "),Pk=o(ST,"CODE",{});var FP=e(Pk);G6=c(FP,"/u/"),FP.forEach(s),ST.forEach(s),M6=u(ln),Rk=o(ln,"TD",{});var VP=e(Rk);Lk=o(VP,"CODE",{});var QP=e(Lk);U6=c(QP,"unsigned char"),QP.forEach(s),VP.forEach(s),z6=u(ln),Ik=o(ln,"TD",{});var jP=e(Ik);Bk=o(jP,"CODE",{});var KP=e(Bk);q6=c(KP,"8+ bits"),KP.forEach(s),jP.forEach(s),F6=u(ln),De=o(ln,"TD",{});var PT=e(De);V6=c(PT,"0 "),ge=o(PT,"SPAN",{class:!0});var YP=e(ge);Q6=c(YP,"(0)"),YP.forEach(s),PT.forEach(s),j6=u(ln),Oe=o(ln,"TD",{});var RT=e(Oe);K6=c(RT,"255 "),Ss=o(RT,"SPAN",{class:!0});var Cm=e(Ss);Y6=c(Cm,"(2"),xk=o(Cm,"SUP",{});var XP=e(xk);X6=c(XP,"8"),XP.forEach(s),J6=c(Cm,"−1)"),Cm.forEach(s),RT.forEach(s),Z6=u(ln),Nk=o(ln,"TD",{});var JP=e(Nk);Wk=o(JP,"CODE",{});var ZP=e(Wk);$6=c(ZP,"%hh"),ZP.forEach(s),JP.forEach(s),n7=u(ln),v1=o(ln,"TD",{}),e(v1).forEach(s),ln.forEach(s),s7=u(Pn),R=o(Pn,"TR",{});var un=e(R);Ae=o(un,"TD",{});var LT=e(Ae);a7=c(LT,"char8_t "),Hk=o(LT,"CODE",{});var $P=e(Hk);t7=c($P,"/u/"),$P.forEach(s),LT.forEach(s),o7=u(un),Gk=o(un,"TD",{});var nR=e(Gk);Mk=o(nR,"CODE",{});var sR=e(Mk);e7=c(sR,"unsigned char"),sR.forEach(s),nR.forEach(s),p7=u(un),Uk=o(un,"TD",{});var aR=e(Uk);zk=o(aR,"CODE",{});var tR=e(zk);c7=c(tR,"8+ bits"),tR.forEach(s),aR.forEach(s),l7=u(un),Se=o(un,"TD",{});var IT=e(Se);u7=c(IT,"0 "),Pe=o(IT,"SPAN",{class:!0});var oR=e(Pe);r7=c(oR,"(0)"),oR.forEach(s),IT.forEach(s),i7=u(un),Re=o(un,"TD",{});var BT=e(Re);k7=c(BT,"255 "),Ps=o(BT,"SPAN",{class:!0});var Dm=e(Ps);d7=c(Dm,"(2"),qk=o(Dm,"SUP",{});var eR=e(qk);f7=c(eR,"8"),eR.forEach(s),h7=c(Dm,"−1)"),Dm.forEach(s),BT.forEach(s),m7=u(un),Fk=o(un,"TD",{});var pR=e(Fk);Vk=o(pR,"CODE",{});var cR=e(Vk);v7=c(cR,"%hh"),cR.forEach(s),pR.forEach(s),E7=u(un),E1=o(un,"TD",{}),e(E1).forEach(s),un.forEach(s),_7=u(Pn),L=o(Pn,"TR",{});var rn=e(L);Le=o(rn,"TD",{});var xT=e(Le);b7=c(xT,"char16_t "),Qk=o(xT,"CODE",{});var lR=e(Qk);y7=c(lR,"/u/"),lR.forEach(s),xT.forEach(s),w7=u(rn),jk=o(rn,"TD",{});var uR=e(jk);Kk=o(uR,"CODE",{});var rR=e(Kk);T7=c(rR,"unsigned char"),rR.forEach(s),uR.forEach(s),C7=u(rn),Yk=o(rn,"TD",{});var iR=e(Yk);Xk=o(iR,"CODE",{});var kR=e(Xk);D7=c(kR,"8+ bits"),kR.forEach(s),iR.forEach(s),g7=u(rn),Ie=o(rn,"TD",{});var NT=e(Ie);O7=c(NT,"0 "),Be=o(NT,"SPAN",{class:!0});var dR=e(Be);A7=c(dR,"(0)"),dR.forEach(s),NT.forEach(s),S7=u(rn),xe=o(rn,"TD",{});var WT=e(xe);P7=c(WT,"255 "),Rs=o(WT,"SPAN",{class:!0});var gm=e(Rs);R7=c(gm,"(2"),Jk=o(gm,"SUP",{});var fR=e(Jk);L7=c(fR,"8"),fR.forEach(s),I7=c(gm,"−1)"),gm.forEach(s),WT.forEach(s),B7=u(rn),Zk=o(rn,"TD",{});var hR=e(Zk);$k=o(hR,"CODE",{});var mR=e($k);x7=c(mR,"%hh"),mR.forEach(s),hR.forEach(s),N7=u(rn),_1=o(rn,"TD",{}),e(_1).forEach(s),rn.forEach(s),W7=u(Pn),I=o(Pn,"TR",{});var kn=e(I);Ne=o(kn,"TD",{});var HT=e(Ne);H7=c(HT,"char32_t "),nd=o(HT,"CODE",{});var vR=e(nd);G7=c(vR,"/u/"),vR.forEach(s),HT.forEach(s),M7=u(kn),sd=o(kn,"TD",{});var ER=e(sd);ad=o(ER,"CODE",{});var _R=e(ad);U7=c(_R,"unsigned char"),_R.forEach(s),ER.forEach(s),z7=u(kn),td=o(kn,"TD",{});var bR=e(td);od=o(bR,"CODE",{});var yR=e(od);q7=c(yR,"8+ bits"),yR.forEach(s),bR.forEach(s),F7=u(kn),We=o(kn,"TD",{});var GT=e(We);V7=c(GT,"0 "),He=o(GT,"SPAN",{class:!0});var wR=e(He);Q7=c(wR,"(0)"),wR.forEach(s),GT.forEach(s),j7=u(kn),Ge=o(kn,"TD",{});var MT=e(Ge);K7=c(MT,"255 "),Ls=o(MT,"SPAN",{class:!0});var Om=e(Ls);Y7=c(Om,"(2"),ed=o(Om,"SUP",{});var TR=e(ed);X7=c(TR,"8"),TR.forEach(s),J7=c(Om,"−1)"),Om.forEach(s),MT.forEach(s),Z7=u(kn),pd=o(kn,"TD",{});var CR=e(pd);cd=o(CR,"CODE",{});var DR=e(cd);$7=c(DR,"%hh"),DR.forEach(s),CR.forEach(s),n8=u(kn),b1=o(kn,"TD",{}),e(b1).forEach(s),kn.forEach(s),s8=u(Pn),B=o(Pn,"TR",{});var dn=e(B);Me=o(dn,"TD",{});var UT=e(Me);a8=c(UT,"wchar_t "),ld=o(UT,"CODE",{});var gR=e(ld);t8=c(gR,"/u/"),gR.forEach(s),UT.forEach(s),o8=u(dn),ud=o(dn,"TD",{});var OR=e(ud);rd=o(OR,"CODE",{});var AR=e(rd);e8=c(AR,"unsigned char"),AR.forEach(s),OR.forEach(s),p8=u(dn),id=o(dn,"TD",{});var SR=e(id);kd=o(SR,"CODE",{});var PR=e(kd);c8=c(PR,"8+ bits"),PR.forEach(s),SR.forEach(s),l8=u(dn),Ue=o(dn,"TD",{});var zT=e(Ue);u8=c(zT,"0 "),ze=o(zT,"SPAN",{class:!0});var RR=e(ze);r8=c(RR,"(0)"),RR.forEach(s),zT.forEach(s),i8=u(dn),qe=o(dn,"TD",{});var qT=e(qe);k8=c(qT,"255 "),Is=o(qT,"SPAN",{class:!0});var Am=e(Is);d8=c(Am,"(2"),dd=o(Am,"SUP",{});var LR=e(dd);f8=c(LR,"8"),LR.forEach(s),h8=c(Am,"−1)"),Am.forEach(s),qT.forEach(s),m8=u(dn),fd=o(dn,"TD",{});var IR=e(fd);hd=o(IR,"CODE",{});var BR=e(hd);v8=c(BR,"%hh"),BR.forEach(s),IR.forEach(s),E8=u(dn),y1=o(dn,"TD",{}),e(y1).forEach(s),dn.forEach(s),Pn.forEach(s),ym.forEach(s),w1=u(a),Fe=o(a,"BLOCKQUOTE",{});var xR=e(Fe);md=o(xR,"P",{});var NR=e(md);_8=c(NR,"Chars are just integers linked to an characted by the ascii table."),NR.forEach(s),xR.forEach(s),T1=u(a),Ve=o(a,"P",{});var WR=e(Ve);Qe=o(WR,"EM",{});var FT=e(Qe);b8=c(FT,"informations from "),Qa=o(FT,"A",{href:!0,rel:!0});var HR=e(Qa);y8=c(HR,"https://fr.cppreference.com/w/cpp/language/ascii"),HR.forEach(s),FT.forEach(s),WR.forEach(s),C1=u(a),ja=o(a,"H4",{id:!0});var GR=e(ja);je=o(GR,"A",{href:!0});var MR=e(je);w8=c(MR,"Input Output"),MR.forEach(s),GR.forEach(s),D1=u(a),Ka=o(a,"PRE",{class:!0});var JI=e(Ka);JI.forEach(s),g1=u(a),Ke=o(a,"P",{});var UR=e(Ke);vd=o(UR,"STRONG",{});var zR=e(vd);T8=c(zR,"output"),zR.forEach(s),UR.forEach(s),O1=u(a),Ya=o(a,"PRE",{class:!0});var ZI=e(Ya);ZI.forEach(s),A1=u(a),Ye=o(a,"P",{});var qR=e(Ye);C8=c(qR,"Note:"),qR.forEach(s),S1=u(a),Xe=o(a,"BLOCKQUOTE",{});var FR=e(Xe);Nn=o(FR,"P",{});var Fs=e(Nn);D8=c(Fs,"If you input "),Ed=o(Fs,"CODE",{});var VR=e(Ed);g8=c(VR,"a"),VR.forEach(s),O8=c(Fs," you will have an output of "),_d=o(Fs,"CODE",{});var QR=e(_d);A8=c(QR,"4194432"),QR.forEach(s),S8=c(Fs,`. That’s because
scanf don’t convert the string to an int. When the value is not in
the right format, it will get the `),bd=o(Fs,"CODE",{});var jR=e(bd);P8=c(jR,"memory location"),jR.forEach(s),R8=c(Fs,"."),Fs.forEach(s),FR.forEach(s),P1=u(a),Je=o(a,"BLOCKQUOTE",{});var KR=e(Je);b=o(KR,"P",{});var j=e(b);L8=c(j,"For the boundaries, an input of "),yd=o(j,"CODE",{});var YR=e(yd);I8=c(YR,"2147483647"),YR.forEach(s),B8=c(j," will output "),wd=o(j,"CODE",{});var XR=e(wd);x8=c(XR,"2147483647"),XR.forEach(s),N8=c(j,`,
but if you try to enter a value of `),Td=o(j,"CODE",{});var JR=e(Td);W8=c(JR,"2147483648"),JR.forEach(s),H8=c(j,` you will have an
output of `),Cd=o(j,"CODE",{});var ZR=e(Cd);G8=c(ZR,"-2147483648"),ZR.forEach(s),M8=c(j,`. Thats because the signed value is greater
than `),Ze=o(j,"SPAN",{class:!0});var $I=e(Ze);$I.forEach(s),U8=c(j,". The default int boundaries are "),Dd=o(j,"CODE",{});var $R=e(Dd);z8=c($R,"32bits"),$R.forEach(s),q8=c(j,` on my
`),gd=o(j,"CODE",{});var nL=e(gd);F8=c(nL,"x64 processor"),nL.forEach(s),j.forEach(s),KR.forEach(s),R1=u(a),Xa=o(a,"H4",{id:!0});var sL=e(Xa);$e=o(sL,"A",{href:!0});var aL=e($e);V8=c(aL,"Variables, Tests and Loops"),aL.forEach(s),sL.forEach(s),L1=u(a),np=o(a,"P",{});var tL=e(np);Od=o(tL,"STRONG",{});var oL=e(Od);Q8=c(oL,"VARIABLES DECLARATIONS"),oL.forEach(s),tL.forEach(s),I1=u(a),Ja=o(a,"PRE",{class:!0});var nB=e(Ja);nB.forEach(s),B1=u(a),sp=o(a,"P",{});var eL=e(sp);Ad=o(eL,"STRONG",{});var pL=e(Ad);j8=c(pL,"TESTS"),pL.forEach(s),eL.forEach(s),x1=u(a),Za=o(a,"PRE",{class:!0});var sB=e(Za);sB.forEach(s),N1=u(a),ap=o(a,"P",{});var cL=e(ap);Sd=o(cL,"STRONG",{});var lL=e(Sd);K8=c(lL,"SWITCH"),lL.forEach(s),cL.forEach(s),W1=u(a),$a=o(a,"PRE",{class:!0});var aB=e($a);aB.forEach(s),H1=u(a),tp=o(a,"P",{});var uL=e(tp);Pd=o(uL,"STRONG",{});var rL=e(Pd);Y8=c(rL,"LOOPS"),rL.forEach(s),uL.forEach(s),G1=u(a),nt=o(a,"PRE",{class:!0});var tB=e(nt);tB.forEach(s),M1=u(a),op=o(a,"BLOCKQUOTE",{});var iL=e(op);st=o(iL,"P",{});var Sm=e(st);X8=c(Sm,"You can use "),Rd=o(Sm,"CODE",{});var kL=e(Rd);J8=c(kL,"break;"),kL.forEach(s),Z8=c(Sm," to stop a loop."),Sm.forEach(s),iL.forEach(s),U1=u(a),at=o(a,"H4",{id:!0});var dL=e(at);ep=o(dL,"A",{href:!0});var fL=e(ep);$8=c(fL,"Random numbers"),fL.forEach(s),dL.forEach(s),z1=u(a),pp=o(a,"P",{});var hL=e(pp);Ld=o(hL,"STRONG",{});var mL=e(Ld);n9=c(mL,"RANDOM"),mL.forEach(s),hL.forEach(s),q1=u(a),tt=o(a,"PRE",{class:!0});var oB=e(tt);oB.forEach(s),F1=u(a),cp=o(a,"BLOCKQUOTE",{});var vL=e(cp);ss=o(vL,"P",{});var jp=e(ss);s9=c(jp,"You can see the max of "),Id=o(jp,"CODE",{});var EL=e(Id);a9=c(EL,"rand()"),EL.forEach(s),t9=c(jp," with "),Bd=o(jp,"CODE",{});var _L=e(Bd);o9=c(_L,"RAND_MAX"),_L.forEach(s),e9=c(jp," (32767+). For betters randoms number you can use the BOOST library."),jp.forEach(s),vL.forEach(s),V1=u(a),ot=o(a,"H4",{id:!0});var bL=e(ot);lp=o(bL,"A",{href:!0});var yL=e(lp);p9=c(yL,"Arrays"),yL.forEach(s),bL.forEach(s),Q1=u(a),up=o(a,"P",{});var wL=e(up);xd=o(wL,"STRONG",{});var TL=e(xd);c9=c(TL,"ARRAYS"),TL.forEach(s),wL.forEach(s),j1=u(a),et=o(a,"PRE",{class:!0});var eB=e(et);eB.forEach(s),K1=u(a),rp=o(a,"P",{});var CL=e(rp);Nd=o(CL,"STRONG",{});var DL=e(Nd);l9=c(DL,"STRINGS"),DL.forEach(s),CL.forEach(s),Y1=u(a),pt=o(a,"PRE",{class:!0});var pB=e(pt);pB.forEach(s),X1=u(a),ct=o(a,"PRE",{class:!0});var cB=e(ct);cB.forEach(s),J1=u(a),lt=o(a,"H4",{id:!0});var gL=e(lt);ip=o(gL,"A",{href:!0});var OL=e(ip);u9=c(OL,"Functions"),OL.forEach(s),gL.forEach(s),Z1=u(a),ut=o(a,"PRE",{class:!0});var lB=e(ut);lB.forEach(s),$1=u(a),rt=o(a,"H4",{id:!0});var AL=e(rt);kp=o(AL,"A",{href:!0});var SL=e(kp);r9=c(SL,"Structures"),SL.forEach(s),AL.forEach(s),nh=u(a),dp=o(a,"P",{});var PL=e(dp);Wd=o(PL,"STRONG",{});var RL=e(Wd);i9=c(RL,"RECTANGLE STRUCTURE EXAMPLE"),RL.forEach(s),PL.forEach(s),sh=u(a),it=o(a,"PRE",{class:!0});var uB=e(it);uB.forEach(s),ah=u(a),fp=o(a,"P",{});var LL=e(fp);k9=c(LL,"output"),LL.forEach(s),th=u(a),kt=o(a,"PRE",{class:!0});var rB=e(kt);rB.forEach(s),oh=u(a),hp=o(a,"BLOCKQUOTE",{});var IL=e(hp);Hd=o(IL,"P",{});var BL=e(Hd);d9=c(BL,"Take care of the order in which you declare your structure fields, because it will impact the size of the final data."),BL.forEach(s),IL.forEach(s),eh=u(a),mp=o(a,"P",{});var xL=e(mp);Gd=o(xL,"STRONG",{});var NL=e(Gd);f9=c(NL,"For instance…"),NL.forEach(s),xL.forEach(s),ph=u(a),dt=o(a,"PRE",{class:!0});var iB=e(dt);iB.forEach(s),ch=u(a),ft=o(a,"H4",{id:!0});var WL=e(ft);vp=o(WL,"A",{href:!0});var HL=e(vp);h9=c(HL,"Pointers and Smart pointers"),HL.forEach(s),WL.forEach(s),lh=u(a),ht=o(a,"PRE",{class:!0});var kB=e(ht);kB.forEach(s),uh=u(a),mt=o(a,"H3",{id:!0});var GL=e(mt);Ep=o(GL,"A",{href:!0});var ML=e(Ep);m9=c(ML,"Basic C++ Cheat Sheet"),ML.forEach(s),GL.forEach(s),rh=u(a),vt=o(a,"H4",{id:!0});var UL=e(vt);_p=o(UL,"A",{href:!0});var zL=e(_p);v9=c(zL,"Macros"),zL.forEach(s),UL.forEach(s),ih=u(a),Et=o(a,"PRE",{class:!0});var dB=e(Et);dB.forEach(s),kh=u(a),_t=o(a,"H4",{id:!0});var qL=e(_t);bp=o(qL,"A",{href:!0});var FL=e(bp);E9=c(FL,"Arrays"),FL.forEach(s),qL.forEach(s),dh=u(a),bt=o(a,"PRE",{class:!0});var fB=e(bt);fB.forEach(s),fh=u(a),yt=o(a,"H4",{id:!0});var VL=e(yt);yp=o(VL,"A",{href:!0});var QL=e(yp);_9=c(QL,"Stack & Heap"),QL.forEach(s),VL.forEach(s),hh=u(a),wt=o(a,"PRE",{class:!0});var hB=e(wt);hB.forEach(s),mh=u(a),wp=o(a,"P",{});var jL=e(wp);Md=o(jL,"STRONG",{});var KL=e(Md);b9=c(KL,"c style"),KL.forEach(s),jL.forEach(s),vh=u(a),Tt=o(a,"PRE",{class:!0});var mB=e(Tt);mB.forEach(s),Eh=u(a),Tp=o(a,"P",{});var YL=e(Tp);Ud=o(YL,"STRONG",{});var XL=e(Ud);y9=c(XL,"c++ style"),XL.forEach(s),YL.forEach(s),_h=u(a),Ct=o(a,"PRE",{class:!0});var vB=e(Ct);vB.forEach(s),bh=u(a),Dt=o(a,"H4",{id:!0});var JL=e(Dt);Cp=o(JL,"A",{href:!0});var ZL=e(Cp);w9=c(ZL,"By reference vs By copy"),ZL.forEach(s),JL.forEach(s),yh=u(a),gt=o(a,"PRE",{class:!0});var EB=e(gt);EB.forEach(s),wh=u(a),Ot=o(a,"H4",{id:!0});var $L=e(Ot);Dp=o($L,"A",{href:!0});var nI=e(Dp);T9=c(nI,"Inheritances"),nI.forEach(s),$L.forEach(s),Th=u(a),At=o(a,"PRE",{class:!0});var _B=e(At);_B.forEach(s),Ch=u(a),St=o(a,"H4",{id:!0});var sI=e(St);gp=o(sI,"A",{href:!0});var aI=e(gp);C9=c(aI,"Threads"),aI.forEach(s),sI.forEach(s),Dh=u(a),Pt=o(a,"PRE",{class:!0});var bB=e(Pt);bB.forEach(s),gh=u(a),Rt=o(a,"H2",{id:!0});var tI=e(Rt);Op=o(tI,"A",{href:!0});var oI=e(Op);D9=c(oI,"SFML"),oI.forEach(s),tI.forEach(s),Oh=u(a),Lt=o(a,"PRE",{class:!0});var yB=e(Lt);yB.forEach(s),Ah=u(a),It=o(a,"H2",{id:!0});var eI=e(It);Ap=o(eI,"A",{href:!0});var pI=e(Ap);g9=c(pI,"Qt"),pI.forEach(s),eI.forEach(s),Sh=u(a),Sp=o(a,"BLOCKQUOTE",{});var cI=e(Sp);zd=o(cI,"P",{});var lI=e(zd);O9=c(lI,"TODO"),lI.forEach(s),cI.forEach(s),Ph=u(a),Bt=o(a,"H2",{id:!0});var uI=e(Bt);Pp=o(uI,"A",{href:!0});var rI=e(Pp);A9=c(rI,"CUDA"),rI.forEach(s),uI.forEach(s),Rh=u(a),Rp=o(a,"BLOCKQUOTE",{});var iI=e(Rp);qd=o(iI,"P",{});var kI=e(qd);S9=c(kI,"TODO"),kI.forEach(s),iI.forEach(s),Lh=u(a),xt=o(a,"H2",{id:!0});var dI=e(xt);Lp=o(dI,"A",{href:!0});var fI=e(Lp);P9=c(fI,"CMake and Builds"),fI.forEach(s),dI.forEach(s),Ih=u(a),Ip=o(a,"BLOCKQUOTE",{});var hI=e(Ip);Fd=o(hI,"P",{});var mI=e(Fd);R9=c(mI,"TODO"),mI.forEach(s),hI.forEach(s),this.h()},h(){k(Ht,"href","#introduction"),k(Zn,"id","introduction"),k(Gt,"href","#history-of-the-c-language"),k(Vs,"id","history-of-the-c-language"),k(Mt,"href","#evolution-toward-c"),k(Qs,"id","evolution-toward-c"),k(Ut,"href","#programming-in-c"),k(js,"id","programming-in-c"),k(zt,"href","#first-program--helloworldc"),k(Ks,"id","first-program--helloworldc"),k(Ys,"class","language-cpp"),k(qt,"href","#compiling"),k(Xs,"id","compiling"),k(Js,"href","https://en.wikipedia.org/wiki/List_of_compilers#C_compilers"),k(Js,"rel","nofollow"),k(Zs,"href","https://gcc.gnu.org/"),k(Zs,"rel","nofollow"),k($s,"href","https://visualstudio.microsoft.com/fr/downloads/"),k($s,"rel","nofollow"),k(jt,"href","ftp://ftp.lip6.fr/pub/gcc/releases/gcc-10.1.0/"),k(na,"href","https://www.sublimetext.com/3"),k(na,"rel","nofollow"),k(sa,"href","http://mingw.org/wiki/Getting_Started"),k(sa,"rel","nofollow"),k(Yt,"href","#setup-gcc-and-compiling-a-basic-program"),k(aa,"id","setup-gcc-and-compiling-a-basic-program"),k(no,"href","#compilator-settings-and-flags"),k(la,"id","compilator-settings-and-flags"),k(ua,"href","https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html"),k(ua,"rel","nofollow"),k(ra,"href","https://www.rapidtables.com/code/linux/gcc/gcc-o.html#optimization"),k(ra,"rel","nofollow"),k(Ao,"href","#import-and-use-libraries"),k(ia,"id","import-and-use-libraries"),k(So,"href","#includes-and-dependancies"),k(ka,"id","includes-and-dependancies"),k(ba,"href","https://en.cppreference.com/w/cpp/header"),k(ba,"rel","nofollow"),k(xo,"href","#namespace-and-utilities"),k(ya,"id","namespace-and-utilities"),k(wa,"href","https://en.cppreference.com/w/cpp/language/namespace"),k(wa,"rel","nofollow"),k(Ca,"class","language-cpp"),k(ga,"class","language-cpp"),k(Aa,"class","language-cpp"),k(Go,"href","#cheat-sheets"),k(Sa,"id","cheat-sheets"),k(Mo,"href","#usefull-informations"),k(Pa,"id","usefull-informations"),k(Ra,"href","https://en.cppreference.com/w/"),k(Ra,"rel","nofollow"),k(Ia,"href","http://pypl.github.io/PYPL.html"),k(Ia,"rel","nofollow"),k(Ko,"href","#basic-c-cheat-sheet"),k(Ba,"id","basic-c-cheat-sheet"),k(Yo,"href","#types-and-variables"),k(xa,"id","types-and-variables"),k(E,"class","header"),k(fs,"class","math inline"),k(hs,"class","math inline"),k(ne,"class","math inline"),k(ms,"class","math inline"),k(vs,"class","math inline"),k(Es,"class","math inline"),k(ce,"class","math inline"),k(_s,"class","math inline"),k(bs,"class","math inline"),k(ys,"class","math inline"),k(ke,"class","math inline"),k(ws,"class","math inline"),k(Ts,"class","math inline"),k(Cs,"class","math inline"),k(ve,"class","math inline"),k(Ds,"class","math inline"),k(_,"class","header"),k(Os,"class","math inline"),k(As,"class","math inline"),k(ge,"class","math inline"),k(Ss,"class","math inline"),k(Pe,"class","math inline"),k(Ps,"class","math inline"),k(Be,"class","math inline"),k(Rs,"class","math inline"),k(He,"class","math inline"),k(Ls,"class","math inline"),k(ze,"class","math inline"),k(Is,"class","math inline"),k(Qa,"href","https://fr.cppreference.com/w/cpp/language/ascii"),k(Qa,"rel","nofollow"),k(je,"href","#input-output"),k(ja,"id","input-output"),k(Ka,"class","language-cpp"),k(Ya,"class","language-undefined"),k(Ze,"class","math math-inline"),k($e,"href","#variables-tests-and-loops"),k(Xa,"id","variables-tests-and-loops"),k(Ja,"class","language-cpp"),k(Za,"class","language-c"),k($a,"class","language-c"),k(nt,"class","language-c"),k(ep,"href","#random-numbers"),k(at,"id","random-numbers"),k(tt,"class","language-cpp"),k(lp,"href","#arrays"),k(ot,"id","arrays"),k(et,"class","language-cpp"),k(pt,"class","language-cpp"),k(ct,"class","language-cpp"),k(ip,"href","#functions"),k(lt,"id","functions"),k(ut,"class","language-cpp"),k(kp,"href","#structures"),k(rt,"id","structures"),k(it,"class","language-cpp"),k(kt,"class","language-undefined"),k(dt,"class","language-cpp"),k(vp,"href","#pointers-and-smart-pointers"),k(ft,"id","pointers-and-smart-pointers"),k(ht,"class","language-cpp"),k(Ep,"href","#basic-c-cheat-sheet-1"),k(mt,"id","basic-c-cheat-sheet-1"),k(_p,"href","#macros"),k(vt,"id","macros"),k(Et,"class","language-cpp"),k(bp,"href","#arrays-1"),k(_t,"id","arrays-1"),k(bt,"class","language-cpp"),k(yp,"href","#stack--heap"),k(yt,"id","stack--heap"),k(wt,"class","language-undefined"),k(Tt,"class","language-cpp"),k(Ct,"class","language-cpp"),k(Cp,"href","#by-reference-vs-by-copy"),k(Dt,"id","by-reference-vs-by-copy"),k(gt,"class","language-cpp"),k(Dp,"href","#inheritances"),k(Ot,"id","inheritances"),k(At,"class","language-cpp"),k(gp,"href","#threads"),k(St,"id","threads"),k(Pt,"class","language-cpp"),k(Op,"href","#sfml"),k(Rt,"id","sfml"),k(Lt,"class","language-cpp"),k(Ap,"href","#qt"),k(It,"id","qt"),k(Pp,"href","#cuda"),k(Bt,"id","cuda"),k(Lp,"href","#cmake-and-builds"),k(xt,"id","cmake-and-builds")},m(a,r){i(a,Zn,r),n(Zn,Ht),n(Ht,Pm),i(a,Yd,r),i(a,Vs,r),n(Vs,Gt),n(Gt,Rm),i(a,Xd,r),i(a,hn,r),n(hn,Lm),n(hn,Kp),n(Kp,Im),n(hn,Bm),n(hn,Yp),n(Yp,xm),n(hn,Nm),n(hn,Xp),n(Xp,Wm),n(hn,Hm),i(a,Jd,r),i(a,Wn,r),n(Wn,Gm),n(Wn,Jp),n(Jp,Mm),n(Wn,Um),n(Wn,Zp),n(Zp,zm),n(Wn,qm),i(a,Zd,r),i(a,Hn,r),n(Hn,Fm),n(Hn,$p),n($p,Vm),n(Hn,Qm),n(Hn,nc),n(nc,jm),n(Hn,Km),i(a,$d,r),i(a,Qs,r),n(Qs,Mt),n(Mt,Ym),i(a,nf,r),i(a,mn,r),n(mn,Xm),n(mn,sc),n(sc,Jm),n(mn,Zm),n(mn,ac),n(ac,$m),n(mn,n2),n(mn,tc),n(tc,s2),n(mn,a2),i(a,sf,r),i(a,Gn,r),n(Gn,t2),n(Gn,oc),n(oc,o2),n(Gn,e2),n(Gn,ec),n(ec,p2),n(Gn,c2),i(a,af,r),i(a,js,r),n(js,Ut),n(Ut,l2),i(a,tf,r),i(a,Ks,r),n(Ks,zt),n(zt,u2),i(a,of,r),i(a,Ys,r),Ys.innerHTML=EI,i(a,ef,r),i(a,d,r),n(d,r2),n(d,pc),n(pc,i2),n(d,k2),n(d,cc),n(cc,d2),n(d,f2),n(d,lc),n(lc,h2),n(d,m2),n(d,uc),n(uc,v2),n(d,E2),n(d,rc),n(rc,_2),n(d,b2),n(d,ic),n(ic,y2),n(d,w2),n(d,kc),n(kc,T2),n(d,C2),n(d,dc),n(dc,D2),n(d,g2),n(d,fc),n(fc,O2),n(d,A2),i(a,pf,r),i(a,x,r),n(x,S2),n(x,hc),n(hc,P2),n(x,R2),n(x,mc),n(mc,L2),n(x,I2),n(x,vc),n(vc,B2),n(x,x2),n(x,Ec),n(Ec,N2),n(x,W2),n(x,_c),n(_c,H2),n(x,G2),i(a,cf,r),i(a,Xs,r),n(Xs,qt),n(qt,M2),i(a,lf,r),i(a,vn,r),n(vn,U2),n(vn,bc),n(bc,z2),n(vn,q2),n(vn,yc),n(yc,F2),n(vn,V2),n(vn,wc),n(wc,Q2),n(vn,j2),i(a,uf,r),i(a,os,r),n(os,K2),n(os,Js),n(Js,Y2),n(os,X2),i(a,rf,r),i(a,Ft,r),n(Ft,J2),i(a,kf,r),i(a,es,r),n(es,Vt),n(Vt,Z2),n(Vt,Zs),n(Zs,$2),n(es,nv),n(es,Qt),n(Qt,sv),n(Qt,$s),n($s,av),i(a,df,r),i(a,fn,r),n(fn,tv),n(fn,jt),n(jt,ov),n(fn,ev),n(fn,Tc),n(Tc,pv),n(fn,cv),n(fn,Cc),n(Cc,lv),n(fn,uv),n(fn,na),n(na,rv),i(a,ff,r),i(a,ps,r),n(ps,Dc),n(Dc,iv),n(ps,kv),n(ps,Kt),n(Kt,dv),n(Kt,sa),n(sa,fv),i(a,hf,r),i(a,aa,r),n(aa,Yt),n(Yt,hv),i(a,mf,r),i(a,Mn,r),n(Mn,ta),n(ta,Rn),n(Rn,mv),n(Rn,gc),n(gc,vv),n(Rn,Ev),n(Rn,Oc),n(Oc,_v),n(Rn,bv),n(Rn,Ac),n(Ac,yv),n(Rn,wv),n(ta,Tv),n(ta,Ln),n(Ln,Sc),n(Sc,cs),n(cs,Cv),n(cs,Pc),n(Pc,Dv),n(cs,gv),n(cs,Rc),n(Rc,Ov),n(Ln,Av),n(Ln,Lc),n(Lc,oa),n(oa,Sv),n(oa,Ic),n(Ic,Pv),n(oa,Rv),n(Ln,Lv),n(Ln,ea),n(ea,Bc),n(Bc,Iv),n(ea,Bv),n(ea,In),n(In,xc),n(xc,En),n(En,xv),n(En,Nc),n(Nc,Nv),n(En,Wv),n(En,Wc),n(Wc,Hv),n(En,Gv),n(En,Hc),n(Hc,Mv),n(En,Uv),n(En,Gc),n(Gc,zv),n(In,qv),n(In,Mc),n(Mc,pa),n(pa,Fv),n(pa,Uc),n(Uc,Vv),n(pa,Qv),n(In,jv),n(In,zc),n(zc,ls),n(ls,Kv),n(ls,qc),n(qc,Yv),n(ls,Xv),n(ls,Fc),n(Fc,Jv),n(In,Zv),n(In,Vc),n(Vc,$n),n($n,$v),n($n,Qc),n(Qc,nE),n($n,sE),n($n,jc),n(jc,aE),n($n,tE),n(Ln,oE),n(Ln,Kc),n(Kc,us),n(us,eE),n(us,Yc),n(Yc,pE),n(us,cE),n(us,Xc),n(Xc,lE),n(Mn,uE),n(Mn,ca),n(ca,Xt),n(Xt,rE),n(Xt,Jc),n(Jc,iE),n(ca,kE),n(ca,Bn),n(Bn,Zc),n(Zc,$c),n($c,dE),n(Bn,fE),n(Bn,nl),n(nl,Jt),n(Jt,hE),n(Jt,sl),n(sl,mE),n(Bn,vE),n(Bn,al),n(al,Zt),n(Zt,EE),n(Zt,tl),n(tl,_E),n(Bn,bE),n(Bn,ol),n(ol,$t),n($t,yE),n($t,el),n(el,wE),n(Mn,TE),n(Mn,pl),n(pl,xn),n(xn,CE),n(xn,cl),n(cl,DE),n(xn,gE),n(xn,ll),n(ll,OE),n(xn,AE),n(xn,ul),n(ul,SE),n(xn,PE),i(a,vf,r),i(a,la,r),n(la,no),n(no,RE),i(a,Ef,r),i(a,so,r),n(so,h),n(h,LE),n(h,rl),n(rl,IE),n(h,BE),n(h,il),n(il,xE),n(h,NE),n(h,kl),n(kl,WE),n(h,HE),n(h,dl),n(dl,GE),n(h,ME),n(h,fl),n(fl,UE),n(h,zE),n(h,ua),n(ua,qE),n(h,FE),n(h,hl),n(hl,VE),n(h,QE),i(a,_f,r),i(a,ao,r),n(ao,jE),i(a,bf,r),i(a,to,r),n(to,ml),n(ml,KE),i(a,yf,r),i(a,Un,r),n(Un,YE),n(Un,vl),n(vl,XE),n(Un,JE),n(Un,El),n(El,ZE),n(Un,$E),i(a,wf,r),i(a,oo,r),n(oo,n_),i(a,Tf,r),i(a,eo,r),n(eo,_l),n(_l,s_),i(a,Cf,r),i(a,zn,r),n(zn,rs),n(rs,bl),n(bl,a_),n(rs,t_),n(rs,yl),n(yl,o_),n(rs,e_),n(zn,p_),n(zn,po),n(po,wl),n(wl,c_),n(po,l_),n(zn,u_),n(zn,qn),n(qn,Tl),n(Tl,r_),n(qn,i_),n(qn,Cl),n(Cl,k_),n(qn,d_),n(qn,Dl),n(Dl,f_),n(qn,h_),i(a,Df,r),i(a,co,r),n(co,m_),i(a,gf,r),i(a,Fn,r),n(Fn,v_),n(Fn,gl),n(gl,E_),n(Fn,__),n(Fn,Ol),n(Ol,b_),n(Fn,y_),i(a,Of,r),i(a,K,r),n(K,lo),n(lo,Al),n(Al,w_),n(lo,T_),n(K,C_),n(K,uo),n(uo,Sl),n(Sl,D_),n(uo,g_),n(K,O_),n(K,ro),n(ro,Pl),n(Pl,A_),n(ro,S_),n(K,P_),n(K,io),n(io,Rl),n(Rl,R_),n(io,L_),n(K,I_),n(K,ko),n(ko,Ll),n(Ll,B_),n(ko,x_),i(a,Af,r),i(a,fo,r),n(fo,N_),i(a,Sf,r),i(a,ho,r),n(ho,Il),n(Il,W_),i(a,Pf,r),i(a,mo,r),n(mo,Bl),n(Bl,H_),i(a,Rf,r),i(a,vo,r),n(vo,G_),i(a,Lf,r),i(a,Eo,r),n(Eo,xl),n(xl,M_),i(a,If,r),i(a,_o,r),n(_o,Nl),n(Nl,U_),i(a,Bf,r),i(a,Vn,r),n(Vn,z_),n(Vn,Wl),n(Wl,q_),n(Vn,F_),n(Vn,Hl),n(Hl,V_),n(Vn,Q_),i(a,xf,r),i(a,_n,r),n(_n,bo),n(bo,Gl),n(Gl,j_),n(bo,K_),n(_n,Y_),n(_n,yo),n(yo,Ml),n(Ml,X_),n(yo,J_),n(_n,Z_),n(_n,wo),n(wo,Ul),n(Ul,$_),n(wo,n3),n(_n,s3),n(_n,To),n(To,zl),n(zl,a3),n(To,t3),i(a,Nf,r),i(a,Co,r),n(Co,ns),n(ns,o3),n(ns,ql),n(ql,e3),n(ns,p3),n(ns,Fl),n(Fl,c3),n(ns,l3),i(a,Wf,r),i(a,Do,r),n(Do,u3),i(a,Hf,r),i(a,Qn,r),n(Qn,r3),n(Qn,Vl),n(Vl,i3),n(Qn,k3),n(Qn,Ql),n(Ql,d3),n(Qn,f3),i(a,Gf,r),i(a,is,r),n(is,jl),n(jl,H),n(H,Kl),n(Kl,h3),n(H,m3),n(H,Yl),n(Yl,v3),n(H,E3),n(H,Xl),n(Xl,_3),n(H,b3),n(H,Jl),n(Jl,y3),n(H,w3),n(H,Zl),n(Zl,T3),n(H,C3),n(H,$l),n($l,D3),n(is,g3),n(is,G),n(G,M),n(M,nu),n(nu,su),n(su,O3),n(M,A3),n(M,au),n(au,S3),n(M,P3),n(M,tu),n(tu,R3),n(M,L3),n(M,ou),n(ou,I3),n(M,B3),n(M,eu),n(eu,x3),n(M,N3),n(M,pu),n(pu,W3),n(G,H3),n(G,U),n(U,cu),n(cu,lu),n(lu,G3),n(U,M3),n(U,uu),n(uu,U3),n(U,z3),n(U,ru),n(ru,q3),n(U,F3),n(U,iu),n(iu,V3),n(U,Q3),n(U,ku),n(ku,j3),n(U,K3),n(U,du),n(du,Y3),n(G,X3),n(G,z),n(z,fu),n(fu,hu),n(hu,J3),n(z,Z3),n(z,mu),n(mu,$3),n(z,nb),n(z,vu),n(vu,sb),n(z,ab),n(z,Eu),n(Eu,tb),n(z,ob),n(z,_u),n(_u,eb),n(z,pb),n(z,bu),n(bu,cb),n(G,lb),n(G,q),n(q,yu),n(yu,wu),n(wu,ub),n(q,rb),n(q,Tu),n(Tu,ib),n(q,kb),n(q,Cu),n(Cu,db),n(q,fb),n(q,Du),n(Du,hb),n(q,mb),n(q,gu),n(gu,vb),n(q,Eb),n(q,Ou),n(Ou,_b),n(G,bb),n(G,F),n(F,Au),n(Au,Su),n(Su,yb),n(F,wb),n(F,Pu),n(Pu,Tb),n(F,Cb),n(F,Ru),n(Ru,Db),n(F,gb),n(F,Lu),n(Lu,Ob),n(F,Ab),n(F,Iu),n(Iu,Sb),n(F,Pb),n(F,Bu),n(Bu,Rb),n(G,Lb),n(G,V),n(V,xu),n(xu,Nu),n(Nu,Ib),n(V,Bb),n(V,Wu),n(Wu,xb),n(V,Nb),n(V,Hu),n(Hu,Wb),n(V,Hb),n(V,Gu),n(Gu,Gb),n(V,Mb),n(V,Mu),n(Mu,Ub),n(V,zb),n(V,Uu),n(Uu,qb),i(a,Mf,r),i(a,go,r),n(go,Oo),n(Oo,Fb),n(Oo,ra),n(ra,Vb),i(a,Uf,r),i(a,ia,r),n(ia,Ao),n(Ao,Qb),i(a,zf,r),i(a,ka,r),n(ka,So),n(So,jb),i(a,qf,r),i(a,jn,r),n(jn,Kb),n(jn,zu),n(zu,Yb),n(jn,Xb),n(jn,qu),n(qu,Jb),n(jn,Zb),i(a,Ff,r),i(a,ks,r),n(ks,Po),n(Po,Fu),n(Fu,$b),n(Po,n5),n(ks,s5),n(ks,Ro),n(Ro,Vu),n(Vu,a5),n(Ro,t5),i(a,Vf,r),i(a,Lo,r),n(Lo,o5),i(a,Qf,r),i(a,v,r),n(v,da),n(da,Qu),n(Qu,e5),n(da,p5),n(da,ju),n(ju,c5),n(v,l5),n(v,fa),n(fa,Ku),n(Ku,u5),n(fa,r5),n(fa,Yu),n(Yu,i5),n(v,k5),n(v,ha),n(ha,Xu),n(Xu,d5),n(ha,f5),n(ha,Ju),n(Ju,h5),n(v,m5),n(v,ma),n(ma,Zu),n(Zu,v5),n(ma,E5),n(ma,$u),n($u,_5),n(v,b5),n(v,va),n(va,nr),n(nr,y5),n(va,w5),n(va,sr),n(sr,T5),n(v,C5),n(v,Ea),n(Ea,ar),n(ar,D5),n(Ea,g5),n(Ea,tr),n(tr,O5),n(v,A5),n(v,_a),n(_a,or),n(or,S5),n(_a,P5),n(_a,er),n(er,R5),i(a,jf,r),i(a,Io,r),n(Io,Bo),n(Bo,L5),n(Bo,ba),n(ba,I5),i(a,Kf,r),i(a,ya,r),n(ya,xo),n(xo,B5),i(a,Yf,r),i(a,Kn,r),n(Kn,x5),n(Kn,pr),n(pr,N5),n(Kn,W5),n(Kn,cr),n(cr,H5),n(Kn,G5),i(a,Xf,r),i(a,No,r),n(No,Wo),n(Wo,M5),n(Wo,wa),n(wa,U5),i(a,Jf,r),i(a,Ta,r),n(Ta,z5),n(Ta,lr),n(lr,q5),i(a,Zf,r),i(a,Ca,r),Ca.innerHTML=_I,i(a,$f,r),i(a,Da,r),n(Da,F5),n(Da,ur),n(ur,V5),i(a,n1,r),i(a,ga,r),ga.innerHTML=bI,i(a,s1,r),i(a,Oa,r),n(Oa,Q5),n(Oa,rr),n(rr,j5),i(a,a1,r),i(a,Aa,r),Aa.innerHTML=yI,i(a,t1,r),i(a,Ho,r),n(Ho,Yn),n(Yn,ir),n(ir,K5),n(Yn,Y5),n(Yn,kr),n(kr,X5),n(Yn,J5),n(Yn,dr),n(dr,Z5),n(Yn,$5),i(a,o1,r),i(a,Sa,r),n(Sa,Go),n(Go,n0),i(a,e1,r),i(a,Pa,r),n(Pa,Mo),n(Mo,s0),i(a,p1,r),i(a,Uo,r),n(Uo,zo),n(zo,a0),n(zo,Ra),n(Ra,t0),i(a,c1,r),i(a,qo,r),n(qo,fr),n(fr,o0),i(a,l1,r),i(a,Y,r),n(Y,Fo),n(Fo,hr),n(hr,e0),n(Fo,p0),n(Y,c0),n(Y,Vo),n(Vo,mr),n(mr,l0),n(Vo,u0),n(Y,r0),n(Y,Qo),n(Qo,vr),n(vr,i0),n(Qo,k0),n(Y,d0),n(Y,La),n(La,Er),n(Er,f0),n(La,h0),n(La,Ia),n(Ia,m0),n(Y,v0),n(Y,jo),n(jo,_r),n(_r,E0),n(jo,_0),i(a,u1,r),i(a,Ba,r),n(Ba,Ko),n(Ko,b0),i(a,r1,r),i(a,xa,r),n(xa,Yo),n(Yo,y0),i(a,i1,r),i(a,bn,r),n(bn,br),n(br,w0),n(bn,T0),n(bn,yr),n(yr,C0),n(bn,D0),n(bn,wr),n(wr,g0),n(bn,O0),n(bn,Tr),n(Tr,A0),i(a,k1,r),i(a,Xo,r),n(Xo,Cr),n(Cr,S0),i(a,d1,r),i(a,ds,r),n(ds,Dr),n(Dr,E),n(E,gr),n(gr,P0),n(E,R0),n(E,Or),n(Or,L0),n(E,I0),n(E,Ar),n(Ar,B0),n(E,x0),n(E,Sr),n(Sr,N0),n(E,W0),n(E,Pr),n(Pr,H0),n(E,G0),n(E,Rr),n(Rr,M0),n(E,U0),n(E,Lr),n(Lr,z0),n(ds,q0),n(ds,m),n(m,y),n(y,Na),n(Na,F0),n(Na,Ir),n(Ir,V0),n(Na,Q0),n(y,j0),n(y,Br),n(Br,xr),n(xr,K0),n(y,Y0),n(y,Nr),n(Nr,Wr),n(Wr,X0),n(y,J0),n(y,Jo),n(Jo,Z0),n(Jo,fs),n(fs,$0),n(fs,Hr),n(Hr,n4),n(fs,s4),n(y,a4),n(y,Zo),n(Zo,t4),n(Zo,hs),n(hs,o4),n(hs,Gr),n(Gr,e4),n(hs,p4),n(y,c4),n(y,Mr),n(Mr,Ur),n(Ur,l4),n(y,u4),n(y,Wa),n(Wa,zr),n(zr,r4),n(Wa,i4),n(Wa,qr),n(qr,k4),n(m,d4),n(m,w),n(w,Ha),n(Ha,f4),n(Ha,Fr),n(Fr,h4),n(Ha,m4),n(w,v4),n(w,Vr),n(Vr,Qr),n(Qr,E4),n(w,_4),n(w,jr),n(jr,Kr),n(Kr,b4),n(w,y4),n(w,$o),n($o,w4),n($o,ne),n(ne,T4),n(w,C4),n(w,se),n(se,D4),n(se,ms),n(ms,g4),n(ms,Yr),n(Yr,O4),n(ms,A4),n(w,S4),n(w,Xr),n(Xr,Jr),n(Jr,P4),n(w,R4),n(w,Ga),n(Ga,Zr),n(Zr,L4),n(Ga,I4),n(Ga,$r),n($r,B4),n(m,x4),n(m,T),n(T,ae),n(ae,N4),n(ae,ni),n(ni,W4),n(T,H4),n(T,si),n(si,ai),n(ai,G4),n(T,M4),n(T,ti),n(ti,oi),n(oi,U4),n(T,z4),n(T,te),n(te,q4),n(te,vs),n(vs,F4),n(vs,ei),n(ei,V4),n(vs,Q4),n(T,j4),n(T,oe),n(oe,K4),n(oe,Es),n(Es,Y4),n(Es,pi),n(pi,X4),n(Es,J4),n(T,Z4),n(T,ci),n(ci,li),n(li,$4),n(T,ny),n(T,Ma),n(Ma,ui),n(ui,sy),n(Ma,ay),n(Ma,ri),n(ri,ty),n(m,oy),n(m,C),n(C,ee),n(ee,ey),n(ee,ii),n(ii,py),n(C,cy),n(C,ki),n(ki,di),n(di,ly),n(C,uy),n(C,fi),n(fi,hi),n(hi,ry),n(C,iy),n(C,pe),n(pe,ky),n(pe,ce),n(ce,dy),n(C,fy),n(C,le),n(le,hy),n(le,_s),n(_s,my),n(_s,mi),n(mi,vy),n(_s,Ey),n(C,_y),n(C,vi),n(vi,Ei),n(Ei,by),n(C,yy),n(C,Ua),n(Ua,_i),n(_i,wy),n(Ua,Ty),n(Ua,bi),n(bi,Cy),n(m,Dy),n(m,D),n(D,za),n(za,gy),n(za,yi),n(yi,Oy),n(za,Ay),n(D,Sy),n(D,wi),n(wi,Ti),n(Ti,Py),n(D,Ry),n(D,Ci),n(Ci,Di),n(Di,Ly),n(D,Iy),n(D,ue),n(ue,By),n(ue,bs),n(bs,xy),n(bs,gi),n(gi,Ny),n(bs,Wy),n(D,Hy),n(D,re),n(re,Gy),n(re,ys),n(ys,My),n(ys,Oi),n(Oi,Uy),n(ys,zy),n(D,qy),n(D,Ai),n(Ai,Si),n(Si,Fy),n(D,Vy),n(D,Pi),n(Pi,Ri),n(Ri,Qy),n(m,jy),n(m,g),n(g,qa),n(qa,Ky),n(qa,Li),n(Li,Yy),n(qa,Xy),n(g,Jy),n(g,Ii),n(Ii,Bi),n(Bi,Zy),n(g,$y),n(g,xi),n(xi,Ni),n(Ni,nw),n(g,sw),n(g,ie),n(ie,aw),n(ie,ke),n(ke,tw),n(g,ow),n(g,de),n(de,ew),n(de,ws),n(ws,pw),n(ws,Wi),n(Wi,cw),n(ws,lw),n(g,uw),n(g,Hi),n(Hi,Gi),n(Gi,rw),n(g,iw),n(g,Mi),n(Mi,Ui),n(Ui,kw),n(m,dw),n(m,O),n(O,Fa),n(Fa,fw),n(Fa,zi),n(zi,hw),n(Fa,mw),n(O,vw),n(O,qi),n(qi,Fi),n(Fi,Ew),n(O,_w),n(O,Vi),n(Vi,Qi),n(Qi,bw),n(O,yw),n(O,fe),n(fe,ww),n(fe,Ts),n(Ts,Tw),n(Ts,ji),n(ji,Cw),n(Ts,Dw),n(O,gw),n(O,he),n(he,Ow),n(he,Cs),n(Cs,Aw),n(Cs,Ki),n(Ki,Sw),n(Cs,Pw),n(O,Rw),n(O,Yi),n(Yi,Xi),n(Xi,Lw),n(O,Iw),n(O,Ji),n(Ji,Zi),n(Zi,Bw),n(m,xw),n(m,A),n(A,Va),n(Va,Nw),n(Va,$i),n($i,Ww),n(Va,Hw),n(A,Gw),n(A,nk),n(nk,sk),n(sk,Mw),n(A,Uw),n(A,ak),n(ak,tk),n(tk,zw),n(A,qw),n(A,me),n(me,Fw),n(me,ve),n(ve,Vw),n(A,Qw),n(A,Ee),n(Ee,jw),n(Ee,Ds),n(Ds,Kw),n(Ds,ok),n(ok,Yw),n(Ds,Xw),n(A,Jw),n(A,ek),n(ek,pk),n(pk,Zw),n(A,$w),n(A,ck),n(ck,lk),n(lk,n6),i(a,f1,r),i(a,_e,r),n(_e,uk),n(uk,s6),i(a,h1,r),i(a,be,r),n(be,rk),n(rk,a6),i(a,m1,r),i(a,gs,r),n(gs,ik),n(ik,_),n(_,kk),n(kk,t6),n(_,o6),n(_,dk),n(dk,e6),n(_,p6),n(_,fk),n(fk,c6),n(_,l6),n(_,hk),n(hk,u6),n(_,r6),n(_,mk),n(mk,i6),n(_,k6),n(_,vk),n(vk,d6),n(_,f6),n(_,Ek),n(Ek,h6),n(gs,m6),n(gs,Q),n(Q,S),n(S,ye),n(ye,v6),n(ye,_k),n(_k,E6),n(S,_6),n(S,bk),n(bk,yk),n(yk,b6),n(S,y6),n(S,wk),n(wk,Tk),n(Tk,w6),n(S,T6),n(S,we),n(we,C6),n(we,Os),n(Os,D6),n(Os,Ck),n(Ck,g6),n(Os,O6),n(S,A6),n(S,Te),n(Te,S6),n(Te,As),n(As,P6),n(As,Dk),n(Dk,R6),n(As,L6),n(S,I6),n(S,gk),n(gk,Ok),n(Ok,B6),n(S,x6),n(S,Ak),n(Ak,Sk),n(Sk,N6),n(Q,W6),n(Q,P),n(P,Ce),n(Ce,H6),n(Ce,Pk),n(Pk,G6),n(P,M6),n(P,Rk),n(Rk,Lk),n(Lk,U6),n(P,z6),n(P,Ik),n(Ik,Bk),n(Bk,q6),n(P,F6),n(P,De),n(De,V6),n(De,ge),n(ge,Q6),n(P,j6),n(P,Oe),n(Oe,K6),n(Oe,Ss),n(Ss,Y6),n(Ss,xk),n(xk,X6),n(Ss,J6),n(P,Z6),n(P,Nk),n(Nk,Wk),n(Wk,$6),n(P,n7),n(P,v1),n(Q,s7),n(Q,R),n(R,Ae),n(Ae,a7),n(Ae,Hk),n(Hk,t7),n(R,o7),n(R,Gk),n(Gk,Mk),n(Mk,e7),n(R,p7),n(R,Uk),n(Uk,zk),n(zk,c7),n(R,l7),n(R,Se),n(Se,u7),n(Se,Pe),n(Pe,r7),n(R,i7),n(R,Re),n(Re,k7),n(Re,Ps),n(Ps,d7),n(Ps,qk),n(qk,f7),n(Ps,h7),n(R,m7),n(R,Fk),n(Fk,Vk),n(Vk,v7),n(R,E7),n(R,E1),n(Q,_7),n(Q,L),n(L,Le),n(Le,b7),n(Le,Qk),n(Qk,y7),n(L,w7),n(L,jk),n(jk,Kk),n(Kk,T7),n(L,C7),n(L,Yk),n(Yk,Xk),n(Xk,D7),n(L,g7),n(L,Ie),n(Ie,O7),n(Ie,Be),n(Be,A7),n(L,S7),n(L,xe),n(xe,P7),n(xe,Rs),n(Rs,R7),n(Rs,Jk),n(Jk,L7),n(Rs,I7),n(L,B7),n(L,Zk),n(Zk,$k),n($k,x7),n(L,N7),n(L,_1),n(Q,W7),n(Q,I),n(I,Ne),n(Ne,H7),n(Ne,nd),n(nd,G7),n(I,M7),n(I,sd),n(sd,ad),n(ad,U7),n(I,z7),n(I,td),n(td,od),n(od,q7),n(I,F7),n(I,We),n(We,V7),n(We,He),n(He,Q7),n(I,j7),n(I,Ge),n(Ge,K7),n(Ge,Ls),n(Ls,Y7),n(Ls,ed),n(ed,X7),n(Ls,J7),n(I,Z7),n(I,pd),n(pd,cd),n(cd,$7),n(I,n8),n(I,b1),n(Q,s8),n(Q,B),n(B,Me),n(Me,a8),n(Me,ld),n(ld,t8),n(B,o8),n(B,ud),n(ud,rd),n(rd,e8),n(B,p8),n(B,id),n(id,kd),n(kd,c8),n(B,l8),n(B,Ue),n(Ue,u8),n(Ue,ze),n(ze,r8),n(B,i8),n(B,qe),n(qe,k8),n(qe,Is),n(Is,d8),n(Is,dd),n(dd,f8),n(Is,h8),n(B,m8),n(B,fd),n(fd,hd),n(hd,v8),n(B,E8),n(B,y1),i(a,w1,r),i(a,Fe,r),n(Fe,md),n(md,_8),i(a,T1,r),i(a,Ve,r),n(Ve,Qe),n(Qe,b8),n(Qe,Qa),n(Qa,y8),i(a,C1,r),i(a,ja,r),n(ja,je),n(je,w8),i(a,D1,r),i(a,Ka,r),Ka.innerHTML=wI,i(a,g1,r),i(a,Ke,r),n(Ke,vd),n(vd,T8),i(a,O1,r),i(a,Ya,r),Ya.innerHTML=TI,i(a,A1,r),i(a,Ye,r),n(Ye,C8),i(a,S1,r),i(a,Xe,r),n(Xe,Nn),n(Nn,D8),n(Nn,Ed),n(Ed,g8),n(Nn,O8),n(Nn,_d),n(_d,A8),n(Nn,S8),n(Nn,bd),n(bd,P8),n(Nn,R8),i(a,P1,r),i(a,Je,r),n(Je,b),n(b,L8),n(b,yd),n(yd,I8),n(b,B8),n(b,wd),n(wd,x8),n(b,N8),n(b,Td),n(Td,W8),n(b,H8),n(b,Cd),n(Cd,G8),n(b,M8),n(b,Ze),Ze.innerHTML=CI,n(b,U8),n(b,Dd),n(Dd,z8),n(b,q8),n(b,gd),n(gd,F8),i(a,R1,r),i(a,Xa,r),n(Xa,$e),n($e,V8),i(a,L1,r),i(a,np,r),n(np,Od),n(Od,Q8),i(a,I1,r),i(a,Ja,r),Ja.innerHTML=DI,i(a,B1,r),i(a,sp,r),n(sp,Ad),n(Ad,j8),i(a,x1,r),i(a,Za,r),Za.innerHTML=gI,i(a,N1,r),i(a,ap,r),n(ap,Sd),n(Sd,K8),i(a,W1,r),i(a,$a,r),$a.innerHTML=OI,i(a,H1,r),i(a,tp,r),n(tp,Pd),n(Pd,Y8),i(a,G1,r),i(a,nt,r),nt.innerHTML=AI,i(a,M1,r),i(a,op,r),n(op,st),n(st,X8),n(st,Rd),n(Rd,J8),n(st,Z8),i(a,U1,r),i(a,at,r),n(at,ep),n(ep,$8),i(a,z1,r),i(a,pp,r),n(pp,Ld),n(Ld,n9),i(a,q1,r),i(a,tt,r),tt.innerHTML=SI,i(a,F1,r),i(a,cp,r),n(cp,ss),n(ss,s9),n(ss,Id),n(Id,a9),n(ss,t9),n(ss,Bd),n(Bd,o9),n(ss,e9),i(a,V1,r),i(a,ot,r),n(ot,lp),n(lp,p9),i(a,Q1,r),i(a,up,r),n(up,xd),n(xd,c9),i(a,j1,r),i(a,et,r),et.innerHTML=PI,i(a,K1,r),i(a,rp,r),n(rp,Nd),n(Nd,l9),i(a,Y1,r),i(a,pt,r),pt.innerHTML=RI,i(a,X1,r),i(a,ct,r),ct.innerHTML=LI,i(a,J1,r),i(a,lt,r),n(lt,ip),n(ip,u9),i(a,Z1,r),i(a,ut,r),ut.innerHTML=II,i(a,$1,r),i(a,rt,r),n(rt,kp),n(kp,r9),i(a,nh,r),i(a,dp,r),n(dp,Wd),n(Wd,i9),i(a,sh,r),i(a,it,r),it.innerHTML=BI,i(a,ah,r),i(a,fp,r),n(fp,k9),i(a,th,r),i(a,kt,r),kt.innerHTML=xI,i(a,oh,r),i(a,hp,r),n(hp,Hd),n(Hd,d9),i(a,eh,r),i(a,mp,r),n(mp,Gd),n(Gd,f9),i(a,ph,r),i(a,dt,r),dt.innerHTML=NI,i(a,ch,r),i(a,ft,r),n(ft,vp),n(vp,h9),i(a,lh,r),i(a,ht,r),ht.innerHTML=WI,i(a,uh,r),i(a,mt,r),n(mt,Ep),n(Ep,m9),i(a,rh,r),i(a,vt,r),n(vt,_p),n(_p,v9),i(a,ih,r),i(a,Et,r),Et.innerHTML=HI,i(a,kh,r),i(a,_t,r),n(_t,bp),n(bp,E9),i(a,dh,r),i(a,bt,r),bt.innerHTML=GI,i(a,fh,r),i(a,yt,r),n(yt,yp),n(yp,_9),i(a,hh,r),i(a,wt,r),wt.innerHTML=MI,i(a,mh,r),i(a,wp,r),n(wp,Md),n(Md,b9),i(a,vh,r),i(a,Tt,r),Tt.innerHTML=UI,i(a,Eh,r),i(a,Tp,r),n(Tp,Ud),n(Ud,y9),i(a,_h,r),i(a,Ct,r),Ct.innerHTML=zI,i(a,bh,r),i(a,Dt,r),n(Dt,Cp),n(Cp,w9),i(a,yh,r),i(a,gt,r),gt.innerHTML=qI,i(a,wh,r),i(a,Ot,r),n(Ot,Dp),n(Dp,T9),i(a,Th,r),i(a,At,r),At.innerHTML=FI,i(a,Ch,r),i(a,St,r),n(St,gp),n(gp,C9),i(a,Dh,r),i(a,Pt,r),Pt.innerHTML=VI,i(a,gh,r),i(a,Rt,r),n(Rt,Op),n(Op,D9),i(a,Oh,r),i(a,Lt,r),Lt.innerHTML=QI,i(a,Ah,r),i(a,It,r),n(It,Ap),n(Ap,g9),i(a,Sh,r),i(a,Sp,r),n(Sp,zd),n(zd,O9),i(a,Ph,r),i(a,Bt,r),n(Bt,Pp),n(Pp,A9),i(a,Rh,r),i(a,Rp,r),n(Rp,qd),n(qd,S9),i(a,Lh,r),i(a,xt,r),n(xt,Lp),n(Lp,P9),i(a,Ih,r),i(a,Ip,r),n(Ip,Fd),n(Fd,R9)},p:VT,i:VT,o:VT,d(a){a&&s(Zn),a&&s(Yd),a&&s(Vs),a&&s(Xd),a&&s(hn),a&&s(Jd),a&&s(Wn),a&&s(Zd),a&&s(Hn),a&&s($d),a&&s(Qs),a&&s(nf),a&&s(mn),a&&s(sf),a&&s(Gn),a&&s(af),a&&s(js),a&&s(tf),a&&s(Ks),a&&s(of),a&&s(Ys),a&&s(ef),a&&s(d),a&&s(pf),a&&s(x),a&&s(cf),a&&s(Xs),a&&s(lf),a&&s(vn),a&&s(uf),a&&s(os),a&&s(rf),a&&s(Ft),a&&s(kf),a&&s(es),a&&s(df),a&&s(fn),a&&s(ff),a&&s(ps),a&&s(hf),a&&s(aa),a&&s(mf),a&&s(Mn),a&&s(vf),a&&s(la),a&&s(Ef),a&&s(so),a&&s(_f),a&&s(ao),a&&s(bf),a&&s(to),a&&s(yf),a&&s(Un),a&&s(wf),a&&s(oo),a&&s(Tf),a&&s(eo),a&&s(Cf),a&&s(zn),a&&s(Df),a&&s(co),a&&s(gf),a&&s(Fn),a&&s(Of),a&&s(K),a&&s(Af),a&&s(fo),a&&s(Sf),a&&s(ho),a&&s(Pf),a&&s(mo),a&&s(Rf),a&&s(vo),a&&s(Lf),a&&s(Eo),a&&s(If),a&&s(_o),a&&s(Bf),a&&s(Vn),a&&s(xf),a&&s(_n),a&&s(Nf),a&&s(Co),a&&s(Wf),a&&s(Do),a&&s(Hf),a&&s(Qn),a&&s(Gf),a&&s(is),a&&s(Mf),a&&s(go),a&&s(Uf),a&&s(ia),a&&s(zf),a&&s(ka),a&&s(qf),a&&s(jn),a&&s(Ff),a&&s(ks),a&&s(Vf),a&&s(Lo),a&&s(Qf),a&&s(v),a&&s(jf),a&&s(Io),a&&s(Kf),a&&s(ya),a&&s(Yf),a&&s(Kn),a&&s(Xf),a&&s(No),a&&s(Jf),a&&s(Ta),a&&s(Zf),a&&s(Ca),a&&s($f),a&&s(Da),a&&s(n1),a&&s(ga),a&&s(s1),a&&s(Oa),a&&s(a1),a&&s(Aa),a&&s(t1),a&&s(Ho),a&&s(o1),a&&s(Sa),a&&s(e1),a&&s(Pa),a&&s(p1),a&&s(Uo),a&&s(c1),a&&s(qo),a&&s(l1),a&&s(Y),a&&s(u1),a&&s(Ba),a&&s(r1),a&&s(xa),a&&s(i1),a&&s(bn),a&&s(k1),a&&s(Xo),a&&s(d1),a&&s(ds),a&&s(f1),a&&s(_e),a&&s(h1),a&&s(be),a&&s(m1),a&&s(gs),a&&s(w1),a&&s(Fe),a&&s(T1),a&&s(Ve),a&&s(C1),a&&s(ja),a&&s(D1),a&&s(Ka),a&&s(g1),a&&s(Ke),a&&s(O1),a&&s(Ya),a&&s(A1),a&&s(Ye),a&&s(S1),a&&s(Xe),a&&s(P1),a&&s(Je),a&&s(R1),a&&s(Xa),a&&s(L1),a&&s(np),a&&s(I1),a&&s(Ja),a&&s(B1),a&&s(sp),a&&s(x1),a&&s(Za),a&&s(N1),a&&s(ap),a&&s(W1),a&&s($a),a&&s(H1),a&&s(tp),a&&s(G1),a&&s(nt),a&&s(M1),a&&s(op),a&&s(U1),a&&s(at),a&&s(z1),a&&s(pp),a&&s(q1),a&&s(tt),a&&s(F1),a&&s(cp),a&&s(V1),a&&s(ot),a&&s(Q1),a&&s(up),a&&s(j1),a&&s(et),a&&s(K1),a&&s(rp),a&&s(Y1),a&&s(pt),a&&s(X1),a&&s(ct),a&&s(J1),a&&s(lt),a&&s(Z1),a&&s(ut),a&&s($1),a&&s(rt),a&&s(nh),a&&s(dp),a&&s(sh),a&&s(it),a&&s(ah),a&&s(fp),a&&s(th),a&&s(kt),a&&s(oh),a&&s(hp),a&&s(eh),a&&s(mp),a&&s(ph),a&&s(dt),a&&s(ch),a&&s(ft),a&&s(lh),a&&s(ht),a&&s(uh),a&&s(mt),a&&s(rh),a&&s(vt),a&&s(ih),a&&s(Et),a&&s(kh),a&&s(_t),a&&s(dh),a&&s(bt),a&&s(fh),a&&s(yt),a&&s(hh),a&&s(wt),a&&s(mh),a&&s(wp),a&&s(vh),a&&s(Tt),a&&s(Eh),a&&s(Tp),a&&s(_h),a&&s(Ct),a&&s(bh),a&&s(Dt),a&&s(yh),a&&s(gt),a&&s(wh),a&&s(Ot),a&&s(Th),a&&s(At),a&&s(Ch),a&&s(St),a&&s(Dh),a&&s(Pt),a&&s(gh),a&&s(Rt),a&&s(Oh),a&&s(Lt),a&&s(Ah),a&&s(It),a&&s(Sh),a&&s(Sp),a&&s(Ph),a&&s(Bt),a&&s(Rh),a&&s(Rp),a&&s(Lh),a&&s(xt),a&&s(Ih),a&&s(Ip)}}}const OB={title:"C++",short:"General-purpose programming language, developed as an extension of the C programming language.",topic:"programming-language compiled"};class AB extends wB{constructor(Zn){super(),TB(this,Zn,null,DB,CB,{})}}export{AB as default,OB as metadata};
