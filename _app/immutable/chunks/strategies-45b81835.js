import{S as F,i as I,s as G,k as o,q as T,a as h,l as e,m as c,r as E,h as s,c as y,n as u,b as t,E as w,B as N}from"./index-5039aeb8.js";function J(W){let p,f,_,g,l,L=`<code class="language-js"><span class="token comment">// Say we have a problem where we want to test every combination</span>
<span class="token comment">// for an array of object, with each object that can be in n states.</span>

<span class="token keyword">const</span> <span class="token constant">N</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// The number of elements in our array</span>
<span class="token keyword">const</span> <span class="token constant">S</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// The number of states in an element</span>

<span class="token comment">// We know that we will have S^N possible combinations (the nb of</span>
<span class="token comment">// array we want to generate).</span>
<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">Array</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">N</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token comment">// The best way of doing it (fast, light, clear) is to iterate over </span>
<span class="token comment">// a number of N digits in the base of S. The status of the n-th</span>
<span class="token comment">// object will be reflected in the value of the n-th digit.</span>

<span class="token keyword">const</span> combinations <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> based <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token constant">S</span><span class="token punctuation">)</span>                 <span class="token comment">// convert to base</span>
    <span class="token keyword">const</span> filler <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token constant">N</span> <span class="token operator">-</span> based<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">// prepend with 0 </span>
    <span class="token keyword">return</span> filler <span class="token operator">+</span> based                       <span class="token comment">// assert length</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">// combinations = ['0000000000', '0000000001', '0000000002', '0000000010', '0000000011', ... , '2222222222']</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"combinations ="</span><span class="token punctuation">,</span> combinations<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">prepend</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> ls</span><span class="token punctuation">)</span> <span class="token operator">=></span> ls<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sl</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>e<span class="token punctuation">,</span> <span class="token operator">...</span>sl<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">// prepend = [ [ 1, 2, 3 ], [ 1, 3, 4 ] ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"prepend ="</span><span class="token punctuation">,</span> <span class="token function">prepend</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">lists</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ls</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ls<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

    <span class="token keyword">const</span> <span class="token punctuation">[</span>head<span class="token punctuation">,</span> <span class="token operator">...</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> ls
    <span class="token keyword">const</span> sublist <span class="token operator">=</span> <span class="token function">lists</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span>
    <span class="token keyword">const</span> appended <span class="token operator">=</span> <span class="token function">prepend</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> sublist<span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>sublist<span class="token punctuation">,</span> <span class="token operator">...</span>appended<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// lists = [[], [3], [2], [2, 3], [1], [1, 3], [1, 2], [1, 2, 3]]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"lists ="</span><span class="token punctuation">,</span> <span class="token function">lists</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">inject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> ls</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ls<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">]</span>

    <span class="token keyword">const</span> <span class="token punctuation">[</span>head<span class="token punctuation">,</span> <span class="token operator">...</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> ls
    <span class="token keyword">const</span> current <span class="token operator">=</span> <span class="token punctuation">[</span>e<span class="token punctuation">,</span> <span class="token operator">...</span>ls<span class="token punctuation">]</span>
    <span class="token keyword">const</span> following <span class="token operator">=</span> <span class="token function">prepend</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token function">inject</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> tail<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">[</span>current<span class="token punctuation">,</span> <span class="token operator">...</span>following<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// inject = [ [ 1, 1, 2, 3 ], [ 1, 1, 2, 3 ], [ 1, 2, 1, 3 ], [ 1, 2, 3, 1 ] ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"inject ="</span><span class="token punctuation">,</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">permuts</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ls</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ls<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

    <span class="token keyword">const</span> <span class="token punctuation">[</span>head<span class="token punctuation">,</span> <span class="token operator">...</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> ls

    <span class="token keyword">return</span> <span class="token function">permuts</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sl</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">inject</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> sl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// permuts = [ [1, 2, 3], [2, 1, 3], [2, 3, 1], [1, 3, 2], [3, 1, 2], [3, 2, 1] ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"permuts ="</span><span class="token punctuation">,</span> <span class="token function">permuts</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">arrangements</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ls</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">lists</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> sl</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token operator">...</span>acc<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">permuts</span><span class="token punctuation">(</span>sl<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment">// arrangements = [ [3], [ 2 ], [2, 3], [3, 2], [1], [1, 3], [3, 1], [1, 2], [2, 1], [1, 2, 3], [2, 1, 3], [2, 3, 1], [1, 3, 2], [3, 1, 2], [3, 2, 1] ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"arrangements ="</span><span class="token punctuation">,</span> <span class="token function">arrangements</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">partitions</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ls</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ls<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ls<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span>ls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>ls<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

    <span class="token keyword">const</span> <span class="token punctuation">[</span>head<span class="token punctuation">,</span> <span class="token operator">...</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> ls

    <span class="token keyword">const</span> first <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">,</span> tail<span class="token punctuation">]</span>
    <span class="token keyword">const</span> remain <span class="token operator">=</span> <span class="token function">partitions</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>ls<span class="token punctuation">,</span> rs<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token punctuation">[</span>head<span class="token punctuation">,</span> <span class="token operator">...</span>ls<span class="token punctuation">]</span><span class="token punctuation">,</span> rs<span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>remain<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// partitions = [ [ [ 1 ], [ 2, 3 ] ], [ [ 1, 2 ], [ 3 ] ] ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"partitions ="</span><span class="token punctuation">,</span> <span class="token function">partitions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>`,v,k,d,A,x,i,z=`<code class="language-js"><span class="token comment">// Allow to compute the sum of a continuous range in an array of values</span>
<span class="token comment">// in o(1) instead of o(n). Require a first step at o(n), so usefull if</span>
<span class="token comment">// there is a lot of queries aftewards (and not only one).</span>

<span class="token keyword">const</span> <span class="token constant">N</span> <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span> <span class="token comment">// number of elements</span>
<span class="token keyword">const</span> <span class="token constant">Q</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// number of queries</span>

<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token constant">N</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> queries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token constant">Q</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>
	<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token constant">N</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token constant">N</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// iterative search o(n^2)</span>
<span class="token keyword">const</span> <span class="token function-variable function">iterative</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> queries</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>queries<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> queries<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">const</span> query <span class="token operator">=</span> queries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> query<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> query<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			results<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> results<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// prefixed search, o(n)</span>
<span class="token keyword">const</span> <span class="token function-variable function">prefixsum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> queries</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>queries<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">const</span> summed <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	summed<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> summed<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		summed<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> summed<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> queries<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">const</span> query <span class="token operator">=</span> queries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

		<span class="token keyword">const</span> upper <span class="token operator">=</span> summed<span class="token punctuation">[</span>query<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">const</span> under <span class="token operator">=</span> summed<span class="token punctuation">[</span>query<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">;</span>
		results<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> upper <span class="token operator">-</span> under<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> results<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> iter <span class="token operator">=</span> <span class="token function">iterative</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> queries<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pref <span class="token operator">=</span> <span class="token function">prefixsum</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> queries<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> same <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> iter<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> pref<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=></span> acc <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>same<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code>`,q,r,b,S,j,m,Q=`<code class="language-js"><span class="token comment">// 2-SAT Problem </span>
<span class="token comment">// - wikipedia: https://en.wikipedia.org/wiki/2-satisfiability</span>
<span class="token comment">// - paper: https://www.sciencedirect.com/science/article/abs/pii/0020019079900024?via%3Dihub</span>
<span class="token comment">// - source: https://www.robindar.com/fr/blog/battledev-12-solutions</span>
<span class="token comment">// An array of objects, each of which can take two possible values.</span>

<span class="token comment">// ex: (x1 ∨ x2) ∧ (¬ x1 ∨ x3) ∧ (x2 ∨ x3) ∧ (x4 ∨ ¬ x1), xi ∈ [true, false]</span>
<span class="token comment">// => does a combination of xi allow this formula to be true ?</span>

<span class="token comment">// The 2-SAT formula can be converted to an implication graph</span>
<span class="token comment">// (a ∨ b) &lt;=> (¬a ⇒ b ∧ ¬b ⇒ a)</span>

<span class="token comment">// 1. For each xi, we create a node Vx and V¬x</span>
<span class="token comment">// 2. We then add an edge from a to b for each (a ⇒ b)</span>
<span class="token comment">// 3. If there is a path from a to b, then a ⇒ b</span>
<span class="token comment">// 4. We have to find values for the graph not to contain a (true ⇒ false)</span>

<span class="token comment">// - (xi → ¬xi) and (¬xi → xi) then no solution</span>
<span class="token comment">// - (xi → ¬xi) then xi is false</span>
<span class="token comment">// - (¬xi → xi) then xi is true</span>
<span class="token comment">// - propagate implications: (a → b) and a is true, then b is true</span>

<span class="token comment">// To do this, we can decompose the graph in it's "strongly connected component"</span>
<span class="token comment">// We can do this with the Tarjan algorithm</span>


<span class="token comment">// Nonogram puzzle solver: https://en.wikipedia.org/wiki/Nonogram</span>


<span class="token comment">// - https://en.wikipedia.org/wiki/2-satisfiability</span>
<span class="token comment">// - https://en.wikipedia.org/wiki/Nonogram</span></code>`;return{c(){p=o("h2"),f=o("a"),_=T("Bruteforce"),g=h(),l=o("pre"),v=h(),k=o("h2"),d=o("a"),A=T("Prefixsum"),x=h(),i=o("pre"),q=h(),r=o("h2"),b=o("a"),S=T("2-SAT"),j=h(),m=o("pre"),this.h()},l(n){p=e(n,"H2",{id:!0});var a=c(p);f=e(a,"A",{href:!0});var M=c(f);_=E(M,"Bruteforce"),M.forEach(s),a.forEach(s),g=y(n),l=e(n,"PRE",{class:!0});var V=c(l);V.forEach(s),v=y(n),k=e(n,"H2",{id:!0});var P=c(k);d=e(P,"A",{href:!0});var H=c(d);A=E(H,"Prefixsum"),H.forEach(s),P.forEach(s),x=y(n),i=e(n,"PRE",{class:!0});var C=c(i);C.forEach(s),q=y(n),r=e(n,"H2",{id:!0});var B=c(r);b=e(B,"A",{href:!0});var R=c(b);S=E(R,"2-SAT"),R.forEach(s),B.forEach(s),j=y(n),m=e(n,"PRE",{class:!0});var D=c(m);D.forEach(s),this.h()},h(){u(f,"href","#bruteforce"),u(p,"id","bruteforce"),u(l,"class","language-js"),u(d,"href","#prefixsum"),u(k,"id","prefixsum"),u(i,"class","language-js"),u(b,"href","#2-sat"),u(r,"id","2-sat"),u(m,"class","language-js")},m(n,a){t(n,p,a),w(p,f),w(f,_),t(n,g,a),t(n,l,a),l.innerHTML=L,t(n,v,a),t(n,k,a),w(k,d),w(d,A),t(n,x,a),t(n,i,a),i.innerHTML=z,t(n,q,a),t(n,r,a),w(r,b),w(b,S),t(n,j,a),t(n,m,a),m.innerHTML=Q},p:N,i:N,o:N,d(n){n&&s(p),n&&s(g),n&&s(l),n&&s(v),n&&s(k),n&&s(x),n&&s(i),n&&s(q),n&&s(r),n&&s(j),n&&s(m)}}}const O={title:"Strategies",short:"Bruteforce, Prefixsum and 2-SAT problem",topic:"maths solving-methods"};class U extends F{constructor(p){super(),I(this,p,null,J,G,{})}}export{U as default,O as metadata};
