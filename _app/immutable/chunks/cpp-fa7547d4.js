import{S as NI,i as WI,s as HI,k as t,q as p,a as l,l as o,m as e,r as c,h as s,c as u,n as k,b as i,E as n,B as wT}from"./index-2e2fe841.js";function GI(GL){let Zn,Lt,rm,Wd,Vs,It,im,Hd,hn,km,Hp,dm,fm,Gp,hm,mm,Up,vm,Em,Gd,Wn,_m,Mp,bm,wm,qp,ym,Tm,Ud,Hn,Dm,zp,Cm,Om,Fp,gm,Am,Md,Qs,Bt,Sm,qd,mn,Pm,Vp,Rm,Lm,Qp,Im,Bm,jp,xm,Nm,zd,Gn,Wm,Kp,Hm,Gm,Yp,Um,Mm,Fd,js,xt,qm,Vd,Ks,Nt,zm,Qd,Ys,UL=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,jd,d,Fm,Xp,Vm,Qm,Jp,jm,Km,Zp,Ym,Xm,$p,Jm,Zm,nc,$m,n2,sc,s2,a2,ac,t2,o2,tc,e2,p2,oc,c2,l2,Kd,x,u2,ec,r2,i2,pc,k2,d2,cc,f2,h2,lc,m2,v2,uc,E2,_2,Yd,Xs,Wt,b2,Xd,vn,w2,rc,y2,T2,ic,D2,C2,kc,O2,g2,Jd,os,A2,Js,S2,P2,Zd,Ht,R2,$d,es,Gt,L2,Zs,I2,B2,Ut,x2,$s,N2,nf,fn,W2,Mt,H2,G2,dc,U2,M2,fc,q2,z2,na,F2,sf,ps,hc,V2,Q2,qt,j2,sa,K2,af,aa,zt,Y2,tf,Un,ta,Rn,X2,mc,J2,Z2,vc,$2,nv,Ec,sv,av,tv,Ln,_c,cs,ov,bc,ev,pv,wc,cv,lv,yc,oa,uv,Tc,rv,iv,kv,ea,Dc,dv,fv,In,Cc,En,hv,Oc,mv,vv,gc,Ev,_v,Ac,bv,wv,Sc,yv,Tv,Pc,pa,Dv,Rc,Cv,Ov,gv,Lc,ls,Av,Ic,Sv,Pv,Bc,Rv,Lv,xc,$n,Iv,Nc,Bv,xv,Wc,Nv,Wv,Hv,Hc,us,Gv,Gc,Uv,Mv,Uc,qv,zv,ca,Ft,Fv,Mc,Vv,Qv,Bn,qc,zc,jv,Kv,Fc,Vt,Yv,Vc,Xv,Jv,Qc,Qt,Zv,jc,$v,nE,Kc,jt,sE,Yc,aE,tE,Xc,xn,oE,Jc,eE,pE,Zc,cE,lE,$c,uE,rE,of,la,Kt,iE,ef,Yt,h,kE,nl,dE,fE,sl,hE,mE,al,vE,EE,tl,_E,bE,ol,wE,yE,ua,TE,DE,el,CE,OE,pf,Xt,gE,cf,Jt,pl,AE,lf,Mn,SE,cl,PE,RE,ll,LE,IE,uf,Zt,BE,rf,$t,ul,xE,kf,qn,rs,rl,NE,WE,il,HE,GE,UE,no,kl,ME,qE,zE,zn,dl,FE,VE,fl,QE,jE,hl,KE,YE,df,so,XE,ff,Fn,JE,ml,ZE,$E,vl,n_,s_,hf,K,ao,El,a_,t_,o_,to,_l,e_,p_,c_,oo,bl,l_,u_,r_,eo,wl,i_,k_,d_,po,yl,f_,h_,mf,co,m_,vf,lo,Tl,v_,Ef,uo,Dl,E_,_f,ro,__,bf,io,Cl,b_,wf,ko,Ol,w_,yf,Vn,y_,gl,T_,D_,Al,C_,O_,Tf,_n,fo,Sl,g_,A_,S_,ho,Pl,P_,R_,L_,mo,Rl,I_,B_,x_,vo,Ll,N_,W_,Df,Eo,ns,H_,Il,G_,U_,Bl,M_,q_,Cf,_o,z_,Of,Qn,F_,xl,V_,Q_,Nl,j_,K_,gf,is,Wl,H,Hl,Y_,X_,Gl,J_,Z_,Ul,$_,n3,Ml,s3,a3,ql,t3,o3,zl,e3,p3,G,U,Fl,Vl,c3,l3,Ql,u3,r3,jl,i3,k3,Kl,d3,f3,Yl,h3,m3,Xl,v3,E3,M,Jl,Zl,_3,b3,$l,w3,y3,nu,T3,D3,su,C3,O3,au,g3,A3,tu,S3,P3,q,ou,eu,R3,L3,pu,I3,B3,cu,x3,N3,lu,W3,H3,uu,G3,U3,ru,M3,q3,z,iu,ku,z3,F3,du,V3,Q3,fu,j3,K3,hu,Y3,X3,mu,J3,Z3,vu,$3,nb,F,Eu,_u,sb,ab,bu,tb,ob,wu,eb,pb,yu,cb,lb,Tu,ub,rb,Du,ib,kb,V,Cu,Ou,db,fb,gu,hb,mb,Au,vb,Eb,Su,_b,bb,Pu,wb,yb,Ru,Tb,Af,bo,wo,Db,ra,Cb,Sf,ia,yo,Ob,Pf,ka,To,gb,Rf,jn,Ab,Lu,Sb,Pb,Iu,Rb,Lb,Lf,ks,Do,Bu,Ib,Bb,xb,Co,xu,Nb,Wb,If,Oo,Hb,Bf,v,da,Nu,Gb,Ub,Wu,Mb,qb,fa,Hu,zb,Fb,Gu,Vb,Qb,ha,Uu,jb,Kb,Mu,Yb,Xb,ma,qu,Jb,Zb,zu,$b,n0,va,Fu,s0,a0,Vu,t0,o0,Ea,Qu,e0,p0,ju,c0,l0,_a,Ku,u0,r0,Yu,i0,xf,go,Ao,k0,ba,d0,Nf,wa,So,f0,Wf,Kn,h0,Xu,m0,v0,Ju,E0,_0,Hf,Po,Ro,b0,ya,w0,Gf,Ta,y0,Zu,T0,Uf,Da,ML='<code class="language-cpp">sf<span class="token double-colon punctuation">::</span>RectangleShape <span class="token function">rectangle</span><span class="token punctuation">(</span>sf<span class="token double-colon punctuation">::</span><span class="token function">Vector2f</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',Mf,Ca,D0,$u,C0,qf,Oa,qL=`<code class="language-cpp"><span class="token keyword">namespace</span> sf <span class="token punctuation">&#123;</span>
  RectangleShape <span class="token function">rectangle</span><span class="token punctuation">(</span><span class="token function">Vector2f</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,zf,ga,O0,nr,g0,Ff,Aa,zL=`<code class="language-cpp"><span class="token keyword">using</span> <span class="token keyword">namespace</span> sf<span class="token punctuation">;</span>

RectangleShape <span class="token function">rectangle</span><span class="token punctuation">(</span><span class="token function">Vector2f</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Vf,Lo,Yn,sr,A0,S0,ar,P0,R0,tr,L0,I0,Qf,Sa,Io,B0,jf,Pa,Bo,x0,Kf,xo,No,N0,Ra,W0,Yf,Wo,or,H0,Xf,Y,Ho,er,G0,U0,M0,Go,pr,q0,z0,F0,Uo,cr,V0,Q0,j0,La,lr,K0,Y0,Ia,X0,J0,Mo,ur,Z0,$0,Jf,Ba,qo,n5,Zf,xa,zo,s5,$f,bn,rr,a5,t5,ir,o5,e5,kr,p5,c5,dr,l5,n1,Fo,fr,u5,s1,ds,hr,E,mr,r5,i5,vr,k5,d5,Er,f5,h5,_r,m5,v5,br,E5,_5,wr,b5,w5,yr,y5,T5,m,w,Na,D5,Tr,C5,O5,g5,Dr,Cr,A5,S5,Or,gr,P5,R5,Vo,L5,fs,I5,Ar,B5,x5,N5,Qo,W5,hs,H5,Sr,G5,U5,M5,Pr,Rr,q5,z5,Wa,Lr,F5,V5,Ir,Q5,j5,y,Ha,K5,Br,Y5,X5,J5,xr,Nr,Z5,$5,Wr,Hr,n4,s4,jo,a4,Ko,t4,o4,Yo,e4,ms,p4,Gr,c4,l4,u4,Ur,Mr,r4,i4,Ga,qr,k4,d4,zr,f4,h4,T,Xo,m4,Fr,v4,E4,Vr,Qr,_4,b4,jr,Kr,w4,y4,Jo,T4,vs,D4,Yr,C4,O4,g4,Zo,A4,Es,S4,Xr,P4,R4,L4,Jr,Zr,I4,B4,Ua,$r,x4,N4,ni,W4,H4,D,$o,G4,si,U4,M4,ai,ti,q4,z4,oi,ei,F4,V4,ne,Q4,se,j4,K4,ae,Y4,_s,X4,pi,J4,Z4,$4,ci,li,nw,sw,Ma,ui,aw,tw,ri,ow,ew,C,qa,pw,ii,cw,lw,uw,ki,di,rw,iw,fi,hi,kw,dw,te,fw,bs,hw,mi,mw,vw,Ew,oe,_w,ws,bw,vi,ww,yw,Tw,Ei,_i,Dw,Cw,bi,wi,Ow,gw,O,za,Aw,yi,Sw,Pw,Rw,Ti,Di,Lw,Iw,Ci,Oi,Bw,xw,ee,Nw,pe,Ww,Hw,ce,Gw,ys,Uw,gi,Mw,qw,zw,Ai,Si,Fw,Vw,Pi,Ri,Qw,jw,g,Fa,Kw,Li,Yw,Xw,Jw,Ii,Bi,Zw,$w,xi,Ni,ny,sy,le,ay,Ts,ty,Wi,oy,ey,py,ue,cy,Ds,ly,Hi,uy,ry,iy,Gi,Ui,ky,dy,Mi,qi,fy,hy,A,Va,my,zi,vy,Ey,_y,Fi,Vi,by,wy,Qi,ji,yy,Ty,re,Dy,ie,Cy,Oy,ke,gy,Cs,Ay,Ki,Sy,Py,Ry,Yi,Xi,Ly,Iy,Ji,Zi,By,a1,de,$i,xy,t1,fe,nk,Ny,o1,Os,sk,_,ak,Wy,Hy,tk,Gy,Uy,ok,My,qy,ek,zy,Fy,pk,Vy,Qy,ck,jy,Ky,lk,Yy,Xy,Q,S,he,Jy,uk,Zy,$y,rk,ik,n6,s6,kk,dk,a6,t6,me,o6,gs,e6,fk,p6,c6,l6,ve,u6,As,r6,hk,i6,k6,d6,mk,vk,f6,h6,Ek,_k,m6,v6,P,Ee,E6,bk,_6,b6,wk,yk,w6,y6,Tk,Dk,T6,D6,_e,C6,be,O6,g6,we,A6,Ss,S6,Ck,P6,R6,L6,Ok,gk,I6,B6,e1,x6,R,ye,N6,Ak,W6,H6,Sk,Pk,G6,U6,Rk,Lk,M6,q6,Te,z6,De,F6,V6,Ce,Q6,Ps,j6,Ik,K6,Y6,X6,Bk,xk,J6,Z6,p1,$6,L,Oe,n7,Nk,s7,a7,Wk,Hk,t7,o7,Gk,Uk,e7,p7,ge,c7,Ae,l7,u7,Se,r7,Rs,i7,Mk,k7,d7,f7,qk,zk,h7,m7,c1,v7,I,Pe,E7,Fk,_7,b7,Vk,Qk,w7,y7,jk,Kk,T7,D7,Re,C7,Le,O7,g7,Ie,A7,Ls,S7,Yk,P7,R7,L7,Xk,Jk,I7,B7,l1,x7,B,Be,N7,Zk,W7,H7,$k,nd,G7,U7,sd,ad,M7,q7,xe,z7,Ne,F7,V7,We,Q7,Is,j7,td,K7,Y7,X7,od,ed,J7,Z7,u1,r1,He,pd,$7,i1,Ge,Ue,n8,Qa,s8,k1,ja,Me,a8,d1,Ka,FL=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

	<span class="token comment">// We define the age variable as an Integer</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span> 

	<span class="token comment">// We use printf to output a line of text from a string</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter an integer for your age: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	
	<span class="token comment">// Scanf convert the input variable and put it in age by reference. </span>
	<span class="token comment">// It will not stop until scanf detect a non null "string" input.</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%i"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> 

	<span class="token comment">// Then we use printf to output the string with the variable.</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You are %i years old.&#92;nGreat!"</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// fflush clean the output buffer, it discards any buffered data that has been fetched from </span>
	<span class="token comment">// the underlying output file, but has not been consumed by the application. Thanks to that</span>
	<span class="token comment">// we are sure to have a clean output the next time we call the function printf.</span>
	<span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,f1,qe,cd,t8,h1,Ya,VL=`<code class="language-undefined">Enter an integer for your age: 19
You are 19 years old.
Great!</code>`,m1,ze,o8,v1,Fe,Nn,e8,ld,p8,c8,ud,l8,u8,rd,r8,i8,E1,Ve,b,k8,id,d8,f8,kd,h8,m8,dd,v8,E8,fd,_8,b8,Qe,QL='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{31}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>',w8,hd,y8,T8,md,D8,_1,Xa,je,C8,b1,Ke,vd,O8,w1,Ja,jL=`<code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

	<span class="token comment">// Variable declaration and Operators</span>
	<span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

	value <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 10+5 = 15</span>
	value <span class="token operator">-=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 15-3 = 12</span>
	value <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 12*2 = 24</span>
	value <span class="token operator">/=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 24/4 = 6</span>

	value<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 6+1 = 7</span>
	<span class="token operator">++</span>value<span class="token punctuation">;</span> <span class="token comment">// 7+1 = 8</span>

	value<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 8-1 = 7</span>
	<span class="token operator">--</span>value<span class="token punctuation">;</span> <span class="token comment">// 7-1 = 6</span>

	<span class="token comment">// Binary Operators</span>
	<span class="token keyword">int</span> binA <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">,</span> binB <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>

	binA <span class="token operator">&amp;</span> binB <span class="token comment">// 60 AND 6 = 4</span>
	<span class="token comment">// 0011 1100 (60)</span>
	<span class="token comment">// 0000 0110 (6)</span>
	<span class="token comment">// ---------------</span>
	<span class="token comment">// 0000 0100 (4)</span>
	
	binA <span class="token operator">|</span> binB <span class="token comment">// 60 OR 6 = 62</span>
	<span class="token comment">// 0011 1100 (60)</span>
	<span class="token comment">// 0000 0110 (6)</span>
	<span class="token comment">// ---------------</span>
	<span class="token comment">// 0011 1110 (62)</span>

	binA <span class="token operator">^</span> binB <span class="token comment">// 60 XOR 6 = 58</span>
	<span class="token comment">// 0011 1100 (60)</span>
	<span class="token comment">// 0000 0110 (6)</span>
	<span class="token comment">// ---------------</span>
	<span class="token comment">// 0011 1010 (58)</span>

	<span class="token operator">~</span>binB <span class="token comment">// NOT 6 = -9</span>
	<span class="token comment">// (0) 0110 (6)</span>
	<span class="token comment">// ---------------</span>
	<span class="token comment">// (1) 1001 (-9)</span>
	
	binB <span class="token operator">&lt;&lt;=</span> <span class="token number">3</span> <span class="token comment">// 6 LEFT-SHIFTED BY 3 = 48</span>
	<span class="token comment">// 0000 0110 (6)</span>
	<span class="token comment">// ---------------</span>
	<span class="token comment">// 0011 0000 (48)</span>

	binA <span class="token operator">=</span> binA <span class="token operator">>></span> <span class="token number">2</span> <span class="token comment">// 60 RIGHT-SHIFTED BY 2 = 15</span>
	<span class="token comment">// 0011 1100 (60)</span>
	<span class="token comment">// ---------------</span>
	<span class="token comment">// 0000 1111 (15)</span>

	<span class="token comment">// Tests</span>
	<span class="token keyword">bool</span> A <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// A=true=1</span>
	<span class="token keyword">bool</span> B <span class="token operator">=</span> <span class="token operator">!</span>A<span class="token punctuation">;</span> <span class="token comment">// B=false=0</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* (IS) TRUE */</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>A<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* (IS NOT) FALSE */</span> <span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">&amp;&amp;</span> B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* (AND) FALSE */</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">||</span> B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* (OR) TRUE */</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>A <span class="token operator">!=</span> <span class="token operator">!</span>B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* (XOR) TRUE */</span> <span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* (EQUAL) TRUE */</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token operator">!=</span><span class="token number">42</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* (NOT EQUAL) TRUE */</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* (GREATER THAN) FALSE */</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* (GREATER OR EQUAL) TRUE*/</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* (LOWER THAN) FALSE*/</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token operator">&lt;=</span>B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* (LOWER OR EQUAL) FALSE*/</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,y1,Ye,Ed,g8,T1,Za,KL=`<code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>Condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span>Condition<span class="token punctuation">)</span>
  <span class="token comment">// Action</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>Condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Action</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Action</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Action</span>
<span class="token punctuation">&#125;</span>
</code>`,D1,Xe,_d,A8,C1,$a,YL=`<code class="language-c"><span class="token keyword">switch</span> <span class="token punctuation">(</span>variable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token comment">// Action</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token comment">// Action</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token keyword">default</span><span class="token operator">:</span> <span class="token comment">// Action</span>
<span class="token punctuation">&#125;</span></code>`,O1,Je,bd,S8,g1,nt,XL=`<code class="language-c">
<span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Action</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>conditions<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>conditions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Action</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// Action</span>
<span class="token punctuation">&#125;</span></code>`,A1,Ze,st,P8,wd,R8,L8,S1,at,$e,I8,P1,np,yd,B8,R1,tt,JL=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span> 	<span class="token comment">// NULL</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span> <span class="token comment">//srand, rand</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span> 	<span class="token comment">// time</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span>	<span class="token comment">// pow</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	
	<span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// Rand integer from 0 to 99</span>

	<span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Initialise the random generator with the internal clock as a Seed</span>
	<span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// This one is a more random number (current seed is quite special)</span>

	<span class="token function">srand</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The random generator's seed is 1 by default, go put it back to see</span>
	<span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// This next random number should be the SAME as the first one</span>
	
	<span class="token comment">// To have a delimited random number, you can use this:</span>
	<span class="token keyword">int</span> max<span class="token operator">=</span><span class="token number">112</span><span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">75</span><span class="token punctuation">;</span>
	<span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> random <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>min<span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%i "</span><span class="token punctuation">,</span> random<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (ex: 110 109 98 89 105 94 79 103 93 101)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,L1,sp,ss,x8,Td,N8,W8,Dd,H8,G8,I1,ot,ap,U8,B1,tp,Cd,M8,x1,et,ZL=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">// We declare an array of 4 integers </span>
	<span class="token keyword">int</span> numbers<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">// You can also declare arrays like that, the array will have the size of the elements you define</span>
	<span class="token keyword">float</span> prime<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">// You can compute it's size like that</span>
	<span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20 / 4 = 5</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%i "</span><span class="token punctuation">,</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//display: 0 1 2 4 8</span>
	<span class="token punctuation">&#125;</span>

	numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// &#123;20, 1, 2, 4, 8&#125;</span>
	numbers<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// &#123;20, 1, 2, 10, 8&#125;</span>

	<span class="token comment">// But the solution with the size calculation is not optimal: it can be a problem when </span>
	<span class="token comment">// the array is not declared on the stack but on the heat, a better solution can be :</span>
	
	<span class="token keyword">const</span> <span class="token keyword">int</span> better_length <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> better_numbers<span class="token punctuation">[</span>better_length<span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>better_length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		better_numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,N1,op,Od,q8,W1,pt,$L=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">// The end delimiter of an array of chars is always '\0'</span>
	<span class="token keyword">char</span> word<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'G'</span><span class="token punctuation">,</span><span class="token char">'u'</span><span class="token punctuation">,</span><span class="token char">'i'</span><span class="token punctuation">,</span><span class="token char">'t'</span><span class="token punctuation">,</span><span class="token char">'a'</span><span class="token punctuation">,</span><span class="token char">'r'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token comment">// We can define multi-dimentionnal arrays like that</span>
	<span class="token keyword">char</span> week<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token function">strcpy</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Lundi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Mardi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Mercredi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Jeudi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Vendredi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Samedi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Dimanche"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">strlen</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The length of word is 6</span>

	<span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>week<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> week<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

		<span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token comment">// week[0] == week[1]</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span> <span class="token comment">// week[0] &lt; week[1]</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token comment">// week[0] > week[1]</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
	</code>`,H1,ct,nI=`<code class="language-cpp">string entry<span class="token punctuation">;</span>
<span class="token keyword">int</span> test<span class="token punctuation">;</span>

<span class="token keyword">do</span> <span class="token punctuation">&#123;</span> 
  <span class="token comment">// Test if the input string is composed of chars bewteen 'a' and 'z'</span>
  test <span class="token operator">=</span> <span class="token function">scanf</span><span class="token punctuation">(</span>"<span class="token operator">%</span><span class="token number">1</span><span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span>c"<span class="token punctuation">,</span> <span class="token operator">&amp;</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>test <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span></code>`,G1,lt,ep,z8,U1,ut,sI=`<code class="language-cpp"><span class="token keyword">int</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">int</span> min<span class="token punctuation">,</span> <span class="token keyword">int</span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">nothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">// return nothing ...</span>
<span class="token punctuation">&#125;</span></code>`,M1,rt,pp,F8,q1,cp,gd,V8,z1,it,aI=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">// We define the Rectangle structure. </span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>

	<span class="token comment">// It contains some of it's Properties like the position (x,y) and the size (height, width)</span>
	<span class="token keyword">float</span> x<span class="token punctuation">;</span>
	<span class="token keyword">float</span> y<span class="token punctuation">;</span>
	<span class="token keyword">float</span> height<span class="token punctuation">;</span>
	<span class="token keyword">float</span> width<span class="token punctuation">;</span>

	<span class="token comment">// Structs are not like Classes, wecannot create functions inside it.</span>

<span class="token punctuation">&#125;</span> Rectangle<span class="token punctuation">;</span>

<span class="token comment">// We create a function to calculate the area of a Rectangle</span>
<span class="token keyword">float</span> <span class="token function">calcArea</span><span class="token punctuation">(</span>Rectangle r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> r<span class="token punctuation">.</span>height <span class="token operator">*</span> r<span class="token punctuation">.</span>width<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// We alse create a function to print the properties of the struct, it call the precedent function to compute the area</span>
<span class="token keyword">void</span> <span class="token function">toString</span><span class="token punctuation">(</span>Rectangle r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"structure: Rectangle&#92;n + Position: [%f, %f]&#92;n + Size: [%f, %f]&#92;n + Area: %f"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>x<span class="token punctuation">,</span> r<span class="token punctuation">.</span>y<span class="token punctuation">,</span> r<span class="token punctuation">.</span>height<span class="token punctuation">,</span> r<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token function">calcArea</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

	<span class="token comment">// We instantiate a Rectangle with the name rectangle</span>
	Rectangle rectangle<span class="token punctuation">;</span>

	<span class="token comment">// We edit it's properties</span>
	rectangle<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">10.0</span><span class="token punctuation">;</span>
	rectangle<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span>
	rectangle<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">3.7</span><span class="token punctuation">;</span>
	rectangle<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">6.5</span><span class="token punctuation">;</span>

	<span class="token comment">// We call the toString function to see if the properties have changed</span>
	<span class="token function">toString</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,F1,lp,Q8,V1,kt,tI=`<code class="language-undefined">   	structure: Rectangle
    + Position: [10.000000, 2.000000]
    + Size: [3.700000, 6.500000]
    + Area: 24.050000</code>`,Q1,up,Ad,j8,j1,rp,Sd,K8,K1,dt,oI=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>

<span class="token comment">// small first</span>
<span class="token keyword">struct</span> <span class="token class-name">large</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">uint8_t</span> a<span class="token punctuation">;</span>
  <span class="token keyword">uint32_t</span> b<span class="token punctuation">;</span>
  <span class="token keyword">uint8_t</span> c<span class="token punctuation">;</span>
  <span class="token keyword">uint32_t</span> d<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// small last</span>
<span class="token keyword">struct</span> <span class="token class-name">small</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">uint32_t</span> a<span class="token punctuation">;</span>
  <span class="token keyword">uint32_t</span> b<span class="token punctuation">;</span>
  <span class="token keyword">uint8_t</span> c<span class="token punctuation">;</span>
  <span class="token keyword">uint8_t</span> d<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// packed</span>
<span class="token keyword">struct</span> <span class="token class-name">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">)</span> packed
<span class="token punctuation">&#123;</span>
  <span class="token keyword">uint32_t</span> a<span class="token punctuation">;</span>
  <span class="token keyword">uint32_t</span> b<span class="token punctuation">;</span>
  <span class="token keyword">uint8_t</span> c<span class="token punctuation">;</span>
  <span class="token keyword">uint8_t</span> d<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">uint8_t</span> sz_plain <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">uint8_t</span> sz_large <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>large<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">uint8_t</span> sz_small <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>small<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">uint8_t</span> sz_packed <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"plain  = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>sz_plain<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"large  = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>sz_large<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"small  = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>sz_small<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"packed = "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>sz_packed<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

  <span class="token comment">// plain  = 10</span>
  <span class="token comment">// large  = 16</span>
  <span class="token comment">// small  = 12</span>
  <span class="token comment">// packed = 10</span>
<span class="token punctuation">&#125;</span></code>`,Y1,ft,ip,Y8,X1,ht,eI='<code class="language-cpp">TODO</code>',J1,mt,kp,X8,Z1,vt,dp,J8,$1,Et,pI=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">NUMARGS</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> __VA_ARGS__ <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FIRSTARG</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token function">FIRSTARG0</span><span class="token punctuation">(</span>__VA_ARGS__<span class="token punctuation">,</span> ERROR_NO_ARGS_PROVIDED<span class="token punctuation">)</span> </span><span class="token comment">// assign an undeclared var to trigger the compiler error </span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FIRSTARG0</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> X </span><span class="token comment">// to avoid "warning: ISO C99 requires rest arguments to be used [enabled by default]" when 1 arg</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%i&#92;n"</span><span class="token punctuation">,</span> <span class="token function">NUMARGS</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%i&#92;n"</span><span class="token punctuation">,</span> <span class="token function">FIRSTARG</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%i&#92;n"</span><span class="token punctuation">,</span> <span class="token function">FIRSTARG</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,nh,_t,fp,Z8,sh,bt,cI=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>

<span class="token comment">// We are not editing the values so we add const</span>
<span class="token keyword">void</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> values<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">// We initialize an array of 5 int </span>
	std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">></span> numbers<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numbers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>


	<span class="token comment">// TODO Vector type and arrays of pointers, redifine </span>
	std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> values<span class="token punctuation">;</span>
	values<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>values<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// Or even</span>
	
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> values<span class="token operator">&amp;</span> v <span class="token operator">:</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> v <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	values<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>values<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Erase the third element, we cannot just pas the position</span>
	values<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Set back size to 0</span>

	<span class="token comment">// We pass the values by Reference to avoid copies</span>
	<span class="token function">Function</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// HEAT vs STACK, copying and optimisation...</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ah,wt,hp,$8,th,yt,lI=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;chrono></span></span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">using</span> spt <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span>
<span class="token keyword">using</span> vec <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Base</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">perf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" - A derived class"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">perf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> value<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">specA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> value<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" - B derived class"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">perf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> value<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">specB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> value<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Container</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Container</span><span class="token punctuation">(</span>spt<span class="token operator">&lt;</span>Base<span class="token operator">></span> d<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">data</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">void</span> <span class="token function">perf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> value<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    spt<span class="token operator">&lt;</span>Base<span class="token operator">></span> data<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    vec<span class="token operator">&lt;</span>spt<span class="token operator">&lt;</span>Base<span class="token operator">>></span> vec <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    A tmp_A <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    B tmp_B <span class="token operator">=</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"&#92;nTest objects print"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    tmp_A<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tmp_B<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"&#92;nTest pointer print"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    Base <span class="token operator">*</span>ptr_A <span class="token operator">=</span> <span class="token operator">&amp;</span>tmp_A<span class="token punctuation">;</span>
    Base <span class="token operator">*</span>ptr_B <span class="token operator">=</span> <span class="token operator">&amp;</span>tmp_B<span class="token punctuation">;</span>
    ptr_A<span class="token operator">-></span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ptr_B<span class="token operator">-></span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"&#92;nTest smart print"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    spt<span class="token operator">&lt;</span>Base<span class="token operator">></span> sptr_A <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>A<span class="token operator">></span></span></span><span class="token punctuation">(</span>tmp_A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    spt<span class="token operator">&lt;</span>Base<span class="token operator">></span> sptr_B <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>B<span class="token operator">></span></span></span><span class="token punctuation">(</span>tmp_B<span class="token punctuation">)</span><span class="token punctuation">;</span>

    sptr_A<span class="token operator">-></span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sptr_B<span class="token operator">-></span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"&#92;nTest array print"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>sptr_A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>sptr_B<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ptr <span class="token operator">:</span> vec<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        ptr<span class="token operator">-></span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">*</span>uncast_A <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ptr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            uncast_A<span class="token operator">-></span><span class="token function">specA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>B <span class="token operator">*</span>uncast_B <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ptr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            uncast_B<span class="token operator">-></span><span class="token function">specB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">perf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    vec<span class="token operator">&lt;</span>A<span class="token operator">></span> vec_A <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    vec<span class="token operator">&lt;</span>B<span class="token operator">></span> vec_B <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    vec<span class="token operator">&lt;</span>spt<span class="token operator">&lt;</span>A<span class="token operator">>></span> vec_sptA <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    vec<span class="token operator">&lt;</span>spt<span class="token operator">&lt;</span>B<span class="token operator">>></span> vec_sptB <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    vec<span class="token operator">&lt;</span>spt<span class="token operator">&lt;</span>Base<span class="token operator">>></span> vec_sptBase <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    vec<span class="token operator">&lt;</span>Container<span class="token operator">></span> vec_container <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        vec_A<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vec_B<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        vec_sptA<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>A<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vec_sptB<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>B<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        vec_sptBase<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>A<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vec_sptBase<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>B<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        vec_container<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">Container</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>A<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vec_container<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">Container</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>B<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"&#92;nVectors size"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" - vecA + vec_B: &#92;t&#92;t"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>vec_A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> vec_B<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" - vec_sptA + vec_sptB:  &#92;t"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>vec_sptA<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> vec_sptB<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" - vec_sptBase:  &#92;t&#92;t"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>vec_sptBase<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" - vec_container:  &#92;t&#92;t"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>vec_container<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"&#92;nDurations"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">auto</span> start <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> obj <span class="token operator">:</span> vec_A<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            obj<span class="token punctuation">.</span><span class="token function">perf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> obj <span class="token operator">:</span> vec_B<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            obj<span class="token punctuation">.</span><span class="token function">perf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">auto</span> end <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">auto</span> diff <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>microseconds<span class="token operator">></span></span></span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" - simple array of obj iteration: &#92;t&#92;t"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"μs"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#123;</span>
        <span class="token keyword">auto</span> start <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ptr <span class="token operator">:</span> vec_sptA<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            ptr<span class="token operator">-></span><span class="token function">perf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ptr <span class="token operator">:</span> vec_sptB<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            ptr<span class="token operator">-></span><span class="token function">perf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">auto</span> end <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">auto</span> diff <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>microseconds<span class="token operator">></span></span></span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" - array of shared_ptr iteration: &#92;t&#92;t"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"μs"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#123;</span>
        <span class="token keyword">auto</span> start <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ptr <span class="token operator">:</span> vec_sptBase<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            ptr<span class="token operator">-></span><span class="token function">perf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">auto</span> end <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">auto</span> diff <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>microseconds<span class="token operator">></span></span></span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" - merged array of shared_ptr iteration: &#92;t"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"μs"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#123;</span>
        <span class="token keyword">auto</span> start <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ptr <span class="token operator">:</span> vec_sptBase<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">*</span>uncast_A <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ptr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                uncast_A<span class="token operator">-></span><span class="token function">specA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>B <span class="token operator">*</span>uncast_B <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ptr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                uncast_B<span class="token operator">-></span><span class="token function">specB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">auto</span> end <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">auto</span> diff <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>microseconds<span class="token operator">></span></span></span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" - merged array of shared_ptr with casting: &#92;t"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"μs"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#123;</span>
        <span class="token keyword">auto</span> start <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ptr <span class="token operator">:</span> vec_container<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            ptr<span class="token punctuation">.</span><span class="token function">perf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">auto</span> end <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">auto</span> diff <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>microseconds<span class="token operator">></span></span></span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" - array of container with iteration: &#92;t&#92;t"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"μs"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#123;</span>
        <span class="token keyword">auto</span> start <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ptr <span class="token operator">:</span> vec_container<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">*</span>uncast_A <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>A <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ptr<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                uncast_A<span class="token operator">-></span><span class="token function">specA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>B <span class="token operator">*</span>uncast_B <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>B <span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ptr<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                uncast_B<span class="token operator">-></span><span class="token function">specB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">auto</span> end <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">auto</span> diff <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>microseconds<span class="token operator">></span></span></span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" - array of container with data casting: &#92;t"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"μs"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// call();</span>
    <span class="token function">perf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// https://www.cppstories.com/2014/05/vector-of-objects-vs-vector-of-pointers/</span>
<span class="token comment">// g++ -o inheritance -Werror -Wfatal-errors -O3 -s -fexpensive-optimizations ./inheritance.cpp</span>

<span class="token comment">/*
Vectors size
 - vecA + vec_B: 		    20 000 000
 - vec_sptA + vec_sptB:     20 000 000
 - vec_sptBase:  		    20 000 000
 - vec_container:  		    20 000 000

Durations:

Good, but can't use polymorphism (heavy)
 - simple array of obj iteration: 		              1 μs  // pre optimisation
 - array of shared_ptr iteration: 		        543 048 μs

Meh, polymorphism but slow for nothing on base function
 - merged array of shared_ptr iteration:        408 033 μs
 - merged array of shared_ptr with casting: 	659 349 μs

Same, no gain of perf by extracting the base function
 - array of container with iteration: 		    403 188 μs
 - array of container with data casting: 	    638 731 μs
*/</span></code>`,oh,Tt,mp,n9,eh,Dt,uI=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;thread></span></span>

<span class="token keyword">static</span> <span class="token keyword">bool</span> s_Finished <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token comment">// Just print a line of text</span>
<span class="token keyword">void</span> <span class="token function">DoWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

	<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token double-colon punctuation">::</span>literals<span class="token double-colon punctuation">::</span>chrono_literals<span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Function thread id="</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

	<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s_Finished<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// &#92;n is performance wise better than endl, unless flushing of stream is required</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Working...&#92;n"</span><span class="token punctuation">;</span>

		<span class="token comment">// Prevent the thread to be CPU Usage 100% (if it print as fast as he can)</span>
		std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">sleep_for</span><span class="token punctuation">(</span><span class="token number">1</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Main thread id="</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>this_thread<span class="token double-colon punctuation">::</span><span class="token function">get_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token comment">// This worker will just print Working as fast as it can until we press Enter</span>
	std<span class="token double-colon punctuation">::</span>thread <span class="token function">worker</span><span class="token punctuation">(</span>DoWork<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// When whe press Enter, set s_Finished to true and stop the function printing by the otehr thread</span>
	std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	s_Finished <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	
	<span class="token comment">// Tell the main thread to wait that the thread worker finish his task before it run the next ones</span>
	worker<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Finished."</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
	<span class="token comment">// Dont do cin.get() while the otehr thread is running</span>
	std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ph,Ct,vp,s9,ch,Ot,rI=`<code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;SFML/Graphics.hpp></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// Create the main window</span>
    sf<span class="token double-colon punctuation">::</span>RenderWindow <span class="token function">window</span><span class="token punctuation">(</span>sf<span class="token double-colon punctuation">::</span><span class="token function">VideoMode</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"SFML window"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Create a Rectangle shape to display</span>
    sf<span class="token double-colon punctuation">::</span>RectangleShape <span class="token function">rectangle</span><span class="token punctuation">(</span>sf<span class="token double-colon punctuation">::</span><span class="token function">Vectir2f</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Width, Height</span>
    rectangle<span class="token punctuation">.</span><span class="token function">setFillColor</span><span class="token punctuation">(</span>sf<span class="token double-colon punctuation">::</span><span class="token function">Color</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rectangle<span class="token operator">/</span><span class="token function">setOutlineThickness</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rectangle<span class="token punctuation">.</span><span class="token function">setOutlineColor</span><span class="token punctuation">(</span>sf<span class="token double-colon punctuation">::</span>Color<span class="token double-colon punctuation">::</span>Red<span class="token punctuation">)</span><span class="token punctuation">;</span>
    rectangle<span class="token punctuation">.</span><span class="token function">setorigin</span><span class="token punctuation">(</span>sf<span class="token double-colon punctuation">::</span><span class="token function">Vector2f</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rectangle<span class="token punctuation">.</span><span class="token function">setPosition</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rectangle<span class="token punctuation">.</span><span class="token function">setRotation</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Create a Circle shape to display</span>
    sf<span class="token double-colon punctuation">::</span>CircleShape <span class="token function">circle</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Radius, Number of faces (0=circle, 3=triangle ...)</span>

    <span class="token comment">// Create a Triangle shape to display</span>
    sf<span class="token double-colon punctuation">::</span>ConvexShape triangle<span class="token punctuation">;</span>
    triangle<span class="token punctuation">.</span><span class="token function">setPointCount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    triangle<span class="token punctuation">.</span><span class="token function">setPoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sf<span class="token double-colon punctuation">::</span><span class="token function">Vector2f</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    triangle<span class="token punctuation">.</span><span class="token function">setPoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> sf<span class="token double-colon punctuation">::</span><span class="token function">Vector2f</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    triangle<span class="token punctuation">.</span><span class="token function">setPoint</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> sf<span class="token double-colon punctuation">::</span><span class="token function">Vector2f</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">// Create a graphical text to display</span>
    sf<span class="token double-colon punctuation">::</span>Font font<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>font<span class="token punctuation">.</span><span class="token function">loadFromFile</span><span class="token punctuation">(</span><span class="token string">"arial.ttf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> EXIT_FAILURE<span class="token punctuation">;</span>
    sf<span class="token double-colon punctuation">::</span>Text <span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Text"</span><span class="token punctuation">,</span> font<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Start display loop</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// Process events</span>
        sf<span class="token double-colon punctuation">::</span>Event event<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">pollEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
        	<span class="token comment">// Close window: exit</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>type <span class="token operator">==</span> sf<span class="token double-colon punctuation">::</span>Event<span class="token double-colon punctuation">::</span>KeyPressed<span class="token punctuation">)</span>
                <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Close window: exit</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>type <span class="token operator">==</span> sf<span class="token double-colon punctuation">::</span>Event<span class="token double-colon punctuation">::</span>Closed<span class="token punctuation">)</span>
                window<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// Clear screen</span>
        window<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span>sf<span class="token double-colon punctuation">::</span>Color<span class="token double-colon punctuation">::</span>Black<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Draw the rectangle</span>
        window<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Draw the circle</span>
        window<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>circle<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Draw the triangle</span>
        window<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>triangle<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Draw the string</span>
        window<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Update the window</span>
        window<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Set delay to update</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token function">milliseconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code>`,lh,gt,Ep,a9,uh,_p,Pd,t9,rh,At,bp,o9,ih,wp,Rd,e9,kh,St,yp,p9,dh,Tp,Ld,c9;return{c(){Zn=t("h2"),Lt=t("a"),rm=p("Introduction"),Wd=l(),Vs=t("h3"),It=t("a"),im=p("History of the C language"),Hd=l(),hn=t("p"),km=p("C is an "),Hp=t("code"),dm=p("imperative procedural language"),fm=p(`. It was designed to be
`),Gp=t("code"),hm=p("compiled"),mm=p(" to provide "),Up=t("code"),vm=p("low-level access to memory"),Em=p("."),Gd=l(),Wn=t("p"),_m=p("It was developed between 1972 and 1973 by "),Mp=t("code"),bm=p("Dennis Ritchie"),wm=p(`, initially to
construct utilities running on the `),qp=t("code"),ym=p("Unix"),Tm=p(` operating system. During the
1980s, C gradually gained popularity and became one of the most widely
used programming languages.`),Ud=l(),Hn=t("p"),Dm=p(`Today, the C is not as popular as it used to be, but it’s still a very
good language to begin with and understand the rules of programmation.
Moreover, it is realy `),zp=t("code"),Cm=p("fast and light"),Om=p(` and permit to manage the low
level datas with the `),Fp=t("code"),gm=p("pointers"),Am=p(`, one thing that most of the high level
languages can’t.`),Md=l(),Qs=t("h3"),Bt=t("a"),Sm=p("Evolution toward C++"),qd=l(),mn=t("p"),Pm=p("C++ was developped in 1979 by "),Vp=t("code"),Rm=p("Bjarne Stroustrup"),Lm=p(`. It was firstly named
`),Qp=t("code"),Im=p("C with Classes"),Bm=p(` by it’s creator, then renamed in 1983. It is an
evolution toward an more `),jp=t("code"),xm=p("Object Oriented programming language"),Nm=p(`, that it
implements with Classes, Inheritance and many others functionnalities.`),zd=l(),Gn=t("p"),Wm=p("The current version of it is "),Kp=t("code"),Hm=p("C++17"),Gm=p(` (2017). A new one is standardized
by the ISO every 3 years since 2011, the next versions is `),Yp=t("code"),Um=p("C++20"),Mm=p(`,
already released but not every functionnality are supported yet on the
compilators.`),Fd=l(),js=t("h2"),xt=t("a"),qm=p("Programming in C"),Vd=l(),Ks=t("h3"),Nt=t("a"),zm=p("First Program : helloworld.c"),Qd=l(),Ys=t("pre"),jd=l(),d=t("p"),Fm=p("This file is a simple "),Xp=t("code"),Vm=p(".txt file"),Qm=p(", I just edited the "),Jp=t("strong"),jm=p("extension"),Km=p(`. Like
you can see, it is `),Zp=t("code"),Ym=p(".c"),Xm=p(" for the base language, and "),$p=t("code"),Jm=p(".cpp"),Zm=p(` for C++, but
these are not the only ones that exist, there are many others, like `),nc=t("code"),$m=p(".h"),n2=p(`
and `),sc=t("code"),s2=p(".hpp"),a2=p(" for the "),ac=t("strong"),t2=p("header files"),o2=p(", "),tc=t("code"),e2=p(".cuh"),p2=p(" and "),oc=t("code"),c2=p(".cu"),l2=p(" for CUDA..."),Kd=l(),x=t("p"),u2=p("To have your program working, you’ll have to "),ec=t("strong"),r2=p("build the file"),i2=p(`: To put
it simply, we get the `),pc=t("code"),k2=p("source code"),d2=p(` (helloworld.c) and put it into a
`),cc=t("code"),f2=p("compiler"),h2=p(` with the right settings and dependancies, and this compiler
output and `),lc=t("code"),m2=p("executable"),v2=p(` (helloworld.exe) that you can run from your
machine. We will use the `),uc=t("code"),E2=p("command line"),_2=p(` to build and run this file,
it’s realy easy.`),Yd=l(),Xs=t("h3"),Wt=t("a"),b2=p("Compiling"),Xd=l(),vn=t("p"),w2=p(`But first of all, you will need a compiler. That’s a piece of software
that transform your file from `),rc=t("code"),y2=p("readable instructions"),T2=p(` (in english) into
a language that your machine can understand: `),ic=t("code"),D2=p("binaries"),C2=p(` (0 and 1),
that’s what an `),kc=t("code"),O2=p(".exe"),g2=p(` file is (if you open it with and text editor, you
will see some stranges charaters).`),Jd=l(),os=t("p"),A2=p("Many C compiler exists, ("),Js=t("a"),S2=p("See all"),P2=p(")"),Zd=l(),Ht=t("p"),R2=p("I recommand these ones:"),$d=l(),es=t("ul"),Gt=t("li"),L2=p("GCC (from GNU, Open sources): "),Zs=t("a"),I2=p("Download GCC from GNU"),B2=l(),Ut=t("li"),x2=p("MSVC (from Microsoft Visual Studio): "),$s=t("a"),N2=p("Download Visual Studio"),nf=l(),fn=t("p"),W2=p("For this example, I’m using "),Mt=t("a"),H2=p("GCC 10.0.1"),G2=p(", the base "),dc=t("code"),U2=p("command line"),M2=p(" from "),fc=t("strong"),q2=p("Windows 10"),z2=p(" and the text editor "),na=t("a"),F2=p("Sublime Text 3"),sf=l(),ps=t("blockquote"),hc=t("p"),V2=p("I recommand to install GCC from MinGW instead of compiling it yourself."),Q2=l(),qt=t("p"),j2=p("you will find explanations on how to proceed "),sa=t("a"),K2=p("here"),af=l(),aa=t("h4"),zt=t("a"),Y2=p("Setup GCC and compiling a basic program"),tf=l(),Un=t("ol"),ta=t("li"),Rn=t("p"),X2=p("If you are on windows, you can press "),mc=t("code"),J2=p("Windows"),Z2=p(" + "),vc=t("code"),$2=p("Q"),nv=p(" then type "),Ec=t("code"),sv=p("cmd"),av=p(" to open the command line."),tv=l(),Ln=t("ol"),_c=t("li"),cs=t("p"),ov=p("Open it and try to type "),bc=t("code"),ev=p("gcc"),pv=p(" and press "),wc=t("code"),cv=p("Enter"),lv=l(),yc=t("li"),oa=t("p"),uv=p("If you have a message that look like that: "),Tc=t("code"),rv=p("'gcc' is not recognised as an internal command"),iv=p(", make sure that you downloaded GCC and go to the next step: We will add GCC to the environment variables so the system can find it."),kv=l(),ea=t("li"),Dc=t("p"),dv=p("The system need to know where the compiler is to understand that you call it from the command line."),fv=l(),In=t("ol"),Cc=t("li"),En=t("p"),hv=p("Press "),Oc=t("code"),mv=p("Windows"),vv=p(" + "),gc=t("code"),Ev=p("Q"),_v=p(" then type "),Ac=t("code"),bv=p("env"),wv=p(" and open "),Sc=t("code"),yv=p("Edit the system environment variables"),Tv=l(),Pc=t("li"),pa=t("p"),Dv=p("Click on the "),Rc=t("code"),Cv=p("Environment variables"),Ov=p(" button"),gv=l(),Lc=t("li"),ls=t("p"),Av=p("Select "),Ic=t("code"),Sv=p("Path"),Pv=p(" and click on "),Bc=t("code"),Rv=p("Edit"),Lv=l(),xc=t("li"),$n=t("p"),Iv=p("Finally, click on "),Nc=t("code"),Bv=p("New"),xv=p(" and paste the link to GCC (ex: "),Wc=t("code"),Nv=p("C:\\MinGW\\bin"),Wv=p(")"),Hv=l(),Hc=t("li"),us=t("p"),Gv=p("Open a new command and type "),Gc=t("code"),Uv=p("gcc"),Mv=p(", now it should work and diplay that message: "),Uc=t("code"),qv=p("gcc: fatal error: no input files. compilation terminated."),zv=l(),ca=t("li"),Ft=t("p"),Fv=p("Now we will compile the file "),Mc=t("code"),Vv=p("helloworld.c"),Qv=l(),Bn=t("ol"),qc=t("li"),zc=t("p"),jv=p("Open a command in the same directory as the C file"),Kv=l(),Fc=t("li"),Vt=t("p"),Yv=p("type "),Vc=t("code"),Xv=p("gcc helloworld.c -o helloworld.exe"),Jv=l(),Qc=t("li"),Qt=t("p"),Zv=p("then "),jc=t("code"),$v=p("./helloworld.exe"),nE=l(),Kc=t("li"),jt=t("p"),sE=p("The program will output this string: "),Yc=t("code"),aE=p("Hello, World!"),tE=l(),Xc=t("li"),xn=t("p"),oE=p("Great, you have now a "),Jc=t("code"),eE=p("working basis"),pE=p(" to begin your learning of the "),Zc=t("code"),cE=p("C"),lE=p(" and "),$c=t("code"),uE=p("C++"),rE=p(" languages."),of=l(),la=t("h4"),Kt=t("a"),iE=p("Compilator settings and flags"),ef=l(),Yt=t("blockquote"),h=t("p"),kE=p("You can call the compiler by "),nl=t("code"),dE=p("gcc"),fE=p(" for the "),sl=t("strong"),hE=p("C compiler"),mE=p(" and "),al=t("code"),vE=p("g++"),EE=p(`
for the `),tl=t("strong"),_E=p("C++ compiler"),bE=p(`. I explain here the flags that I use and find
the `),ol=t("strong"),wE=p("most important"),yE=p(`, but you can find all the gcc flags
`),ua=t("a"),TE=p("HERE"),DE=p(`. If you
want, you can even create a `),el=t("code"),CE=p(".bat"),OE=p(` file to automate the command and
launch the compilations.`),pf=l(),Xt=t("p"),gE=p("Command Syntax:"),cf=l(),Jt=t("p"),pl=t("code"),AE=p("gcc [options] [source files] [object files] -o output file"),lf=l(),Mn=t("p"),SE=p("If you don’t put "),cl=t("code"),PE=p("-o output file"),RE=p(", the output file will be "),ll=t("code"),LE=p("a.exe"),IE=p(" per default."),uf=l(),Zt=t("p"),BE=p("Add libraries:"),rf=l(),$t=t("p"),ul=t("code"),xE=p("-I %libpath%\\include -L %libpath%\\lib -l libfileA -l libfileB"),kf=l(),qn=t("ul"),rs=t("li"),rl=t("code"),NE=p("-I"),WE=p(" define the include folder, generally where the headers files "),il=t("code"),HE=p(".h"),GE=p(" are"),UE=l(),no=t("li"),kl=t("code"),ME=p("-L"),qE=p(" define the folder where to look at the source files"),zE=l(),zn=t("li"),dl=t("code"),FE=p("-l"),VE=p(" define the name/link for the library to include "),fl=t("code"),QE=p(".dll"),jE=p(" if the lib is dynamically compiled, and "),hl=t("code"),KE=p(".lib"),YE=p(" if it is staticaly compiled"),df=l(),so=t("p"),XE=p("Warnings and Errors:"),ff=l(),Fn=t("p"),JE=p("The "),ml=t("strong"),ZE=p("Errors Flags"),$E=p(" begin with a "),vl=t("code"),n_=p("-W"),s_=p(" (for Warning):"),hf=l(),K=t("ul"),ao=t("li"),El=t("code"),a_=p("-w"),t_=p(" disable all warnings messages, the program will keep compiling"),o_=l(),to=t("li"),_l=t("code"),e_=p("-Wall"),p_=p(" enables all the warnings for minors errors"),c_=l(),oo=t("li"),bl=t("code"),l_=p("-Wextra"),u_=p(` enables some extra warning flags that -Wall don’t
activate`),r_=l(),eo=t("li"),wl=t("code"),i_=p("-Werror"),k_=p(" make all warnings into errors."),d_=l(),po=t("li"),yl=t("code"),f_=p("-Wfatal-errors"),h_=p(" abort compilation on the first error"),mf=l(),co=t("p"),m_=p("Debug Flags:"),vf=l(),lo=t("p"),Tl=t("code"),v_=p("-Wall -Wextra -Wold-style-cast -Woverloaded-virtual -Wfloat-equal -Wwrite-strings -Wpointer-arith -Wcast-qual -Wcast-align -Wconversion -Wshadow -Weffc++ -Wredundant-decls -Wdouble-promotion -Winit-self -Wswitch-default -Wswitch-enum -Wundef -Wlogical-op -Winline"),Ef=l(),uo=t("blockquote"),Dl=t("p"),E_=p("For the Debug config, you can put all the flags to detect and display every error or unrecommanded feature of your code."),_f=l(),ro=t("p"),__=p("Release Flags"),bf=l(),io=t("p"),Cl=t("code"),b_=p("-Werror -Wfatal-errors"),wf=l(),ko=t("blockquote"),Ol=t("p"),w_=p("For the Release config, the process abort at the first error"),yf=l(),Vn=t("p"),y_=p("The "),gl=t("strong"),T_=p("Debug Flags"),D_=p(" begin with a "),Al=t("code"),C_=p("-g"),O_=p(" (for Generate debug informations)"),Tf=l(),_n=t("ul"),fo=t("li"),Sl=t("code"),g_=p("-g0"),A_=p(" no debug informations"),S_=l(),ho=t("li"),Pl=t("code"),P_=p("-g1"),R_=p(" minimal debug informations"),L_=l(),mo=t("li"),Rl=t("code"),I_=p("-g"),B_=p(" default debug informations"),x_=l(),vo=t("li"),Ll=t("code"),N_=p("-g3"),W_=p(" maximal debug informations"),Df=l(),Eo=t("blockquote"),ns=t("p"),H_=p("I recommand to stay with the default value "),Il=t("code"),G_=p("-g"),U_=p(" and switch to higher level "),Bl=t("code"),M_=p("-g3"),q_=p(" if you have no clue on the error."),Cf=l(),_o=t("p"),z_=p("Optimisation:"),Of=l(),Qn=t("p"),F_=p("The "),xl=t("strong"),V_=p("Optimisation Flags"),Q_=p(" begin with a "),Nl=t("code"),j_=p("-O"),K_=p(" (for Optimisation)"),gf=l(),is=t("table"),Wl=t("thead"),H=t("tr"),Hl=t("th"),Y_=p("Option"),X_=l(),Gl=t("th"),J_=p("Optimization Level"),Z_=l(),Ul=t("th"),$_=p("Execution Time"),n3=l(),Ml=t("th"),s3=p("Code Size"),a3=l(),ql=t("th"),t3=p("Memory Usage"),o3=l(),zl=t("th"),e3=p("Compilation Time"),p3=l(),G=t("tbody"),U=t("tr"),Fl=t("td"),Vl=t("code"),c3=p("-O0"),l3=l(),Ql=t("td"),u3=p("compilation time"),r3=l(),jl=t("td"),i3=p("+"),k3=l(),Kl=t("td"),d3=p("+"),f3=l(),Yl=t("td"),h3=p("-"),m3=l(),Xl=t("td"),v3=p("-"),E3=l(),M=t("tr"),Jl=t("td"),Zl=t("code"),_3=p("-O1 /-O"),b3=l(),$l=t("td"),w3=p("code size/exe time"),y3=l(),nu=t("td"),T3=p("-"),D3=l(),su=t("td"),C3=p("-"),O3=l(),au=t("td"),g3=p("+"),A3=l(),tu=t("td"),S3=p("+"),P3=l(),q=t("tr"),ou=t("td"),eu=t("code"),R3=p("-O2"),L3=l(),pu=t("td"),I3=p("code size/exe time"),B3=l(),cu=t("td"),x3=p("- -"),N3=l(),lu=t("td"),W3=p("="),H3=l(),uu=t("td"),G3=p("+"),U3=l(),ru=t("td"),M3=p("+ +"),q3=l(),z=t("tr"),iu=t("td"),ku=t("code"),z3=p("-O3"),F3=l(),du=t("td"),V3=p("code size/exe time"),Q3=l(),fu=t("td"),j3=p("- - -"),K3=l(),hu=t("td"),Y3=p("="),X3=l(),mu=t("td"),J3=p("+"),Z3=l(),vu=t("td"),$3=p("+ + +"),nb=l(),F=t("tr"),Eu=t("td"),_u=t("code"),sb=p("-Os"),ab=l(),bu=t("td"),tb=p("code size"),ob=l(),wu=t("td"),eb=p("="),pb=l(),yu=t("td"),cb=p("-"),lb=l(),Tu=t("td"),ub=p("="),rb=l(),Du=t("td"),ib=p("++"),kb=l(),V=t("tr"),Cu=t("td"),Ou=t("code"),db=p("-Ofast"),fb=l(),gu=t("td"),hb=p("imprecise fast math"),mb=l(),Au=t("td"),vb=p("- - -"),Eb=l(),Su=t("td"),_b=p("="),bb=l(),Pu=t("td"),wb=p("+"),yb=l(),Ru=t("td"),Tb=p("+ + +"),Af=l(),bo=t("p"),wo=t("em"),Db=p("informations from "),ra=t("a"),Cb=p("https://www.rapidtables.com/code/linux/gcc/gcc-o.html#optimization"),Sf=l(),ia=t("h3"),yo=t("a"),Ob=p("Import and use Libraries"),Pf=l(),ka=t("h4"),To=t("a"),gb=p("Includes and Dependancies"),Rf=l(),jn=t("p"),Ab=p("To "),Lu=t("strong"),Sb=p("include a library"),Pb=p(" we use the "),Iu=t("code"),Rb=p("#include"),Lb=p(" command."),Lf=l(),ks=t("ul"),Do=t("li"),Bu=t("code"),Ib=p("#include <library.h>"),Bb=p(` when the headers folder is already linked in
the compiler`),xb=l(),Co=t("li"),xu=t("code"),Nb=p('#include "folder/library.h"'),Wb=p(` to search in a specific folder with
the path`),If=l(),Oo=t("p"),Hb=p("List of the most common and used system libraries:"),Bf=l(),v=t("ul"),da=t("li"),Nu=t("strong"),Gb=p("C"),Ub=p(" Input/Output library: "),Wu=t("code"),Mb=p("#include <stdio.h>"),qb=l(),fa=t("li"),Hu=t("strong"),zb=p("C"),Fb=p(" General library: "),Gu=t("code"),Vb=p("#include <stdlib.h>"),Qb=l(),ha=t("li"),Uu=t("strong"),jb=p("C"),Kb=p(" Numerics library : "),Mu=t("code"),Yb=p("#include <cmath.h>"),Xb=l(),ma=t("li"),qu=t("strong"),Jb=p("C"),Zb=p(" Strings library: "),zu=t("code"),$b=p("#include <string.h>"),n0=l(),va=t("li"),Fu=t("strong"),s0=p("C"),a0=p(" Time library: "),Vu=t("code"),t0=p("#include <time.h>"),o0=l(),Ea=t("li"),Qu=t("strong"),e0=p("C++"),p0=p(" Time library: "),ju=t("code"),c0=p("#include <chrono>"),l0=l(),_a=t("li"),Ku=t("strong"),u0=p("C++"),r0=p(" Treads library: "),Yu=t("code"),i0=p("#include <thread>"),xf=l(),go=t("p"),Ao=t("em"),k0=p("informations from "),ba=t("a"),d0=p("https://en.cppreference.com/w/cpp/header"),Nf=l(),wa=t("h4"),So=t("a"),f0=p("Namespace and utilities"),Wf=l(),Kn=t("p"),h0=p("When you use multiple libraries, it could be some "),Xu=t("code"),m0=p("conflicts"),v0=p(` under
names between some libraries, that’s why we use `),Ju=t("code"),E0=p("namespaces"),_0=p("."),Hf=l(),Po=t("blockquote"),Ro=t("p"),b0=p(`“Namespaces provide a method for preventing name conflicts in large projects.”
`),ya=t("a"),w0=p("source"),Gf=l(),Ta=t("p"),y0=p("We can use namespaces like that: "),Zu=t("code"),T0=p("sf::..."),Uf=l(),Da=t("pre"),Mf=l(),Ca=t("p"),D0=p("Or like that: "),$u=t("code"),C0=p("namespace sf { ... }"),qf=l(),Oa=t("pre"),zf=l(),ga=t("p"),O0=p("Or even like that: "),nr=t("code"),g0=p("using namespace sf;"),Ff=l(),Aa=t("pre"),Vf=l(),Lo=t("blockquote"),Yn=t("p"),sr=t("strong"),A0=p("I recommand the first two methods"),S0=p(`, the problem with the last one is
that you `),ar=t("code"),P0=p("loose all the purpose"),R0=p(" of the namespace, and it’s "),tr=t("code"),L0=p("confusing"),I0=p(`
when you want to use both functions from libraries that would be in
conflict, you will have to mix the third and the first method...`),Qf=l(),Sa=t("h2"),Io=t("a"),B0=p("Cheat Sheets"),jf=l(),Pa=t("h3"),Bo=t("a"),x0=p("Usefull Informations"),Kf=l(),xo=t("blockquote"),No=t("p"),N0=p("Unofficial Documentation: "),Ra=t("a"),W0=p("https://en.cppreference.com/w/"),Yf=l(),Wo=t("p"),or=t("strong"),H0=p("About Cpp"),Xf=l(),Y=t("ul"),Ho=t("li"),er=t("strong"),G0=p("Type of Language:"),U0=p(" Procedural, Object-Oriented"),M0=l(),Go=t("li"),pr=t("strong"),q0=p("Born in:"),z0=p(" 1985"),F0=l(),Uo=t("li"),cr=t("strong"),V0=p("Caracteristics:"),Q0=p(" Statically typed, low level, fast"),j0=l(),La=t("li"),lr=t("strong"),K0=p("Popularity:"),Y0=p(" 5.8% (6th) "),Ia=t("a"),X0=p("src"),J0=l(),Mo=t("li"),ur=t("strong"),Z0=p("Usefull for:"),$0=p(" softwares, games, embedded…"),Jf=l(),Ba=t("h3"),qo=t("a"),n5=p("Basic C Cheat Sheet"),Zf=l(),xa=t("h4"),zo=t("a"),s5=p("Types and Variables"),$f=l(),bn=t("p"),rr=t("code"),a5=p("/s/"),t5=p(" stand for "),ir=t("strong"),o5=p("Signed"),e5=p(" and "),kr=t("code"),p5=p("/u/"),c5=p(" for "),dr=t("strong"),l5=p("Unsigned"),n1=l(),Fo=t("p"),fr=t("strong"),u5=p("NUMERICS"),s1=l(),ds=t("table"),hr=t("thead"),E=t("tr"),mr=t("th"),r5=p("Name"),i5=l(),vr=t("th"),k5=p("Syntax"),d5=l(),Er=t("th"),f5=p("Size"),h5=l(),_r=t("th"),m5=p("Min"),v5=l(),br=t("th"),E5=p("Max"),_5=l(),wr=t("th"),b5=p("Letter"),w5=l(),yr=t("th"),y5=p("Aliases"),T5=l(),m=t("tbody"),w=t("tr"),Na=t("td"),D5=p("Short "),Tr=t("code"),C5=p("/s/"),O5=p(" Integer"),g5=l(),Dr=t("td"),Cr=t("code"),A5=p("short int"),S5=l(),Or=t("td"),gr=t("code"),P5=p("16+ bits"),R5=l(),Vo=t("td"),L5=p("-32 768 "),fs=t("span"),I5=p("(−2"),Ar=t("sup"),B5=p("15"),x5=p(")"),N5=l(),Qo=t("td"),W5=p("32 767 "),hs=t("span"),H5=p("(2"),Sr=t("sup"),G5=p("15"),U5=p("−1)"),M5=l(),Pr=t("td"),Rr=t("code"),q5=p("%h"),z5=l(),Wa=t("td"),Lr=t("code"),F5=p("short"),V5=l(),Ir=t("code"),Q5=p("signed short"),j5=l(),y=t("tr"),Ha=t("td"),K5=p("Short "),Br=t("code"),Y5=p("/u/"),X5=p(" Integer"),J5=l(),xr=t("td"),Nr=t("code"),Z5=p("unsigned short int"),$5=l(),Wr=t("td"),Hr=t("code"),n4=p("16+ bits"),s4=l(),jo=t("td"),a4=p("0 "),Ko=t("span"),t4=p("(0)"),o4=l(),Yo=t("td"),e4=p("65 535 "),ms=t("span"),p4=p("(2"),Gr=t("sup"),c4=p("16"),l4=p("−1)"),u4=l(),Ur=t("td"),Mr=t("code"),r4=p("%h"),i4=l(),Ga=t("td"),qr=t("code"),k4=p("unsigned"),d4=l(),zr=t("code"),f4=p("short"),h4=l(),T=t("tr"),Xo=t("td"),m4=p("Integer "),Fr=t("code"),v4=p("/s/"),E4=l(),Vr=t("td"),Qr=t("code"),_4=p("int"),b4=l(),jr=t("td"),Kr=t("code"),w4=p("16+ bits"),y4=l(),Jo=t("td"),T4=p("-32 768 "),vs=t("span"),D4=p("(−2"),Yr=t("sup"),C4=p("15"),O4=p(")"),g4=l(),Zo=t("td"),A4=p("32 767 "),Es=t("span"),S4=p("(2"),Xr=t("sup"),P4=p("15"),R4=p("−1)"),L4=l(),Jr=t("td"),Zr=t("code"),I4=p("%i"),B4=l(),Ua=t("td"),$r=t("code"),x4=p("signed"),N4=l(),ni=t("code"),W4=p("signed int"),H4=l(),D=t("tr"),$o=t("td"),G4=p("Integer "),si=t("code"),U4=p("/u/"),M4=l(),ai=t("td"),ti=t("code"),q4=p("unsigned int"),z4=l(),oi=t("td"),ei=t("code"),F4=p("16+ bits"),V4=l(),ne=t("td"),Q4=p("0 "),se=t("span"),j4=p("(0)"),K4=l(),ae=t("td"),Y4=p("65 535 "),_s=t("span"),X4=p("(2"),pi=t("sup"),J4=p("16"),Z4=p("−1)"),$4=l(),ci=t("td"),li=t("code"),nw=p("%i"),sw=l(),Ma=t("td"),ui=t("code"),aw=p("unsigned"),tw=l(),ri=t("code"),ow=p("unsigned int"),ew=l(),C=t("tr"),qa=t("td"),pw=p("Long "),ii=t("code"),cw=p("/s/"),lw=p(" Integer"),uw=l(),ki=t("td"),di=t("code"),rw=p("long int"),iw=l(),fi=t("td"),hi=t("code"),kw=p("32+ bits"),dw=l(),te=t("td"),fw=p("-2 147 483 648 "),bs=t("span"),hw=p("(−2"),mi=t("sup"),mw=p("31"),vw=p(")"),Ew=l(),oe=t("td"),_w=p("2 147 483 647 "),ws=t("span"),bw=p("(2"),vi=t("sup"),ww=p("31"),yw=p("−1)"),Tw=l(),Ei=t("td"),_i=t("code"),Dw=p("%l"),Cw=l(),bi=t("td"),wi=t("code"),Ow=p("signed long int"),gw=l(),O=t("tr"),za=t("td"),Aw=p("Long "),yi=t("code"),Sw=p("/u/"),Pw=p(" Integer"),Rw=l(),Ti=t("td"),Di=t("code"),Lw=p("unsigned long int"),Iw=l(),Ci=t("td"),Oi=t("code"),Bw=p("32+ bits"),xw=l(),ee=t("td"),Nw=p("0 "),pe=t("span"),Ww=p("(0)"),Hw=l(),ce=t("td"),Gw=p("4 294 967 295 "),ys=t("span"),Uw=p("(2"),gi=t("sup"),Mw=p("32"),qw=p("−1)"),zw=l(),Ai=t("td"),Si=t("code"),Fw=p("%l"),Vw=l(),Pi=t("td"),Ri=t("code"),Qw=p("unsigned long"),jw=l(),g=t("tr"),Fa=t("td"),Kw=p("Long Long "),Li=t("code"),Yw=p("/s/"),Xw=p(" Integer"),Jw=l(),Ii=t("td"),Bi=t("code"),Zw=p("long long int"),$w=l(),xi=t("td"),Ni=t("code"),ny=p("64+ bits"),sy=l(),le=t("td"),ay=p("-9.223e-15 "),Ts=t("span"),ty=p("(−2"),Wi=t("sup"),oy=p("63"),ey=p(")"),py=l(),ue=t("td"),cy=p("9.223e+15 "),Ds=t("span"),ly=p("(2"),Hi=t("sup"),uy=p("63"),ry=p("−1)"),iy=l(),Gi=t("td"),Ui=t("code"),ky=p("%ll"),dy=l(),Mi=t("td"),qi=t("code"),fy=p("signed long long"),hy=l(),A=t("tr"),Va=t("td"),my=p("Long Long "),zi=t("code"),vy=p("/u/"),Ey=p(" Integer"),_y=l(),Fi=t("td"),Vi=t("code"),by=p("unsigned long long int"),wy=l(),Qi=t("td"),ji=t("code"),yy=p("64+ bits"),Ty=l(),re=t("td"),Dy=p("0 "),ie=t("span"),Cy=p("(0)"),Oy=l(),ke=t("td"),gy=p("18.446e+15 "),Cs=t("span"),Ay=p("(2"),Ki=t("sup"),Sy=p("64"),Py=p("−1)"),Ry=l(),Yi=t("td"),Xi=t("code"),Ly=p("%ll"),Iy=l(),Ji=t("td"),Zi=t("code"),By=p("unsigned long long"),a1=l(),de=t("blockquote"),$i=t("p"),xy=p("Integers are not rounded they are truncated toward 0. I recommand to not use short appart if you know what you do."),t1=l(),fe=t("p"),nk=t("strong"),Ny=p("CHARS"),o1=l(),Os=t("table"),sk=t("thead"),_=t("tr"),ak=t("th"),Wy=p("Name"),Hy=l(),tk=t("th"),Gy=p("Syntax"),Uy=l(),ok=t("th"),My=p("Size"),qy=l(),ek=t("th"),zy=p("Min"),Fy=l(),pk=t("th"),Vy=p("Max"),Qy=l(),ck=t("th"),jy=p("Letter"),Ky=l(),lk=t("th"),Yy=p("Aliases"),Xy=l(),Q=t("tbody"),S=t("tr"),he=t("td"),Jy=p("Char "),uk=t("code"),Zy=p("/s/"),$y=l(),rk=t("td"),ik=t("code"),n6=p("char"),s6=l(),kk=t("td"),dk=t("code"),a6=p("8+ bits"),t6=l(),me=t("td"),o6=p("-128 "),gs=t("span"),e6=p("(−2"),fk=t("sup"),p6=p("7"),c6=p(")"),l6=l(),ve=t("td"),u6=p("127 "),As=t("span"),r6=p("(2"),hk=t("sup"),i6=p("7"),k6=p("−1)"),d6=l(),mk=t("td"),vk=t("code"),f6=p("%hh"),h6=l(),Ek=t("td"),_k=t("code"),m6=p("signed char"),v6=l(),P=t("tr"),Ee=t("td"),E6=p("Char "),bk=t("code"),_6=p("/u/"),b6=l(),wk=t("td"),yk=t("code"),w6=p("unsigned char"),y6=l(),Tk=t("td"),Dk=t("code"),T6=p("8+ bits"),D6=l(),_e=t("td"),C6=p("0 "),be=t("span"),O6=p("(0)"),g6=l(),we=t("td"),A6=p("255 "),Ss=t("span"),S6=p("(2"),Ck=t("sup"),P6=p("8"),R6=p("−1)"),L6=l(),Ok=t("td"),gk=t("code"),I6=p("%hh"),B6=l(),e1=t("td"),x6=l(),R=t("tr"),ye=t("td"),N6=p("char8_t "),Ak=t("code"),W6=p("/u/"),H6=l(),Sk=t("td"),Pk=t("code"),G6=p("unsigned char"),U6=l(),Rk=t("td"),Lk=t("code"),M6=p("8+ bits"),q6=l(),Te=t("td"),z6=p("0 "),De=t("span"),F6=p("(0)"),V6=l(),Ce=t("td"),Q6=p("255 "),Ps=t("span"),j6=p("(2"),Ik=t("sup"),K6=p("8"),Y6=p("−1)"),X6=l(),Bk=t("td"),xk=t("code"),J6=p("%hh"),Z6=l(),p1=t("td"),$6=l(),L=t("tr"),Oe=t("td"),n7=p("char16_t "),Nk=t("code"),s7=p("/u/"),a7=l(),Wk=t("td"),Hk=t("code"),t7=p("unsigned char"),o7=l(),Gk=t("td"),Uk=t("code"),e7=p("8+ bits"),p7=l(),ge=t("td"),c7=p("0 "),Ae=t("span"),l7=p("(0)"),u7=l(),Se=t("td"),r7=p("255 "),Rs=t("span"),i7=p("(2"),Mk=t("sup"),k7=p("8"),d7=p("−1)"),f7=l(),qk=t("td"),zk=t("code"),h7=p("%hh"),m7=l(),c1=t("td"),v7=l(),I=t("tr"),Pe=t("td"),E7=p("char32_t "),Fk=t("code"),_7=p("/u/"),b7=l(),Vk=t("td"),Qk=t("code"),w7=p("unsigned char"),y7=l(),jk=t("td"),Kk=t("code"),T7=p("8+ bits"),D7=l(),Re=t("td"),C7=p("0 "),Le=t("span"),O7=p("(0)"),g7=l(),Ie=t("td"),A7=p("255 "),Ls=t("span"),S7=p("(2"),Yk=t("sup"),P7=p("8"),R7=p("−1)"),L7=l(),Xk=t("td"),Jk=t("code"),I7=p("%hh"),B7=l(),l1=t("td"),x7=l(),B=t("tr"),Be=t("td"),N7=p("wchar_t "),Zk=t("code"),W7=p("/u/"),H7=l(),$k=t("td"),nd=t("code"),G7=p("unsigned char"),U7=l(),sd=t("td"),ad=t("code"),M7=p("8+ bits"),q7=l(),xe=t("td"),z7=p("0 "),Ne=t("span"),F7=p("(0)"),V7=l(),We=t("td"),Q7=p("255 "),Is=t("span"),j7=p("(2"),td=t("sup"),K7=p("8"),Y7=p("−1)"),X7=l(),od=t("td"),ed=t("code"),J7=p("%hh"),Z7=l(),u1=t("td"),r1=l(),He=t("blockquote"),pd=t("p"),$7=p("Chars are just integers linked to an characted by the ascii table."),i1=l(),Ge=t("p"),Ue=t("em"),n8=p("informations from "),Qa=t("a"),s8=p("https://fr.cppreference.com/w/cpp/language/ascii"),k1=l(),ja=t("h4"),Me=t("a"),a8=p("Input Output"),d1=l(),Ka=t("pre"),f1=l(),qe=t("p"),cd=t("strong"),t8=p("output"),h1=l(),Ya=t("pre"),m1=l(),ze=t("p"),o8=p("Note:"),v1=l(),Fe=t("blockquote"),Nn=t("p"),e8=p("If you input "),ld=t("code"),p8=p("a"),c8=p(" you will have an output of "),ud=t("code"),l8=p("4194432"),u8=p(`. That’s because
scanf don’t convert the string to an int. When the value is not in
the right format, it will get the `),rd=t("code"),r8=p("memory location"),i8=p("."),E1=l(),Ve=t("blockquote"),b=t("p"),k8=p("For the boundaries, an input of "),id=t("code"),d8=p("2147483647"),f8=p(" will output "),kd=t("code"),h8=p("2147483647"),m8=p(`,
but if you try to enter a value of `),dd=t("code"),v8=p("2147483648"),E8=p(` you will have an
output of `),fd=t("code"),_8=p("-2147483648"),b8=p(`. Thats because the signed value is greater
than `),Qe=t("span"),w8=p(". The default int boundaries are "),hd=t("code"),y8=p("32bits"),T8=p(` on my
`),md=t("code"),D8=p("x64 processor"),_1=l(),Xa=t("h4"),je=t("a"),C8=p("Variables, Tests and Loops"),b1=l(),Ke=t("p"),vd=t("strong"),O8=p("VARIABLES DECLARATIONS"),w1=l(),Ja=t("pre"),y1=l(),Ye=t("p"),Ed=t("strong"),g8=p("TESTS"),T1=l(),Za=t("pre"),D1=l(),Xe=t("p"),_d=t("strong"),A8=p("SWITCH"),C1=l(),$a=t("pre"),O1=l(),Je=t("p"),bd=t("strong"),S8=p("LOOPS"),g1=l(),nt=t("pre"),A1=l(),Ze=t("blockquote"),st=t("p"),P8=p("You can use "),wd=t("code"),R8=p("break;"),L8=p(" to stop a loop."),S1=l(),at=t("h4"),$e=t("a"),I8=p("Random numbers"),P1=l(),np=t("p"),yd=t("strong"),B8=p("RANDOM"),R1=l(),tt=t("pre"),L1=l(),sp=t("blockquote"),ss=t("p"),x8=p("You can see the max of "),Td=t("code"),N8=p("rand()"),W8=p(" with "),Dd=t("code"),H8=p("RAND_MAX"),G8=p(" (32767+). For betters randoms number you can use the BOOST library."),I1=l(),ot=t("h4"),ap=t("a"),U8=p("Arrays"),B1=l(),tp=t("p"),Cd=t("strong"),M8=p("ARRAYS"),x1=l(),et=t("pre"),N1=l(),op=t("p"),Od=t("strong"),q8=p("STRINGS"),W1=l(),pt=t("pre"),H1=l(),ct=t("pre"),G1=l(),lt=t("h4"),ep=t("a"),z8=p("Functions"),U1=l(),ut=t("pre"),M1=l(),rt=t("h4"),pp=t("a"),F8=p("Structures"),q1=l(),cp=t("p"),gd=t("strong"),V8=p("RECTANGLE STRUCTURE EXAMPLE"),z1=l(),it=t("pre"),F1=l(),lp=t("p"),Q8=p("output"),V1=l(),kt=t("pre"),Q1=l(),up=t("blockquote"),Ad=t("p"),j8=p("Take care of the order in which you declare your structure fields, because it will impact the size of the final data."),j1=l(),rp=t("p"),Sd=t("strong"),K8=p("For instance…"),K1=l(),dt=t("pre"),Y1=l(),ft=t("h4"),ip=t("a"),Y8=p("Pointers and Smart pointers"),X1=l(),ht=t("pre"),J1=l(),mt=t("h3"),kp=t("a"),X8=p("Basic C++ Cheat Sheet"),Z1=l(),vt=t("h4"),dp=t("a"),J8=p("Macros"),$1=l(),Et=t("pre"),nh=l(),_t=t("h4"),fp=t("a"),Z8=p("Arrays"),sh=l(),bt=t("pre"),ah=l(),wt=t("h4"),hp=t("a"),$8=p("Inheritances"),th=l(),yt=t("pre"),oh=l(),Tt=t("h4"),mp=t("a"),n9=p("Threads"),eh=l(),Dt=t("pre"),ph=l(),Ct=t("h2"),vp=t("a"),s9=p("SFML"),ch=l(),Ot=t("pre"),lh=l(),gt=t("h2"),Ep=t("a"),a9=p("Qt"),uh=l(),_p=t("blockquote"),Pd=t("p"),t9=p("TODO"),rh=l(),At=t("h2"),bp=t("a"),o9=p("CUDA"),ih=l(),wp=t("blockquote"),Rd=t("p"),e9=p("TODO"),kh=l(),St=t("h2"),yp=t("a"),p9=p("CMake and Builds"),dh=l(),Tp=t("blockquote"),Ld=t("p"),c9=p("TODO"),this.h()},l(a){Zn=o(a,"H2",{id:!0});var r=e(Zn);Lt=o(r,"A",{href:!0});var yT=e(Lt);rm=c(yT,"Introduction"),yT.forEach(s),r.forEach(s),Wd=u(a),Vs=o(a,"H3",{id:!0});var TT=e(Vs);It=o(TT,"A",{href:!0});var DT=e(It);im=c(DT,"History of the C language"),DT.forEach(s),TT.forEach(s),Hd=u(a),hn=o(a,"P",{});var Bs=e(hn);km=c(Bs,"C is an "),Hp=o(Bs,"CODE",{});var CT=e(Hp);dm=c(CT,"imperative procedural language"),CT.forEach(s),fm=c(Bs,`. It was designed to be
`),Gp=o(Bs,"CODE",{});var OT=e(Gp);hm=c(OT,"compiled"),OT.forEach(s),mm=c(Bs," to provide "),Up=o(Bs,"CODE",{});var gT=e(Up);vm=c(gT,"low-level access to memory"),gT.forEach(s),Em=c(Bs,"."),Bs.forEach(s),Gd=u(a),Wn=o(a,"P",{});var Dp=e(Wn);_m=c(Dp,"It was developed between 1972 and 1973 by "),Mp=o(Dp,"CODE",{});var AT=e(Mp);bm=c(AT,"Dennis Ritchie"),AT.forEach(s),wm=c(Dp,`, initially to
construct utilities running on the `),qp=o(Dp,"CODE",{});var ST=e(qp);ym=c(ST,"Unix"),ST.forEach(s),Tm=c(Dp,` operating system. During the
1980s, C gradually gained popularity and became one of the most widely
used programming languages.`),Dp.forEach(s),Ud=u(a),Hn=o(a,"P",{});var Cp=e(Hn);Dm=c(Cp,`Today, the C is not as popular as it used to be, but it’s still a very
good language to begin with and understand the rules of programmation.
Moreover, it is realy `),zp=o(Cp,"CODE",{});var PT=e(zp);Cm=c(PT,"fast and light"),PT.forEach(s),Om=c(Cp,` and permit to manage the low
level datas with the `),Fp=o(Cp,"CODE",{});var RT=e(Fp);gm=c(RT,"pointers"),RT.forEach(s),Am=c(Cp,`, one thing that most of the high level
languages can’t.`),Cp.forEach(s),Md=u(a),Qs=o(a,"H3",{id:!0});var LT=e(Qs);Bt=o(LT,"A",{href:!0});var IT=e(Bt);Sm=c(IT,"Evolution toward C++"),IT.forEach(s),LT.forEach(s),qd=u(a),mn=o(a,"P",{});var xs=e(mn);Pm=c(xs,"C++ was developped in 1979 by "),Vp=o(xs,"CODE",{});var BT=e(Vp);Rm=c(BT,"Bjarne Stroustrup"),BT.forEach(s),Lm=c(xs,`. It was firstly named
`),Qp=o(xs,"CODE",{});var xT=e(Qp);Im=c(xT,"C with Classes"),xT.forEach(s),Bm=c(xs,` by it’s creator, then renamed in 1983. It is an
evolution toward an more `),jp=o(xs,"CODE",{});var NT=e(jp);xm=c(NT,"Object Oriented programming language"),NT.forEach(s),Nm=c(xs,`, that it
implements with Classes, Inheritance and many others functionnalities.`),xs.forEach(s),zd=u(a),Gn=o(a,"P",{});var Op=e(Gn);Wm=c(Op,"The current version of it is "),Kp=o(Op,"CODE",{});var WT=e(Kp);Hm=c(WT,"C++17"),WT.forEach(s),Gm=c(Op,` (2017). A new one is standardized
by the ISO every 3 years since 2011, the next versions is `),Yp=o(Op,"CODE",{});var HT=e(Yp);Um=c(HT,"C++20"),HT.forEach(s),Mm=c(Op,`,
already released but not every functionnality are supported yet on the
compilators.`),Op.forEach(s),Fd=u(a),js=o(a,"H2",{id:!0});var GT=e(js);xt=o(GT,"A",{href:!0});var UT=e(xt);qm=c(UT,"Programming in C"),UT.forEach(s),GT.forEach(s),Vd=u(a),Ks=o(a,"H3",{id:!0});var MT=e(Ks);Nt=o(MT,"A",{href:!0});var qT=e(Nt);zm=c(qT,"First Program : helloworld.c"),qT.forEach(s),MT.forEach(s),Qd=u(a),Ys=o(a,"PRE",{class:!0});var iI=e(Ys);iI.forEach(s),jd=u(a),d=o(a,"P",{});var f=e(d);Fm=c(f,"This file is a simple "),Xp=o(f,"CODE",{});var zT=e(Xp);Vm=c(zT,".txt file"),zT.forEach(s),Qm=c(f,", I just edited the "),Jp=o(f,"STRONG",{});var FT=e(Jp);jm=c(FT,"extension"),FT.forEach(s),Km=c(f,`. Like
you can see, it is `),Zp=o(f,"CODE",{});var VT=e(Zp);Ym=c(VT,".c"),VT.forEach(s),Xm=c(f," for the base language, and "),$p=o(f,"CODE",{});var QT=e($p);Jm=c(QT,".cpp"),QT.forEach(s),Zm=c(f,` for C++, but
these are not the only ones that exist, there are many others, like `),nc=o(f,"CODE",{});var jT=e(nc);$m=c(jT,".h"),jT.forEach(s),n2=c(f,`
and `),sc=o(f,"CODE",{});var KT=e(sc);s2=c(KT,".hpp"),KT.forEach(s),a2=c(f," for the "),ac=o(f,"STRONG",{});var YT=e(ac);t2=c(YT,"header files"),YT.forEach(s),o2=c(f,", "),tc=o(f,"CODE",{});var XT=e(tc);e2=c(XT,".cuh"),XT.forEach(s),p2=c(f," and "),oc=o(f,"CODE",{});var JT=e(oc);c2=c(JT,".cu"),JT.forEach(s),l2=c(f," for CUDA..."),f.forEach(s),Kd=u(a),x=o(a,"P",{});var wn=e(x);u2=c(wn,"To have your program working, you’ll have to "),ec=o(wn,"STRONG",{});var ZT=e(ec);r2=c(ZT,"build the file"),ZT.forEach(s),i2=c(wn,`: To put
it simply, we get the `),pc=o(wn,"CODE",{});var $T=e(pc);k2=c($T,"source code"),$T.forEach(s),d2=c(wn,` (helloworld.c) and put it into a
`),cc=o(wn,"CODE",{});var nD=e(cc);f2=c(nD,"compiler"),nD.forEach(s),h2=c(wn,` with the right settings and dependancies, and this compiler
output and `),lc=o(wn,"CODE",{});var sD=e(lc);m2=c(sD,"executable"),sD.forEach(s),v2=c(wn,` (helloworld.exe) that you can run from your
machine. We will use the `),uc=o(wn,"CODE",{});var aD=e(uc);E2=c(aD,"command line"),aD.forEach(s),_2=c(wn,` to build and run this file,
it’s realy easy.`),wn.forEach(s),Yd=u(a),Xs=o(a,"H3",{id:!0});var tD=e(Xs);Wt=o(tD,"A",{href:!0});var oD=e(Wt);b2=c(oD,"Compiling"),oD.forEach(s),tD.forEach(s),Xd=u(a),vn=o(a,"P",{});var Ns=e(vn);w2=c(Ns,`But first of all, you will need a compiler. That’s a piece of software
that transform your file from `),rc=o(Ns,"CODE",{});var eD=e(rc);y2=c(eD,"readable instructions"),eD.forEach(s),T2=c(Ns,` (in english) into
a language that your machine can understand: `),ic=o(Ns,"CODE",{});var pD=e(ic);D2=c(pD,"binaries"),pD.forEach(s),C2=c(Ns,` (0 and 1),
that’s what an `),kc=o(Ns,"CODE",{});var cD=e(kc);O2=c(cD,".exe"),cD.forEach(s),g2=c(Ns,` file is (if you open it with and text editor, you
will see some stranges charaters).`),Ns.forEach(s),Jd=u(a),os=o(a,"P",{});var fh=e(os);A2=c(fh,"Many C compiler exists, ("),Js=o(fh,"A",{href:!0,rel:!0});var lD=e(Js);S2=c(lD,"See all"),lD.forEach(s),P2=c(fh,")"),fh.forEach(s),Zd=u(a),Ht=o(a,"P",{});var uD=e(Ht);R2=c(uD,"I recommand these ones:"),uD.forEach(s),$d=u(a),es=o(a,"UL",{});var hh=e(es);Gt=o(hh,"LI",{});var l9=e(Gt);L2=c(l9,"GCC (from GNU, Open sources): "),Zs=o(l9,"A",{href:!0,rel:!0});var rD=e(Zs);I2=c(rD,"Download GCC from GNU"),rD.forEach(s),l9.forEach(s),B2=u(hh),Ut=o(hh,"LI",{});var u9=e(Ut);x2=c(u9,"MSVC (from Microsoft Visual Studio): "),$s=o(u9,"A",{href:!0,rel:!0});var iD=e($s);N2=c(iD,"Download Visual Studio"),iD.forEach(s),u9.forEach(s),hh.forEach(s),nf=u(a),fn=o(a,"P",{});var as=e(fn);W2=c(as,"For this example, I’m using "),Mt=o(as,"A",{href:!0});var kD=e(Mt);H2=c(kD,"GCC 10.0.1"),kD.forEach(s),G2=c(as,", the base "),dc=o(as,"CODE",{});var dD=e(dc);U2=c(dD,"command line"),dD.forEach(s),M2=c(as," from "),fc=o(as,"STRONG",{});var fD=e(fc);q2=c(fD,"Windows 10"),fD.forEach(s),z2=c(as," and the text editor "),na=o(as,"A",{href:!0,rel:!0});var hD=e(na);F2=c(hD,"Sublime Text 3"),hD.forEach(s),as.forEach(s),sf=u(a),ps=o(a,"BLOCKQUOTE",{});var mh=e(ps);hc=o(mh,"P",{});var mD=e(hc);V2=c(mD,"I recommand to install GCC from MinGW instead of compiling it yourself."),mD.forEach(s),Q2=u(mh),qt=o(mh,"P",{});var r9=e(qt);j2=c(r9,"you will find explanations on how to proceed "),sa=o(r9,"A",{href:!0,rel:!0});var vD=e(sa);K2=c(vD,"here"),vD.forEach(s),r9.forEach(s),mh.forEach(s),af=u(a),aa=o(a,"H4",{id:!0});var ED=e(aa);zt=o(ED,"A",{href:!0});var _D=e(zt);Y2=c(_D,"Setup GCC and compiling a basic program"),_D.forEach(s),ED.forEach(s),tf=u(a),Un=o(a,"OL",{});var gp=e(Un);ta=o(gp,"LI",{});var vh=e(ta);Rn=o(vh,"P",{});var Ws=e(Rn);X2=c(Ws,"If you are on windows, you can press "),mc=o(Ws,"CODE",{});var bD=e(mc);J2=c(bD,"Windows"),bD.forEach(s),Z2=c(Ws," + "),vc=o(Ws,"CODE",{});var wD=e(vc);$2=c(wD,"Q"),wD.forEach(s),nv=c(Ws," then type "),Ec=o(Ws,"CODE",{});var yD=e(Ec);sv=c(yD,"cmd"),yD.forEach(s),av=c(Ws," to open the command line."),Ws.forEach(s),tv=u(vh),Ln=o(vh,"OL",{});var Hs=e(Ln);_c=o(Hs,"LI",{});var TD=e(_c);cs=o(TD,"P",{});var Id=e(cs);ov=c(Id,"Open it and try to type "),bc=o(Id,"CODE",{});var DD=e(bc);ev=c(DD,"gcc"),DD.forEach(s),pv=c(Id," and press "),wc=o(Id,"CODE",{});var CD=e(wc);cv=c(CD,"Enter"),CD.forEach(s),Id.forEach(s),TD.forEach(s),lv=u(Hs),yc=o(Hs,"LI",{});var OD=e(yc);oa=o(OD,"P",{});var Eh=e(oa);uv=c(Eh,"If you have a message that look like that: "),Tc=o(Eh,"CODE",{});var gD=e(Tc);rv=c(gD,"'gcc' is not recognised as an internal command"),gD.forEach(s),iv=c(Eh,", make sure that you downloaded GCC and go to the next step: We will add GCC to the environment variables so the system can find it."),Eh.forEach(s),OD.forEach(s),kv=u(Hs),ea=o(Hs,"LI",{});var _h=e(ea);Dc=o(_h,"P",{});var AD=e(Dc);dv=c(AD,"The system need to know where the compiler is to understand that you call it from the command line."),AD.forEach(s),fv=u(_h),In=o(_h,"OL",{});var Gs=e(In);Cc=o(Gs,"LI",{});var SD=e(Cc);En=o(SD,"P",{});var ts=e(En);hv=c(ts,"Press "),Oc=o(ts,"CODE",{});var PD=e(Oc);mv=c(PD,"Windows"),PD.forEach(s),vv=c(ts," + "),gc=o(ts,"CODE",{});var RD=e(gc);Ev=c(RD,"Q"),RD.forEach(s),_v=c(ts," then type "),Ac=o(ts,"CODE",{});var LD=e(Ac);bv=c(LD,"env"),LD.forEach(s),wv=c(ts," and open "),Sc=o(ts,"CODE",{});var ID=e(Sc);yv=c(ID,"Edit the system environment variables"),ID.forEach(s),ts.forEach(s),SD.forEach(s),Tv=u(Gs),Pc=o(Gs,"LI",{});var BD=e(Pc);pa=o(BD,"P",{});var bh=e(pa);Dv=c(bh,"Click on the "),Rc=o(bh,"CODE",{});var xD=e(Rc);Cv=c(xD,"Environment variables"),xD.forEach(s),Ov=c(bh," button"),bh.forEach(s),BD.forEach(s),gv=u(Gs),Lc=o(Gs,"LI",{});var ND=e(Lc);ls=o(ND,"P",{});var Bd=e(ls);Av=c(Bd,"Select "),Ic=o(Bd,"CODE",{});var WD=e(Ic);Sv=c(WD,"Path"),WD.forEach(s),Pv=c(Bd," and click on "),Bc=o(Bd,"CODE",{});var HD=e(Bc);Rv=c(HD,"Edit"),HD.forEach(s),Bd.forEach(s),ND.forEach(s),Lv=u(Gs),xc=o(Gs,"LI",{});var GD=e(xc);$n=o(GD,"P",{});var Ap=e($n);Iv=c(Ap,"Finally, click on "),Nc=o(Ap,"CODE",{});var UD=e(Nc);Bv=c(UD,"New"),UD.forEach(s),xv=c(Ap," and paste the link to GCC (ex: "),Wc=o(Ap,"CODE",{});var MD=e(Wc);Nv=c(MD,"C:\\MinGW\\bin"),MD.forEach(s),Wv=c(Ap,")"),Ap.forEach(s),GD.forEach(s),Gs.forEach(s),_h.forEach(s),Hv=u(Hs),Hc=o(Hs,"LI",{});var qD=e(Hc);us=o(qD,"P",{});var xd=e(us);Gv=c(xd,"Open a new command and type "),Gc=o(xd,"CODE",{});var zD=e(Gc);Uv=c(zD,"gcc"),zD.forEach(s),Mv=c(xd,", now it should work and diplay that message: "),Uc=o(xd,"CODE",{});var FD=e(Uc);qv=c(FD,"gcc: fatal error: no input files. compilation terminated."),FD.forEach(s),xd.forEach(s),qD.forEach(s),Hs.forEach(s),vh.forEach(s),zv=u(gp),ca=o(gp,"LI",{});var wh=e(ca);Ft=o(wh,"P",{});var i9=e(Ft);Fv=c(i9,"Now we will compile the file "),Mc=o(i9,"CODE",{});var VD=e(Mc);Vv=c(VD,"helloworld.c"),VD.forEach(s),i9.forEach(s),Qv=u(wh),Bn=o(wh,"OL",{});var Us=e(Bn);qc=o(Us,"LI",{});var QD=e(qc);zc=o(QD,"P",{});var jD=e(zc);jv=c(jD,"Open a command in the same directory as the C file"),jD.forEach(s),QD.forEach(s),Kv=u(Us),Fc=o(Us,"LI",{});var KD=e(Fc);Vt=o(KD,"P",{});var k9=e(Vt);Yv=c(k9,"type "),Vc=o(k9,"CODE",{});var YD=e(Vc);Xv=c(YD,"gcc helloworld.c -o helloworld.exe"),YD.forEach(s),k9.forEach(s),KD.forEach(s),Jv=u(Us),Qc=o(Us,"LI",{});var XD=e(Qc);Qt=o(XD,"P",{});var d9=e(Qt);Zv=c(d9,"then "),jc=o(d9,"CODE",{});var JD=e(jc);$v=c(JD,"./helloworld.exe"),JD.forEach(s),d9.forEach(s),XD.forEach(s),nE=u(Us),Kc=o(Us,"LI",{});var ZD=e(Kc);jt=o(ZD,"P",{});var f9=e(jt);sE=c(f9,"The program will output this string: "),Yc=o(f9,"CODE",{});var $D=e(Yc);aE=c($D,"Hello, World!"),$D.forEach(s),f9.forEach(s),ZD.forEach(s),Us.forEach(s),wh.forEach(s),tE=u(gp),Xc=o(gp,"LI",{});var nC=e(Xc);xn=o(nC,"P",{});var Ms=e(xn);oE=c(Ms,"Great, you have now a "),Jc=o(Ms,"CODE",{});var sC=e(Jc);eE=c(sC,"working basis"),sC.forEach(s),pE=c(Ms," to begin your learning of the "),Zc=o(Ms,"CODE",{});var aC=e(Zc);cE=c(aC,"C"),aC.forEach(s),lE=c(Ms," and "),$c=o(Ms,"CODE",{});var tC=e($c);uE=c(tC,"C++"),tC.forEach(s),rE=c(Ms," languages."),Ms.forEach(s),nC.forEach(s),gp.forEach(s),of=u(a),la=o(a,"H4",{id:!0});var oC=e(la);Kt=o(oC,"A",{href:!0});var eC=e(Kt);iE=c(eC,"Compilator settings and flags"),eC.forEach(s),oC.forEach(s),ef=u(a),Yt=o(a,"BLOCKQUOTE",{});var pC=e(Yt);h=o(pC,"P",{});var N=e(h);kE=c(N,"You can call the compiler by "),nl=o(N,"CODE",{});var cC=e(nl);dE=c(cC,"gcc"),cC.forEach(s),fE=c(N," for the "),sl=o(N,"STRONG",{});var lC=e(sl);hE=c(lC,"C compiler"),lC.forEach(s),mE=c(N," and "),al=o(N,"CODE",{});var uC=e(al);vE=c(uC,"g++"),uC.forEach(s),EE=c(N,`
for the `),tl=o(N,"STRONG",{});var rC=e(tl);_E=c(rC,"C++ compiler"),rC.forEach(s),bE=c(N,`. I explain here the flags that I use and find
the `),ol=o(N,"STRONG",{});var iC=e(ol);wE=c(iC,"most important"),iC.forEach(s),yE=c(N,`, but you can find all the gcc flags
`),ua=o(N,"A",{href:!0,rel:!0});var kC=e(ua);TE=c(kC,"HERE"),kC.forEach(s),DE=c(N,`. If you
want, you can even create a `),el=o(N,"CODE",{});var dC=e(el);CE=c(dC,".bat"),dC.forEach(s),OE=c(N,` file to automate the command and
launch the compilations.`),N.forEach(s),pC.forEach(s),pf=u(a),Xt=o(a,"P",{});var fC=e(Xt);gE=c(fC,"Command Syntax:"),fC.forEach(s),cf=u(a),Jt=o(a,"P",{});var hC=e(Jt);pl=o(hC,"CODE",{});var mC=e(pl);AE=c(mC,"gcc [options] [source files] [object files] -o output file"),mC.forEach(s),hC.forEach(s),lf=u(a),Mn=o(a,"P",{});var Sp=e(Mn);SE=c(Sp,"If you don’t put "),cl=o(Sp,"CODE",{});var vC=e(cl);PE=c(vC,"-o output file"),vC.forEach(s),RE=c(Sp,", the output file will be "),ll=o(Sp,"CODE",{});var EC=e(ll);LE=c(EC,"a.exe"),EC.forEach(s),IE=c(Sp," per default."),Sp.forEach(s),uf=u(a),Zt=o(a,"P",{});var _C=e(Zt);BE=c(_C,"Add libraries:"),_C.forEach(s),rf=u(a),$t=o(a,"P",{});var bC=e($t);ul=o(bC,"CODE",{});var wC=e(ul);xE=c(wC,"-I %libpath%\\include -L %libpath%\\lib -l libfileA -l libfileB"),wC.forEach(s),bC.forEach(s),kf=u(a),qn=o(a,"UL",{});var Pp=e(qn);rs=o(Pp,"LI",{});var Nd=e(rs);rl=o(Nd,"CODE",{});var yC=e(rl);NE=c(yC,"-I"),yC.forEach(s),WE=c(Nd," define the include folder, generally where the headers files "),il=o(Nd,"CODE",{});var TC=e(il);HE=c(TC,".h"),TC.forEach(s),GE=c(Nd," are"),Nd.forEach(s),UE=u(Pp),no=o(Pp,"LI",{});var h9=e(no);kl=o(h9,"CODE",{});var DC=e(kl);ME=c(DC,"-L"),DC.forEach(s),qE=c(h9," define the folder where to look at the source files"),h9.forEach(s),zE=u(Pp),zn=o(Pp,"LI",{});var Pt=e(zn);dl=o(Pt,"CODE",{});var CC=e(dl);FE=c(CC,"-l"),CC.forEach(s),VE=c(Pt," define the name/link for the library to include "),fl=o(Pt,"CODE",{});var OC=e(fl);QE=c(OC,".dll"),OC.forEach(s),jE=c(Pt," if the lib is dynamically compiled, and "),hl=o(Pt,"CODE",{});var gC=e(hl);KE=c(gC,".lib"),gC.forEach(s),YE=c(Pt," if it is staticaly compiled"),Pt.forEach(s),Pp.forEach(s),df=u(a),so=o(a,"P",{});var AC=e(so);XE=c(AC,"Warnings and Errors:"),AC.forEach(s),ff=u(a),Fn=o(a,"P",{});var Rp=e(Fn);JE=c(Rp,"The "),ml=o(Rp,"STRONG",{});var SC=e(ml);ZE=c(SC,"Errors Flags"),SC.forEach(s),$E=c(Rp," begin with a "),vl=o(Rp,"CODE",{});var PC=e(vl);n_=c(PC,"-W"),PC.forEach(s),s_=c(Rp," (for Warning):"),Rp.forEach(s),hf=u(a),K=o(a,"UL",{});var Xn=e(K);ao=o(Xn,"LI",{});var m9=e(ao);El=o(m9,"CODE",{});var RC=e(El);a_=c(RC,"-w"),RC.forEach(s),t_=c(m9," disable all warnings messages, the program will keep compiling"),m9.forEach(s),o_=u(Xn),to=o(Xn,"LI",{});var v9=e(to);_l=o(v9,"CODE",{});var LC=e(_l);e_=c(LC,"-Wall"),LC.forEach(s),p_=c(v9," enables all the warnings for minors errors"),v9.forEach(s),c_=u(Xn),oo=o(Xn,"LI",{});var E9=e(oo);bl=o(E9,"CODE",{});var IC=e(bl);l_=c(IC,"-Wextra"),IC.forEach(s),u_=c(E9,` enables some extra warning flags that -Wall don’t
activate`),E9.forEach(s),r_=u(Xn),eo=o(Xn,"LI",{});var _9=e(eo);wl=o(_9,"CODE",{});var BC=e(wl);i_=c(BC,"-Werror"),BC.forEach(s),k_=c(_9," make all warnings into errors."),_9.forEach(s),d_=u(Xn),po=o(Xn,"LI",{});var b9=e(po);yl=o(b9,"CODE",{});var xC=e(yl);f_=c(xC,"-Wfatal-errors"),xC.forEach(s),h_=c(b9," abort compilation on the first error"),b9.forEach(s),Xn.forEach(s),mf=u(a),co=o(a,"P",{});var NC=e(co);m_=c(NC,"Debug Flags:"),NC.forEach(s),vf=u(a),lo=o(a,"P",{});var WC=e(lo);Tl=o(WC,"CODE",{});var HC=e(Tl);v_=c(HC,"-Wall -Wextra -Wold-style-cast -Woverloaded-virtual -Wfloat-equal -Wwrite-strings -Wpointer-arith -Wcast-qual -Wcast-align -Wconversion -Wshadow -Weffc++ -Wredundant-decls -Wdouble-promotion -Winit-self -Wswitch-default -Wswitch-enum -Wundef -Wlogical-op -Winline"),HC.forEach(s),WC.forEach(s),Ef=u(a),uo=o(a,"BLOCKQUOTE",{});var GC=e(uo);Dl=o(GC,"P",{});var UC=e(Dl);E_=c(UC,"For the Debug config, you can put all the flags to detect and display every error or unrecommanded feature of your code."),UC.forEach(s),GC.forEach(s),_f=u(a),ro=o(a,"P",{});var MC=e(ro);__=c(MC,"Release Flags"),MC.forEach(s),bf=u(a),io=o(a,"P",{});var qC=e(io);Cl=o(qC,"CODE",{});var zC=e(Cl);b_=c(zC,"-Werror -Wfatal-errors"),zC.forEach(s),qC.forEach(s),wf=u(a),ko=o(a,"BLOCKQUOTE",{});var FC=e(ko);Ol=o(FC,"P",{});var VC=e(Ol);w_=c(VC,"For the Release config, the process abort at the first error"),VC.forEach(s),FC.forEach(s),yf=u(a),Vn=o(a,"P",{});var Lp=e(Vn);y_=c(Lp,"The "),gl=o(Lp,"STRONG",{});var QC=e(gl);T_=c(QC,"Debug Flags"),QC.forEach(s),D_=c(Lp," begin with a "),Al=o(Lp,"CODE",{});var jC=e(Al);C_=c(jC,"-g"),jC.forEach(s),O_=c(Lp," (for Generate debug informations)"),Lp.forEach(s),Tf=u(a),_n=o(a,"UL",{});var qs=e(_n);fo=o(qs,"LI",{});var w9=e(fo);Sl=o(w9,"CODE",{});var KC=e(Sl);g_=c(KC,"-g0"),KC.forEach(s),A_=c(w9," no debug informations"),w9.forEach(s),S_=u(qs),ho=o(qs,"LI",{});var y9=e(ho);Pl=o(y9,"CODE",{});var YC=e(Pl);P_=c(YC,"-g1"),YC.forEach(s),R_=c(y9," minimal debug informations"),y9.forEach(s),L_=u(qs),mo=o(qs,"LI",{});var T9=e(mo);Rl=o(T9,"CODE",{});var XC=e(Rl);I_=c(XC,"-g"),XC.forEach(s),B_=c(T9," default debug informations"),T9.forEach(s),x_=u(qs),vo=o(qs,"LI",{});var D9=e(vo);Ll=o(D9,"CODE",{});var JC=e(Ll);N_=c(JC,"-g3"),JC.forEach(s),W_=c(D9," maximal debug informations"),D9.forEach(s),qs.forEach(s),Df=u(a),Eo=o(a,"BLOCKQUOTE",{});var ZC=e(Eo);ns=o(ZC,"P",{});var Ip=e(ns);H_=c(Ip,"I recommand to stay with the default value "),Il=o(Ip,"CODE",{});var $C=e(Il);G_=c($C,"-g"),$C.forEach(s),U_=c(Ip," and switch to higher level "),Bl=o(Ip,"CODE",{});var nO=e(Bl);M_=c(nO,"-g3"),nO.forEach(s),q_=c(Ip," if you have no clue on the error."),Ip.forEach(s),ZC.forEach(s),Cf=u(a),_o=o(a,"P",{});var sO=e(_o);z_=c(sO,"Optimisation:"),sO.forEach(s),Of=u(a),Qn=o(a,"P",{});var Bp=e(Qn);F_=c(Bp,"The "),xl=o(Bp,"STRONG",{});var aO=e(xl);V_=c(aO,"Optimisation Flags"),aO.forEach(s),Q_=c(Bp," begin with a "),Nl=o(Bp,"CODE",{});var tO=e(Nl);j_=c(tO,"-O"),tO.forEach(s),K_=c(Bp," (for Optimisation)"),Bp.forEach(s),gf=u(a),is=o(a,"TABLE",{});var yh=e(is);Wl=o(yh,"THEAD",{});var oO=e(Wl);H=o(oO,"TR",{});var yn=e(H);Hl=o(yn,"TH",{});var eO=e(Hl);Y_=c(eO,"Option"),eO.forEach(s),X_=u(yn),Gl=o(yn,"TH",{});var pO=e(Gl);J_=c(pO,"Optimization Level"),pO.forEach(s),Z_=u(yn),Ul=o(yn,"TH",{});var cO=e(Ul);$_=c(cO,"Execution Time"),cO.forEach(s),n3=u(yn),Ml=o(yn,"TH",{});var lO=e(Ml);s3=c(lO,"Code Size"),lO.forEach(s),a3=u(yn),ql=o(yn,"TH",{});var uO=e(ql);t3=c(uO,"Memory Usage"),uO.forEach(s),o3=u(yn),zl=o(yn,"TH",{});var rO=e(zl);e3=c(rO,"Compilation Time"),rO.forEach(s),yn.forEach(s),oO.forEach(s),p3=u(yh),G=o(yh,"TBODY",{});var Tn=e(G);U=o(Tn,"TR",{});var Dn=e(U);Fl=o(Dn,"TD",{});var iO=e(Fl);Vl=o(iO,"CODE",{});var kO=e(Vl);c3=c(kO,"-O0"),kO.forEach(s),iO.forEach(s),l3=u(Dn),Ql=o(Dn,"TD",{});var dO=e(Ql);u3=c(dO,"compilation time"),dO.forEach(s),r3=u(Dn),jl=o(Dn,"TD",{});var fO=e(jl);i3=c(fO,"+"),fO.forEach(s),k3=u(Dn),Kl=o(Dn,"TD",{});var hO=e(Kl);d3=c(hO,"+"),hO.forEach(s),f3=u(Dn),Yl=o(Dn,"TD",{});var mO=e(Yl);h3=c(mO,"-"),mO.forEach(s),m3=u(Dn),Xl=o(Dn,"TD",{});var vO=e(Xl);v3=c(vO,"-"),vO.forEach(s),Dn.forEach(s),E3=u(Tn),M=o(Tn,"TR",{});var Cn=e(M);Jl=o(Cn,"TD",{});var EO=e(Jl);Zl=o(EO,"CODE",{});var _O=e(Zl);_3=c(_O,"-O1 /-O"),_O.forEach(s),EO.forEach(s),b3=u(Cn),$l=o(Cn,"TD",{});var bO=e($l);w3=c(bO,"code size/exe time"),bO.forEach(s),y3=u(Cn),nu=o(Cn,"TD",{});var wO=e(nu);T3=c(wO,"-"),wO.forEach(s),D3=u(Cn),su=o(Cn,"TD",{});var yO=e(su);C3=c(yO,"-"),yO.forEach(s),O3=u(Cn),au=o(Cn,"TD",{});var TO=e(au);g3=c(TO,"+"),TO.forEach(s),A3=u(Cn),tu=o(Cn,"TD",{});var DO=e(tu);S3=c(DO,"+"),DO.forEach(s),Cn.forEach(s),P3=u(Tn),q=o(Tn,"TR",{});var On=e(q);ou=o(On,"TD",{});var CO=e(ou);eu=o(CO,"CODE",{});var OO=e(eu);R3=c(OO,"-O2"),OO.forEach(s),CO.forEach(s),L3=u(On),pu=o(On,"TD",{});var gO=e(pu);I3=c(gO,"code size/exe time"),gO.forEach(s),B3=u(On),cu=o(On,"TD",{});var AO=e(cu);x3=c(AO,"- -"),AO.forEach(s),N3=u(On),lu=o(On,"TD",{});var SO=e(lu);W3=c(SO,"="),SO.forEach(s),H3=u(On),uu=o(On,"TD",{});var PO=e(uu);G3=c(PO,"+"),PO.forEach(s),U3=u(On),ru=o(On,"TD",{});var RO=e(ru);M3=c(RO,"+ +"),RO.forEach(s),On.forEach(s),q3=u(Tn),z=o(Tn,"TR",{});var gn=e(z);iu=o(gn,"TD",{});var LO=e(iu);ku=o(LO,"CODE",{});var IO=e(ku);z3=c(IO,"-O3"),IO.forEach(s),LO.forEach(s),F3=u(gn),du=o(gn,"TD",{});var BO=e(du);V3=c(BO,"code size/exe time"),BO.forEach(s),Q3=u(gn),fu=o(gn,"TD",{});var xO=e(fu);j3=c(xO,"- - -"),xO.forEach(s),K3=u(gn),hu=o(gn,"TD",{});var NO=e(hu);Y3=c(NO,"="),NO.forEach(s),X3=u(gn),mu=o(gn,"TD",{});var WO=e(mu);J3=c(WO,"+"),WO.forEach(s),Z3=u(gn),vu=o(gn,"TD",{});var HO=e(vu);$3=c(HO,"+ + +"),HO.forEach(s),gn.forEach(s),nb=u(Tn),F=o(Tn,"TR",{});var An=e(F);Eu=o(An,"TD",{});var GO=e(Eu);_u=o(GO,"CODE",{});var UO=e(_u);sb=c(UO,"-Os"),UO.forEach(s),GO.forEach(s),ab=u(An),bu=o(An,"TD",{});var MO=e(bu);tb=c(MO,"code size"),MO.forEach(s),ob=u(An),wu=o(An,"TD",{});var qO=e(wu);eb=c(qO,"="),qO.forEach(s),pb=u(An),yu=o(An,"TD",{});var zO=e(yu);cb=c(zO,"-"),zO.forEach(s),lb=u(An),Tu=o(An,"TD",{});var FO=e(Tu);ub=c(FO,"="),FO.forEach(s),rb=u(An),Du=o(An,"TD",{});var VO=e(Du);ib=c(VO,"++"),VO.forEach(s),An.forEach(s),kb=u(Tn),V=o(Tn,"TR",{});var Sn=e(V);Cu=o(Sn,"TD",{});var QO=e(Cu);Ou=o(QO,"CODE",{});var jO=e(Ou);db=c(jO,"-Ofast"),jO.forEach(s),QO.forEach(s),fb=u(Sn),gu=o(Sn,"TD",{});var KO=e(gu);hb=c(KO,"imprecise fast math"),KO.forEach(s),mb=u(Sn),Au=o(Sn,"TD",{});var YO=e(Au);vb=c(YO,"- - -"),YO.forEach(s),Eb=u(Sn),Su=o(Sn,"TD",{});var XO=e(Su);_b=c(XO,"="),XO.forEach(s),bb=u(Sn),Pu=o(Sn,"TD",{});var JO=e(Pu);wb=c(JO,"+"),JO.forEach(s),yb=u(Sn),Ru=o(Sn,"TD",{});var ZO=e(Ru);Tb=c(ZO,"+ + +"),ZO.forEach(s),Sn.forEach(s),Tn.forEach(s),yh.forEach(s),Af=u(a),bo=o(a,"P",{});var $O=e(bo);wo=o($O,"EM",{});var C9=e(wo);Db=c(C9,"informations from "),ra=o(C9,"A",{href:!0,rel:!0});var ng=e(ra);Cb=c(ng,"https://www.rapidtables.com/code/linux/gcc/gcc-o.html#optimization"),ng.forEach(s),C9.forEach(s),$O.forEach(s),Sf=u(a),ia=o(a,"H3",{id:!0});var sg=e(ia);yo=o(sg,"A",{href:!0});var ag=e(yo);Ob=c(ag,"Import and use Libraries"),ag.forEach(s),sg.forEach(s),Pf=u(a),ka=o(a,"H4",{id:!0});var tg=e(ka);To=o(tg,"A",{href:!0});var og=e(To);gb=c(og,"Includes and Dependancies"),og.forEach(s),tg.forEach(s),Rf=u(a),jn=o(a,"P",{});var xp=e(jn);Ab=c(xp,"To "),Lu=o(xp,"STRONG",{});var eg=e(Lu);Sb=c(eg,"include a library"),eg.forEach(s),Pb=c(xp," we use the "),Iu=o(xp,"CODE",{});var pg=e(Iu);Rb=c(pg,"#include"),pg.forEach(s),Lb=c(xp," command."),xp.forEach(s),Lf=u(a),ks=o(a,"UL",{});var Th=e(ks);Do=o(Th,"LI",{});var O9=e(Do);Bu=o(O9,"CODE",{});var cg=e(Bu);Ib=c(cg,"#include <library.h>"),cg.forEach(s),Bb=c(O9,` when the headers folder is already linked in
the compiler`),O9.forEach(s),xb=u(Th),Co=o(Th,"LI",{});var g9=e(Co);xu=o(g9,"CODE",{});var lg=e(xu);Nb=c(lg,'#include "folder/library.h"'),lg.forEach(s),Wb=c(g9,` to search in a specific folder with
the path`),g9.forEach(s),Th.forEach(s),If=u(a),Oo=o(a,"P",{});var ug=e(Oo);Hb=c(ug,"List of the most common and used system libraries:"),ug.forEach(s),Bf=u(a),v=o(a,"UL",{});var X=e(v);da=o(X,"LI",{});var Dh=e(da);Nu=o(Dh,"STRONG",{});var rg=e(Nu);Gb=c(rg,"C"),rg.forEach(s),Ub=c(Dh," Input/Output library: "),Wu=o(Dh,"CODE",{});var ig=e(Wu);Mb=c(ig,"#include <stdio.h>"),ig.forEach(s),Dh.forEach(s),qb=u(X),fa=o(X,"LI",{});var Ch=e(fa);Hu=o(Ch,"STRONG",{});var kg=e(Hu);zb=c(kg,"C"),kg.forEach(s),Fb=c(Ch," General library: "),Gu=o(Ch,"CODE",{});var dg=e(Gu);Vb=c(dg,"#include <stdlib.h>"),dg.forEach(s),Ch.forEach(s),Qb=u(X),ha=o(X,"LI",{});var Oh=e(ha);Uu=o(Oh,"STRONG",{});var fg=e(Uu);jb=c(fg,"C"),fg.forEach(s),Kb=c(Oh," Numerics library : "),Mu=o(Oh,"CODE",{});var hg=e(Mu);Yb=c(hg,"#include <cmath.h>"),hg.forEach(s),Oh.forEach(s),Xb=u(X),ma=o(X,"LI",{});var gh=e(ma);qu=o(gh,"STRONG",{});var mg=e(qu);Jb=c(mg,"C"),mg.forEach(s),Zb=c(gh," Strings library: "),zu=o(gh,"CODE",{});var vg=e(zu);$b=c(vg,"#include <string.h>"),vg.forEach(s),gh.forEach(s),n0=u(X),va=o(X,"LI",{});var Ah=e(va);Fu=o(Ah,"STRONG",{});var Eg=e(Fu);s0=c(Eg,"C"),Eg.forEach(s),a0=c(Ah," Time library: "),Vu=o(Ah,"CODE",{});var _g=e(Vu);t0=c(_g,"#include <time.h>"),_g.forEach(s),Ah.forEach(s),o0=u(X),Ea=o(X,"LI",{});var Sh=e(Ea);Qu=o(Sh,"STRONG",{});var bg=e(Qu);e0=c(bg,"C++"),bg.forEach(s),p0=c(Sh," Time library: "),ju=o(Sh,"CODE",{});var wg=e(ju);c0=c(wg,"#include <chrono>"),wg.forEach(s),Sh.forEach(s),l0=u(X),_a=o(X,"LI",{});var Ph=e(_a);Ku=o(Ph,"STRONG",{});var yg=e(Ku);u0=c(yg,"C++"),yg.forEach(s),r0=c(Ph," Treads library: "),Yu=o(Ph,"CODE",{});var Tg=e(Yu);i0=c(Tg,"#include <thread>"),Tg.forEach(s),Ph.forEach(s),X.forEach(s),xf=u(a),go=o(a,"P",{});var Dg=e(go);Ao=o(Dg,"EM",{});var A9=e(Ao);k0=c(A9,"informations from "),ba=o(A9,"A",{href:!0,rel:!0});var Cg=e(ba);d0=c(Cg,"https://en.cppreference.com/w/cpp/header"),Cg.forEach(s),A9.forEach(s),Dg.forEach(s),Nf=u(a),wa=o(a,"H4",{id:!0});var Og=e(wa);So=o(Og,"A",{href:!0});var gg=e(So);f0=c(gg,"Namespace and utilities"),gg.forEach(s),Og.forEach(s),Wf=u(a),Kn=o(a,"P",{});var Np=e(Kn);h0=c(Np,"When you use multiple libraries, it could be some "),Xu=o(Np,"CODE",{});var Ag=e(Xu);m0=c(Ag,"conflicts"),Ag.forEach(s),v0=c(Np,` under
names between some libraries, that’s why we use `),Ju=o(Np,"CODE",{});var Sg=e(Ju);E0=c(Sg,"namespaces"),Sg.forEach(s),_0=c(Np,"."),Np.forEach(s),Hf=u(a),Po=o(a,"BLOCKQUOTE",{});var Pg=e(Po);Ro=o(Pg,"P",{});var S9=e(Ro);b0=c(S9,`“Namespaces provide a method for preventing name conflicts in large projects.”
`),ya=o(S9,"A",{href:!0,rel:!0});var Rg=e(ya);w0=c(Rg,"source"),Rg.forEach(s),S9.forEach(s),Pg.forEach(s),Gf=u(a),Ta=o(a,"P",{});var P9=e(Ta);y0=c(P9,"We can use namespaces like that: "),Zu=o(P9,"CODE",{});var Lg=e(Zu);T0=c(Lg,"sf::..."),Lg.forEach(s),P9.forEach(s),Uf=u(a),Da=o(a,"PRE",{class:!0});var kI=e(Da);kI.forEach(s),Mf=u(a),Ca=o(a,"P",{});var R9=e(Ca);D0=c(R9,"Or like that: "),$u=o(R9,"CODE",{});var Ig=e($u);C0=c(Ig,"namespace sf { ... }"),Ig.forEach(s),R9.forEach(s),qf=u(a),Oa=o(a,"PRE",{class:!0});var dI=e(Oa);dI.forEach(s),zf=u(a),ga=o(a,"P",{});var L9=e(ga);O0=c(L9,"Or even like that: "),nr=o(L9,"CODE",{});var Bg=e(nr);g0=c(Bg,"using namespace sf;"),Bg.forEach(s),L9.forEach(s),Ff=u(a),Aa=o(a,"PRE",{class:!0});var fI=e(Aa);fI.forEach(s),Vf=u(a),Lo=o(a,"BLOCKQUOTE",{});var xg=e(Lo);Yn=o(xg,"P",{});var Rt=e(Yn);sr=o(Rt,"STRONG",{});var Ng=e(sr);A0=c(Ng,"I recommand the first two methods"),Ng.forEach(s),S0=c(Rt,`, the problem with the last one is
that you `),ar=o(Rt,"CODE",{});var Wg=e(ar);P0=c(Wg,"loose all the purpose"),Wg.forEach(s),R0=c(Rt," of the namespace, and it’s "),tr=o(Rt,"CODE",{});var Hg=e(tr);L0=c(Hg,"confusing"),Hg.forEach(s),I0=c(Rt,`
when you want to use both functions from libraries that would be in
conflict, you will have to mix the third and the first method...`),Rt.forEach(s),xg.forEach(s),Qf=u(a),Sa=o(a,"H2",{id:!0});var Gg=e(Sa);Io=o(Gg,"A",{href:!0});var Ug=e(Io);B0=c(Ug,"Cheat Sheets"),Ug.forEach(s),Gg.forEach(s),jf=u(a),Pa=o(a,"H3",{id:!0});var Mg=e(Pa);Bo=o(Mg,"A",{href:!0});var qg=e(Bo);x0=c(qg,"Usefull Informations"),qg.forEach(s),Mg.forEach(s),Kf=u(a),xo=o(a,"BLOCKQUOTE",{});var zg=e(xo);No=o(zg,"P",{});var I9=e(No);N0=c(I9,"Unofficial Documentation: "),Ra=o(I9,"A",{href:!0,rel:!0});var Fg=e(Ra);W0=c(Fg,"https://en.cppreference.com/w/"),Fg.forEach(s),I9.forEach(s),zg.forEach(s),Yf=u(a),Wo=o(a,"P",{});var Vg=e(Wo);or=o(Vg,"STRONG",{});var Qg=e(or);H0=c(Qg,"About Cpp"),Qg.forEach(s),Vg.forEach(s),Xf=u(a),Y=o(a,"UL",{});var Jn=e(Y);Ho=o(Jn,"LI",{});var B9=e(Ho);er=o(B9,"STRONG",{});var jg=e(er);G0=c(jg,"Type of Language:"),jg.forEach(s),U0=c(B9," Procedural, Object-Oriented"),B9.forEach(s),M0=u(Jn),Go=o(Jn,"LI",{});var x9=e(Go);pr=o(x9,"STRONG",{});var Kg=e(pr);q0=c(Kg,"Born in:"),Kg.forEach(s),z0=c(x9," 1985"),x9.forEach(s),F0=u(Jn),Uo=o(Jn,"LI",{});var N9=e(Uo);cr=o(N9,"STRONG",{});var Yg=e(cr);V0=c(Yg,"Caracteristics:"),Yg.forEach(s),Q0=c(N9," Statically typed, low level, fast"),N9.forEach(s),j0=u(Jn),La=o(Jn,"LI",{});var Rh=e(La);lr=o(Rh,"STRONG",{});var Xg=e(lr);K0=c(Xg,"Popularity:"),Xg.forEach(s),Y0=c(Rh," 5.8% (6th) "),Ia=o(Rh,"A",{href:!0,rel:!0});var Jg=e(Ia);X0=c(Jg,"src"),Jg.forEach(s),Rh.forEach(s),J0=u(Jn),Mo=o(Jn,"LI",{});var W9=e(Mo);ur=o(W9,"STRONG",{});var Zg=e(ur);Z0=c(Zg,"Usefull for:"),Zg.forEach(s),$0=c(W9," softwares, games, embedded…"),W9.forEach(s),Jn.forEach(s),Jf=u(a),Ba=o(a,"H3",{id:!0});var $g=e(Ba);qo=o($g,"A",{href:!0});var nA=e(qo);n5=c(nA,"Basic C Cheat Sheet"),nA.forEach(s),$g.forEach(s),Zf=u(a),xa=o(a,"H4",{id:!0});var sA=e(xa);zo=o(sA,"A",{href:!0});var aA=e(zo);s5=c(aA,"Types and Variables"),aA.forEach(s),sA.forEach(s),$f=u(a),bn=o(a,"P",{});var zs=e(bn);rr=o(zs,"CODE",{});var tA=e(rr);a5=c(tA,"/s/"),tA.forEach(s),t5=c(zs," stand for "),ir=o(zs,"STRONG",{});var oA=e(ir);o5=c(oA,"Signed"),oA.forEach(s),e5=c(zs," and "),kr=o(zs,"CODE",{});var eA=e(kr);p5=c(eA,"/u/"),eA.forEach(s),c5=c(zs," for "),dr=o(zs,"STRONG",{});var pA=e(dr);l5=c(pA,"Unsigned"),pA.forEach(s),zs.forEach(s),n1=u(a),Fo=o(a,"P",{});var cA=e(Fo);fr=o(cA,"STRONG",{});var lA=e(fr);u5=c(lA,"NUMERICS"),lA.forEach(s),cA.forEach(s),s1=u(a),ds=o(a,"TABLE",{});var Lh=e(ds);hr=o(Lh,"THEAD",{});var uA=e(hr);E=o(uA,"TR",{class:!0});var J=e(E);mr=o(J,"TH",{});var rA=e(mr);r5=c(rA,"Name"),rA.forEach(s),i5=u(J),vr=o(J,"TH",{});var iA=e(vr);k5=c(iA,"Syntax"),iA.forEach(s),d5=u(J),Er=o(J,"TH",{});var kA=e(Er);f5=c(kA,"Size"),kA.forEach(s),h5=u(J),_r=o(J,"TH",{});var dA=e(_r);m5=c(dA,"Min"),dA.forEach(s),v5=u(J),br=o(J,"TH",{});var fA=e(br);E5=c(fA,"Max"),fA.forEach(s),_5=u(J),wr=o(J,"TH",{});var hA=e(wr);b5=c(hA,"Letter"),hA.forEach(s),w5=u(J),yr=o(J,"TH",{});var mA=e(yr);y5=c(mA,"Aliases"),mA.forEach(s),J.forEach(s),uA.forEach(s),T5=u(Lh),m=o(Lh,"TBODY",{});var W=e(m);w=o(W,"TR",{});var Z=e(w);Na=o(Z,"TD",{});var Ih=e(Na);D5=c(Ih,"Short "),Tr=o(Ih,"CODE",{});var vA=e(Tr);C5=c(vA,"/s/"),vA.forEach(s),O5=c(Ih," Integer"),Ih.forEach(s),g5=u(Z),Dr=o(Z,"TD",{});var EA=e(Dr);Cr=o(EA,"CODE",{});var _A=e(Cr);A5=c(_A,"short int"),_A.forEach(s),EA.forEach(s),S5=u(Z),Or=o(Z,"TD",{});var bA=e(Or);gr=o(bA,"CODE",{});var wA=e(gr);P5=c(wA,"16+ bits"),wA.forEach(s),bA.forEach(s),R5=u(Z),Vo=o(Z,"TD",{});var H9=e(Vo);L5=c(H9,"-32 768 "),fs=o(H9,"SPAN",{class:!0});var Bh=e(fs);I5=c(Bh,"(−2"),Ar=o(Bh,"SUP",{});var yA=e(Ar);B5=c(yA,"15"),yA.forEach(s),x5=c(Bh,")"),Bh.forEach(s),H9.forEach(s),N5=u(Z),Qo=o(Z,"TD",{});var G9=e(Qo);W5=c(G9,"32 767 "),hs=o(G9,"SPAN",{class:!0});var xh=e(hs);H5=c(xh,"(2"),Sr=o(xh,"SUP",{});var TA=e(Sr);G5=c(TA,"15"),TA.forEach(s),U5=c(xh,"−1)"),xh.forEach(s),G9.forEach(s),M5=u(Z),Pr=o(Z,"TD",{});var DA=e(Pr);Rr=o(DA,"CODE",{});var CA=e(Rr);q5=c(CA,"%h"),CA.forEach(s),DA.forEach(s),z5=u(Z),Wa=o(Z,"TD",{});var Nh=e(Wa);Lr=o(Nh,"CODE",{});var OA=e(Lr);F5=c(OA,"short"),OA.forEach(s),V5=u(Nh),Ir=o(Nh,"CODE",{});var gA=e(Ir);Q5=c(gA,"signed short"),gA.forEach(s),Nh.forEach(s),Z.forEach(s),j5=u(W),y=o(W,"TR",{});var $=e(y);Ha=o($,"TD",{});var Wh=e(Ha);K5=c(Wh,"Short "),Br=o(Wh,"CODE",{});var AA=e(Br);Y5=c(AA,"/u/"),AA.forEach(s),X5=c(Wh," Integer"),Wh.forEach(s),J5=u($),xr=o($,"TD",{});var SA=e(xr);Nr=o(SA,"CODE",{});var PA=e(Nr);Z5=c(PA,"unsigned short int"),PA.forEach(s),SA.forEach(s),$5=u($),Wr=o($,"TD",{});var RA=e(Wr);Hr=o(RA,"CODE",{});var LA=e(Hr);n4=c(LA,"16+ bits"),LA.forEach(s),RA.forEach(s),s4=u($),jo=o($,"TD",{});var U9=e(jo);a4=c(U9,"0 "),Ko=o(U9,"SPAN",{class:!0});var IA=e(Ko);t4=c(IA,"(0)"),IA.forEach(s),U9.forEach(s),o4=u($),Yo=o($,"TD",{});var M9=e(Yo);e4=c(M9,"65 535 "),ms=o(M9,"SPAN",{class:!0});var Hh=e(ms);p4=c(Hh,"(2"),Gr=o(Hh,"SUP",{});var BA=e(Gr);c4=c(BA,"16"),BA.forEach(s),l4=c(Hh,"−1)"),Hh.forEach(s),M9.forEach(s),u4=u($),Ur=o($,"TD",{});var xA=e(Ur);Mr=o(xA,"CODE",{});var NA=e(Mr);r4=c(NA,"%h"),NA.forEach(s),xA.forEach(s),i4=u($),Ga=o($,"TD",{});var Gh=e(Ga);qr=o(Gh,"CODE",{});var WA=e(qr);k4=c(WA,"unsigned"),WA.forEach(s),d4=u(Gh),zr=o(Gh,"CODE",{});var HA=e(zr);f4=c(HA,"short"),HA.forEach(s),Gh.forEach(s),$.forEach(s),h4=u(W),T=o(W,"TR",{});var nn=e(T);Xo=o(nn,"TD",{});var q9=e(Xo);m4=c(q9,"Integer "),Fr=o(q9,"CODE",{});var GA=e(Fr);v4=c(GA,"/s/"),GA.forEach(s),q9.forEach(s),E4=u(nn),Vr=o(nn,"TD",{});var UA=e(Vr);Qr=o(UA,"CODE",{});var MA=e(Qr);_4=c(MA,"int"),MA.forEach(s),UA.forEach(s),b4=u(nn),jr=o(nn,"TD",{});var qA=e(jr);Kr=o(qA,"CODE",{});var zA=e(Kr);w4=c(zA,"16+ bits"),zA.forEach(s),qA.forEach(s),y4=u(nn),Jo=o(nn,"TD",{});var z9=e(Jo);T4=c(z9,"-32 768 "),vs=o(z9,"SPAN",{class:!0});var Uh=e(vs);D4=c(Uh,"(−2"),Yr=o(Uh,"SUP",{});var FA=e(Yr);C4=c(FA,"15"),FA.forEach(s),O4=c(Uh,")"),Uh.forEach(s),z9.forEach(s),g4=u(nn),Zo=o(nn,"TD",{});var F9=e(Zo);A4=c(F9,"32 767 "),Es=o(F9,"SPAN",{class:!0});var Mh=e(Es);S4=c(Mh,"(2"),Xr=o(Mh,"SUP",{});var VA=e(Xr);P4=c(VA,"15"),VA.forEach(s),R4=c(Mh,"−1)"),Mh.forEach(s),F9.forEach(s),L4=u(nn),Jr=o(nn,"TD",{});var QA=e(Jr);Zr=o(QA,"CODE",{});var jA=e(Zr);I4=c(jA,"%i"),jA.forEach(s),QA.forEach(s),B4=u(nn),Ua=o(nn,"TD",{});var qh=e(Ua);$r=o(qh,"CODE",{});var KA=e($r);x4=c(KA,"signed"),KA.forEach(s),N4=u(qh),ni=o(qh,"CODE",{});var YA=e(ni);W4=c(YA,"signed int"),YA.forEach(s),qh.forEach(s),nn.forEach(s),H4=u(W),D=o(W,"TR",{});var sn=e(D);$o=o(sn,"TD",{});var V9=e($o);G4=c(V9,"Integer "),si=o(V9,"CODE",{});var XA=e(si);U4=c(XA,"/u/"),XA.forEach(s),V9.forEach(s),M4=u(sn),ai=o(sn,"TD",{});var JA=e(ai);ti=o(JA,"CODE",{});var ZA=e(ti);q4=c(ZA,"unsigned int"),ZA.forEach(s),JA.forEach(s),z4=u(sn),oi=o(sn,"TD",{});var $A=e(oi);ei=o($A,"CODE",{});var nS=e(ei);F4=c(nS,"16+ bits"),nS.forEach(s),$A.forEach(s),V4=u(sn),ne=o(sn,"TD",{});var Q9=e(ne);Q4=c(Q9,"0 "),se=o(Q9,"SPAN",{class:!0});var sS=e(se);j4=c(sS,"(0)"),sS.forEach(s),Q9.forEach(s),K4=u(sn),ae=o(sn,"TD",{});var j9=e(ae);Y4=c(j9,"65 535 "),_s=o(j9,"SPAN",{class:!0});var zh=e(_s);X4=c(zh,"(2"),pi=o(zh,"SUP",{});var aS=e(pi);J4=c(aS,"16"),aS.forEach(s),Z4=c(zh,"−1)"),zh.forEach(s),j9.forEach(s),$4=u(sn),ci=o(sn,"TD",{});var tS=e(ci);li=o(tS,"CODE",{});var oS=e(li);nw=c(oS,"%i"),oS.forEach(s),tS.forEach(s),sw=u(sn),Ma=o(sn,"TD",{});var Fh=e(Ma);ui=o(Fh,"CODE",{});var eS=e(ui);aw=c(eS,"unsigned"),eS.forEach(s),tw=u(Fh),ri=o(Fh,"CODE",{});var pS=e(ri);ow=c(pS,"unsigned int"),pS.forEach(s),Fh.forEach(s),sn.forEach(s),ew=u(W),C=o(W,"TR",{});var an=e(C);qa=o(an,"TD",{});var Vh=e(qa);pw=c(Vh,"Long "),ii=o(Vh,"CODE",{});var cS=e(ii);cw=c(cS,"/s/"),cS.forEach(s),lw=c(Vh," Integer"),Vh.forEach(s),uw=u(an),ki=o(an,"TD",{});var lS=e(ki);di=o(lS,"CODE",{});var uS=e(di);rw=c(uS,"long int"),uS.forEach(s),lS.forEach(s),iw=u(an),fi=o(an,"TD",{});var rS=e(fi);hi=o(rS,"CODE",{});var iS=e(hi);kw=c(iS,"32+ bits"),iS.forEach(s),rS.forEach(s),dw=u(an),te=o(an,"TD",{});var K9=e(te);fw=c(K9,"-2 147 483 648 "),bs=o(K9,"SPAN",{class:!0});var Qh=e(bs);hw=c(Qh,"(−2"),mi=o(Qh,"SUP",{});var kS=e(mi);mw=c(kS,"31"),kS.forEach(s),vw=c(Qh,")"),Qh.forEach(s),K9.forEach(s),Ew=u(an),oe=o(an,"TD",{});var Y9=e(oe);_w=c(Y9,"2 147 483 647 "),ws=o(Y9,"SPAN",{class:!0});var jh=e(ws);bw=c(jh,"(2"),vi=o(jh,"SUP",{});var dS=e(vi);ww=c(dS,"31"),dS.forEach(s),yw=c(jh,"−1)"),jh.forEach(s),Y9.forEach(s),Tw=u(an),Ei=o(an,"TD",{});var fS=e(Ei);_i=o(fS,"CODE",{});var hS=e(_i);Dw=c(hS,"%l"),hS.forEach(s),fS.forEach(s),Cw=u(an),bi=o(an,"TD",{});var mS=e(bi);wi=o(mS,"CODE",{});var vS=e(wi);Ow=c(vS,"signed long int"),vS.forEach(s),mS.forEach(s),an.forEach(s),gw=u(W),O=o(W,"TR",{});var tn=e(O);za=o(tn,"TD",{});var Kh=e(za);Aw=c(Kh,"Long "),yi=o(Kh,"CODE",{});var ES=e(yi);Sw=c(ES,"/u/"),ES.forEach(s),Pw=c(Kh," Integer"),Kh.forEach(s),Rw=u(tn),Ti=o(tn,"TD",{});var _S=e(Ti);Di=o(_S,"CODE",{});var bS=e(Di);Lw=c(bS,"unsigned long int"),bS.forEach(s),_S.forEach(s),Iw=u(tn),Ci=o(tn,"TD",{});var wS=e(Ci);Oi=o(wS,"CODE",{});var yS=e(Oi);Bw=c(yS,"32+ bits"),yS.forEach(s),wS.forEach(s),xw=u(tn),ee=o(tn,"TD",{});var X9=e(ee);Nw=c(X9,"0 "),pe=o(X9,"SPAN",{class:!0});var TS=e(pe);Ww=c(TS,"(0)"),TS.forEach(s),X9.forEach(s),Hw=u(tn),ce=o(tn,"TD",{});var J9=e(ce);Gw=c(J9,"4 294 967 295 "),ys=o(J9,"SPAN",{class:!0});var Yh=e(ys);Uw=c(Yh,"(2"),gi=o(Yh,"SUP",{});var DS=e(gi);Mw=c(DS,"32"),DS.forEach(s),qw=c(Yh,"−1)"),Yh.forEach(s),J9.forEach(s),zw=u(tn),Ai=o(tn,"TD",{});var CS=e(Ai);Si=o(CS,"CODE",{});var OS=e(Si);Fw=c(OS,"%l"),OS.forEach(s),CS.forEach(s),Vw=u(tn),Pi=o(tn,"TD",{});var gS=e(Pi);Ri=o(gS,"CODE",{});var AS=e(Ri);Qw=c(AS,"unsigned long"),AS.forEach(s),gS.forEach(s),tn.forEach(s),jw=u(W),g=o(W,"TR",{});var on=e(g);Fa=o(on,"TD",{});var Xh=e(Fa);Kw=c(Xh,"Long Long "),Li=o(Xh,"CODE",{});var SS=e(Li);Yw=c(SS,"/s/"),SS.forEach(s),Xw=c(Xh," Integer"),Xh.forEach(s),Jw=u(on),Ii=o(on,"TD",{});var PS=e(Ii);Bi=o(PS,"CODE",{});var RS=e(Bi);Zw=c(RS,"long long int"),RS.forEach(s),PS.forEach(s),$w=u(on),xi=o(on,"TD",{});var LS=e(xi);Ni=o(LS,"CODE",{});var IS=e(Ni);ny=c(IS,"64+ bits"),IS.forEach(s),LS.forEach(s),sy=u(on),le=o(on,"TD",{});var Z9=e(le);ay=c(Z9,"-9.223e-15 "),Ts=o(Z9,"SPAN",{class:!0});var Jh=e(Ts);ty=c(Jh,"(−2"),Wi=o(Jh,"SUP",{});var BS=e(Wi);oy=c(BS,"63"),BS.forEach(s),ey=c(Jh,")"),Jh.forEach(s),Z9.forEach(s),py=u(on),ue=o(on,"TD",{});var $9=e(ue);cy=c($9,"9.223e+15 "),Ds=o($9,"SPAN",{class:!0});var Zh=e(Ds);ly=c(Zh,"(2"),Hi=o(Zh,"SUP",{});var xS=e(Hi);uy=c(xS,"63"),xS.forEach(s),ry=c(Zh,"−1)"),Zh.forEach(s),$9.forEach(s),iy=u(on),Gi=o(on,"TD",{});var NS=e(Gi);Ui=o(NS,"CODE",{});var WS=e(Ui);ky=c(WS,"%ll"),WS.forEach(s),NS.forEach(s),dy=u(on),Mi=o(on,"TD",{});var HS=e(Mi);qi=o(HS,"CODE",{});var GS=e(qi);fy=c(GS,"signed long long"),GS.forEach(s),HS.forEach(s),on.forEach(s),hy=u(W),A=o(W,"TR",{});var en=e(A);Va=o(en,"TD",{});var $h=e(Va);my=c($h,"Long Long "),zi=o($h,"CODE",{});var US=e(zi);vy=c(US,"/u/"),US.forEach(s),Ey=c($h," Integer"),$h.forEach(s),_y=u(en),Fi=o(en,"TD",{});var MS=e(Fi);Vi=o(MS,"CODE",{});var qS=e(Vi);by=c(qS,"unsigned long long int"),qS.forEach(s),MS.forEach(s),wy=u(en),Qi=o(en,"TD",{});var zS=e(Qi);ji=o(zS,"CODE",{});var FS=e(ji);yy=c(FS,"64+ bits"),FS.forEach(s),zS.forEach(s),Ty=u(en),re=o(en,"TD",{});var nT=e(re);Dy=c(nT,"0 "),ie=o(nT,"SPAN",{class:!0});var VS=e(ie);Cy=c(VS,"(0)"),VS.forEach(s),nT.forEach(s),Oy=u(en),ke=o(en,"TD",{});var sT=e(ke);gy=c(sT,"18.446e+15 "),Cs=o(sT,"SPAN",{class:!0});var nm=e(Cs);Ay=c(nm,"(2"),Ki=o(nm,"SUP",{});var QS=e(Ki);Sy=c(QS,"64"),QS.forEach(s),Py=c(nm,"−1)"),nm.forEach(s),sT.forEach(s),Ry=u(en),Yi=o(en,"TD",{});var jS=e(Yi);Xi=o(jS,"CODE",{});var KS=e(Xi);Ly=c(KS,"%ll"),KS.forEach(s),jS.forEach(s),Iy=u(en),Ji=o(en,"TD",{});var YS=e(Ji);Zi=o(YS,"CODE",{});var XS=e(Zi);By=c(XS,"unsigned long long"),XS.forEach(s),YS.forEach(s),en.forEach(s),W.forEach(s),Lh.forEach(s),a1=u(a),de=o(a,"BLOCKQUOTE",{});var JS=e(de);$i=o(JS,"P",{});var ZS=e($i);xy=c(ZS,"Integers are not rounded they are truncated toward 0. I recommand to not use short appart if you know what you do."),ZS.forEach(s),JS.forEach(s),t1=u(a),fe=o(a,"P",{});var $S=e(fe);nk=o($S,"STRONG",{});var nP=e(nk);Ny=c(nP,"CHARS"),nP.forEach(s),$S.forEach(s),o1=u(a),Os=o(a,"TABLE",{});var sm=e(Os);sk=o(sm,"THEAD",{});var sP=e(sk);_=o(sP,"TR",{class:!0});var pn=e(_);ak=o(pn,"TH",{});var aP=e(ak);Wy=c(aP,"Name"),aP.forEach(s),Hy=u(pn),tk=o(pn,"TH",{});var tP=e(tk);Gy=c(tP,"Syntax"),tP.forEach(s),Uy=u(pn),ok=o(pn,"TH",{});var oP=e(ok);My=c(oP,"Size"),oP.forEach(s),qy=u(pn),ek=o(pn,"TH",{});var eP=e(ek);zy=c(eP,"Min"),eP.forEach(s),Fy=u(pn),pk=o(pn,"TH",{});var pP=e(pk);Vy=c(pP,"Max"),pP.forEach(s),Qy=u(pn),ck=o(pn,"TH",{});var cP=e(ck);jy=c(cP,"Letter"),cP.forEach(s),Ky=u(pn),lk=o(pn,"TH",{});var lP=e(lk);Yy=c(lP,"Aliases"),lP.forEach(s),pn.forEach(s),sP.forEach(s),Xy=u(sm),Q=o(sm,"TBODY",{});var Pn=e(Q);S=o(Pn,"TR",{});var cn=e(S);he=o(cn,"TD",{});var aT=e(he);Jy=c(aT,"Char "),uk=o(aT,"CODE",{});var uP=e(uk);Zy=c(uP,"/s/"),uP.forEach(s),aT.forEach(s),$y=u(cn),rk=o(cn,"TD",{});var rP=e(rk);ik=o(rP,"CODE",{});var iP=e(ik);n6=c(iP,"char"),iP.forEach(s),rP.forEach(s),s6=u(cn),kk=o(cn,"TD",{});var kP=e(kk);dk=o(kP,"CODE",{});var dP=e(dk);a6=c(dP,"8+ bits"),dP.forEach(s),kP.forEach(s),t6=u(cn),me=o(cn,"TD",{});var tT=e(me);o6=c(tT,"-128 "),gs=o(tT,"SPAN",{class:!0});var am=e(gs);e6=c(am,"(−2"),fk=o(am,"SUP",{});var fP=e(fk);p6=c(fP,"7"),fP.forEach(s),c6=c(am,")"),am.forEach(s),tT.forEach(s),l6=u(cn),ve=o(cn,"TD",{});var oT=e(ve);u6=c(oT,"127 "),As=o(oT,"SPAN",{class:!0});var tm=e(As);r6=c(tm,"(2"),hk=o(tm,"SUP",{});var hP=e(hk);i6=c(hP,"7"),hP.forEach(s),k6=c(tm,"−1)"),tm.forEach(s),oT.forEach(s),d6=u(cn),mk=o(cn,"TD",{});var mP=e(mk);vk=o(mP,"CODE",{});var vP=e(vk);f6=c(vP,"%hh"),vP.forEach(s),mP.forEach(s),h6=u(cn),Ek=o(cn,"TD",{});var EP=e(Ek);_k=o(EP,"CODE",{});var _P=e(_k);m6=c(_P,"signed char"),_P.forEach(s),EP.forEach(s),cn.forEach(s),v6=u(Pn),P=o(Pn,"TR",{});var ln=e(P);Ee=o(ln,"TD",{});var eT=e(Ee);E6=c(eT,"Char "),bk=o(eT,"CODE",{});var bP=e(bk);_6=c(bP,"/u/"),bP.forEach(s),eT.forEach(s),b6=u(ln),wk=o(ln,"TD",{});var wP=e(wk);yk=o(wP,"CODE",{});var yP=e(yk);w6=c(yP,"unsigned char"),yP.forEach(s),wP.forEach(s),y6=u(ln),Tk=o(ln,"TD",{});var TP=e(Tk);Dk=o(TP,"CODE",{});var DP=e(Dk);T6=c(DP,"8+ bits"),DP.forEach(s),TP.forEach(s),D6=u(ln),_e=o(ln,"TD",{});var pT=e(_e);C6=c(pT,"0 "),be=o(pT,"SPAN",{class:!0});var CP=e(be);O6=c(CP,"(0)"),CP.forEach(s),pT.forEach(s),g6=u(ln),we=o(ln,"TD",{});var cT=e(we);A6=c(cT,"255 "),Ss=o(cT,"SPAN",{class:!0});var om=e(Ss);S6=c(om,"(2"),Ck=o(om,"SUP",{});var OP=e(Ck);P6=c(OP,"8"),OP.forEach(s),R6=c(om,"−1)"),om.forEach(s),cT.forEach(s),L6=u(ln),Ok=o(ln,"TD",{});var gP=e(Ok);gk=o(gP,"CODE",{});var AP=e(gk);I6=c(AP,"%hh"),AP.forEach(s),gP.forEach(s),B6=u(ln),e1=o(ln,"TD",{}),e(e1).forEach(s),ln.forEach(s),x6=u(Pn),R=o(Pn,"TR",{});var un=e(R);ye=o(un,"TD",{});var lT=e(ye);N6=c(lT,"char8_t "),Ak=o(lT,"CODE",{});var SP=e(Ak);W6=c(SP,"/u/"),SP.forEach(s),lT.forEach(s),H6=u(un),Sk=o(un,"TD",{});var PP=e(Sk);Pk=o(PP,"CODE",{});var RP=e(Pk);G6=c(RP,"unsigned char"),RP.forEach(s),PP.forEach(s),U6=u(un),Rk=o(un,"TD",{});var LP=e(Rk);Lk=o(LP,"CODE",{});var IP=e(Lk);M6=c(IP,"8+ bits"),IP.forEach(s),LP.forEach(s),q6=u(un),Te=o(un,"TD",{});var uT=e(Te);z6=c(uT,"0 "),De=o(uT,"SPAN",{class:!0});var BP=e(De);F6=c(BP,"(0)"),BP.forEach(s),uT.forEach(s),V6=u(un),Ce=o(un,"TD",{});var rT=e(Ce);Q6=c(rT,"255 "),Ps=o(rT,"SPAN",{class:!0});var em=e(Ps);j6=c(em,"(2"),Ik=o(em,"SUP",{});var xP=e(Ik);K6=c(xP,"8"),xP.forEach(s),Y6=c(em,"−1)"),em.forEach(s),rT.forEach(s),X6=u(un),Bk=o(un,"TD",{});var NP=e(Bk);xk=o(NP,"CODE",{});var WP=e(xk);J6=c(WP,"%hh"),WP.forEach(s),NP.forEach(s),Z6=u(un),p1=o(un,"TD",{}),e(p1).forEach(s),un.forEach(s),$6=u(Pn),L=o(Pn,"TR",{});var rn=e(L);Oe=o(rn,"TD",{});var iT=e(Oe);n7=c(iT,"char16_t "),Nk=o(iT,"CODE",{});var HP=e(Nk);s7=c(HP,"/u/"),HP.forEach(s),iT.forEach(s),a7=u(rn),Wk=o(rn,"TD",{});var GP=e(Wk);Hk=o(GP,"CODE",{});var UP=e(Hk);t7=c(UP,"unsigned char"),UP.forEach(s),GP.forEach(s),o7=u(rn),Gk=o(rn,"TD",{});var MP=e(Gk);Uk=o(MP,"CODE",{});var qP=e(Uk);e7=c(qP,"8+ bits"),qP.forEach(s),MP.forEach(s),p7=u(rn),ge=o(rn,"TD",{});var kT=e(ge);c7=c(kT,"0 "),Ae=o(kT,"SPAN",{class:!0});var zP=e(Ae);l7=c(zP,"(0)"),zP.forEach(s),kT.forEach(s),u7=u(rn),Se=o(rn,"TD",{});var dT=e(Se);r7=c(dT,"255 "),Rs=o(dT,"SPAN",{class:!0});var pm=e(Rs);i7=c(pm,"(2"),Mk=o(pm,"SUP",{});var FP=e(Mk);k7=c(FP,"8"),FP.forEach(s),d7=c(pm,"−1)"),pm.forEach(s),dT.forEach(s),f7=u(rn),qk=o(rn,"TD",{});var VP=e(qk);zk=o(VP,"CODE",{});var QP=e(zk);h7=c(QP,"%hh"),QP.forEach(s),VP.forEach(s),m7=u(rn),c1=o(rn,"TD",{}),e(c1).forEach(s),rn.forEach(s),v7=u(Pn),I=o(Pn,"TR",{});var kn=e(I);Pe=o(kn,"TD",{});var fT=e(Pe);E7=c(fT,"char32_t "),Fk=o(fT,"CODE",{});var jP=e(Fk);_7=c(jP,"/u/"),jP.forEach(s),fT.forEach(s),b7=u(kn),Vk=o(kn,"TD",{});var KP=e(Vk);Qk=o(KP,"CODE",{});var YP=e(Qk);w7=c(YP,"unsigned char"),YP.forEach(s),KP.forEach(s),y7=u(kn),jk=o(kn,"TD",{});var XP=e(jk);Kk=o(XP,"CODE",{});var JP=e(Kk);T7=c(JP,"8+ bits"),JP.forEach(s),XP.forEach(s),D7=u(kn),Re=o(kn,"TD",{});var hT=e(Re);C7=c(hT,"0 "),Le=o(hT,"SPAN",{class:!0});var ZP=e(Le);O7=c(ZP,"(0)"),ZP.forEach(s),hT.forEach(s),g7=u(kn),Ie=o(kn,"TD",{});var mT=e(Ie);A7=c(mT,"255 "),Ls=o(mT,"SPAN",{class:!0});var cm=e(Ls);S7=c(cm,"(2"),Yk=o(cm,"SUP",{});var $P=e(Yk);P7=c($P,"8"),$P.forEach(s),R7=c(cm,"−1)"),cm.forEach(s),mT.forEach(s),L7=u(kn),Xk=o(kn,"TD",{});var nR=e(Xk);Jk=o(nR,"CODE",{});var sR=e(Jk);I7=c(sR,"%hh"),sR.forEach(s),nR.forEach(s),B7=u(kn),l1=o(kn,"TD",{}),e(l1).forEach(s),kn.forEach(s),x7=u(Pn),B=o(Pn,"TR",{});var dn=e(B);Be=o(dn,"TD",{});var vT=e(Be);N7=c(vT,"wchar_t "),Zk=o(vT,"CODE",{});var aR=e(Zk);W7=c(aR,"/u/"),aR.forEach(s),vT.forEach(s),H7=u(dn),$k=o(dn,"TD",{});var tR=e($k);nd=o(tR,"CODE",{});var oR=e(nd);G7=c(oR,"unsigned char"),oR.forEach(s),tR.forEach(s),U7=u(dn),sd=o(dn,"TD",{});var eR=e(sd);ad=o(eR,"CODE",{});var pR=e(ad);M7=c(pR,"8+ bits"),pR.forEach(s),eR.forEach(s),q7=u(dn),xe=o(dn,"TD",{});var ET=e(xe);z7=c(ET,"0 "),Ne=o(ET,"SPAN",{class:!0});var cR=e(Ne);F7=c(cR,"(0)"),cR.forEach(s),ET.forEach(s),V7=u(dn),We=o(dn,"TD",{});var _T=e(We);Q7=c(_T,"255 "),Is=o(_T,"SPAN",{class:!0});var lm=e(Is);j7=c(lm,"(2"),td=o(lm,"SUP",{});var lR=e(td);K7=c(lR,"8"),lR.forEach(s),Y7=c(lm,"−1)"),lm.forEach(s),_T.forEach(s),X7=u(dn),od=o(dn,"TD",{});var uR=e(od);ed=o(uR,"CODE",{});var rR=e(ed);J7=c(rR,"%hh"),rR.forEach(s),uR.forEach(s),Z7=u(dn),u1=o(dn,"TD",{}),e(u1).forEach(s),dn.forEach(s),Pn.forEach(s),sm.forEach(s),r1=u(a),He=o(a,"BLOCKQUOTE",{});var iR=e(He);pd=o(iR,"P",{});var kR=e(pd);$7=c(kR,"Chars are just integers linked to an characted by the ascii table."),kR.forEach(s),iR.forEach(s),i1=u(a),Ge=o(a,"P",{});var dR=e(Ge);Ue=o(dR,"EM",{});var bT=e(Ue);n8=c(bT,"informations from "),Qa=o(bT,"A",{href:!0,rel:!0});var fR=e(Qa);s8=c(fR,"https://fr.cppreference.com/w/cpp/language/ascii"),fR.forEach(s),bT.forEach(s),dR.forEach(s),k1=u(a),ja=o(a,"H4",{id:!0});var hR=e(ja);Me=o(hR,"A",{href:!0});var mR=e(Me);a8=c(mR,"Input Output"),mR.forEach(s),hR.forEach(s),d1=u(a),Ka=o(a,"PRE",{class:!0});var hI=e(Ka);hI.forEach(s),f1=u(a),qe=o(a,"P",{});var vR=e(qe);cd=o(vR,"STRONG",{});var ER=e(cd);t8=c(ER,"output"),ER.forEach(s),vR.forEach(s),h1=u(a),Ya=o(a,"PRE",{class:!0});var mI=e(Ya);mI.forEach(s),m1=u(a),ze=o(a,"P",{});var _R=e(ze);o8=c(_R,"Note:"),_R.forEach(s),v1=u(a),Fe=o(a,"BLOCKQUOTE",{});var bR=e(Fe);Nn=o(bR,"P",{});var Fs=e(Nn);e8=c(Fs,"If you input "),ld=o(Fs,"CODE",{});var wR=e(ld);p8=c(wR,"a"),wR.forEach(s),c8=c(Fs," you will have an output of "),ud=o(Fs,"CODE",{});var yR=e(ud);l8=c(yR,"4194432"),yR.forEach(s),u8=c(Fs,`. That’s because
scanf don’t convert the string to an int. When the value is not in
the right format, it will get the `),rd=o(Fs,"CODE",{});var TR=e(rd);r8=c(TR,"memory location"),TR.forEach(s),i8=c(Fs,"."),Fs.forEach(s),bR.forEach(s),E1=u(a),Ve=o(a,"BLOCKQUOTE",{});var DR=e(Ve);b=o(DR,"P",{});var j=e(b);k8=c(j,"For the boundaries, an input of "),id=o(j,"CODE",{});var CR=e(id);d8=c(CR,"2147483647"),CR.forEach(s),f8=c(j," will output "),kd=o(j,"CODE",{});var OR=e(kd);h8=c(OR,"2147483647"),OR.forEach(s),m8=c(j,`,
but if you try to enter a value of `),dd=o(j,"CODE",{});var gR=e(dd);v8=c(gR,"2147483648"),gR.forEach(s),E8=c(j,` you will have an
output of `),fd=o(j,"CODE",{});var AR=e(fd);_8=c(AR,"-2147483648"),AR.forEach(s),b8=c(j,`. Thats because the signed value is greater
than `),Qe=o(j,"SPAN",{class:!0});var vI=e(Qe);vI.forEach(s),w8=c(j,". The default int boundaries are "),hd=o(j,"CODE",{});var SR=e(hd);y8=c(SR,"32bits"),SR.forEach(s),T8=c(j,` on my
`),md=o(j,"CODE",{});var PR=e(md);D8=c(PR,"x64 processor"),PR.forEach(s),j.forEach(s),DR.forEach(s),_1=u(a),Xa=o(a,"H4",{id:!0});var RR=e(Xa);je=o(RR,"A",{href:!0});var LR=e(je);C8=c(LR,"Variables, Tests and Loops"),LR.forEach(s),RR.forEach(s),b1=u(a),Ke=o(a,"P",{});var IR=e(Ke);vd=o(IR,"STRONG",{});var BR=e(vd);O8=c(BR,"VARIABLES DECLARATIONS"),BR.forEach(s),IR.forEach(s),w1=u(a),Ja=o(a,"PRE",{class:!0});var EI=e(Ja);EI.forEach(s),y1=u(a),Ye=o(a,"P",{});var xR=e(Ye);Ed=o(xR,"STRONG",{});var NR=e(Ed);g8=c(NR,"TESTS"),NR.forEach(s),xR.forEach(s),T1=u(a),Za=o(a,"PRE",{class:!0});var _I=e(Za);_I.forEach(s),D1=u(a),Xe=o(a,"P",{});var WR=e(Xe);_d=o(WR,"STRONG",{});var HR=e(_d);A8=c(HR,"SWITCH"),HR.forEach(s),WR.forEach(s),C1=u(a),$a=o(a,"PRE",{class:!0});var bI=e($a);bI.forEach(s),O1=u(a),Je=o(a,"P",{});var GR=e(Je);bd=o(GR,"STRONG",{});var UR=e(bd);S8=c(UR,"LOOPS"),UR.forEach(s),GR.forEach(s),g1=u(a),nt=o(a,"PRE",{class:!0});var wI=e(nt);wI.forEach(s),A1=u(a),Ze=o(a,"BLOCKQUOTE",{});var MR=e(Ze);st=o(MR,"P",{});var um=e(st);P8=c(um,"You can use "),wd=o(um,"CODE",{});var qR=e(wd);R8=c(qR,"break;"),qR.forEach(s),L8=c(um," to stop a loop."),um.forEach(s),MR.forEach(s),S1=u(a),at=o(a,"H4",{id:!0});var zR=e(at);$e=o(zR,"A",{href:!0});var FR=e($e);I8=c(FR,"Random numbers"),FR.forEach(s),zR.forEach(s),P1=u(a),np=o(a,"P",{});var VR=e(np);yd=o(VR,"STRONG",{});var QR=e(yd);B8=c(QR,"RANDOM"),QR.forEach(s),VR.forEach(s),R1=u(a),tt=o(a,"PRE",{class:!0});var yI=e(tt);yI.forEach(s),L1=u(a),sp=o(a,"BLOCKQUOTE",{});var jR=e(sp);ss=o(jR,"P",{});var Wp=e(ss);x8=c(Wp,"You can see the max of "),Td=o(Wp,"CODE",{});var KR=e(Td);N8=c(KR,"rand()"),KR.forEach(s),W8=c(Wp," with "),Dd=o(Wp,"CODE",{});var YR=e(Dd);H8=c(YR,"RAND_MAX"),YR.forEach(s),G8=c(Wp," (32767+). For betters randoms number you can use the BOOST library."),Wp.forEach(s),jR.forEach(s),I1=u(a),ot=o(a,"H4",{id:!0});var XR=e(ot);ap=o(XR,"A",{href:!0});var JR=e(ap);U8=c(JR,"Arrays"),JR.forEach(s),XR.forEach(s),B1=u(a),tp=o(a,"P",{});var ZR=e(tp);Cd=o(ZR,"STRONG",{});var $R=e(Cd);M8=c($R,"ARRAYS"),$R.forEach(s),ZR.forEach(s),x1=u(a),et=o(a,"PRE",{class:!0});var TI=e(et);TI.forEach(s),N1=u(a),op=o(a,"P",{});var nL=e(op);Od=o(nL,"STRONG",{});var sL=e(Od);q8=c(sL,"STRINGS"),sL.forEach(s),nL.forEach(s),W1=u(a),pt=o(a,"PRE",{class:!0});var DI=e(pt);DI.forEach(s),H1=u(a),ct=o(a,"PRE",{class:!0});var CI=e(ct);CI.forEach(s),G1=u(a),lt=o(a,"H4",{id:!0});var aL=e(lt);ep=o(aL,"A",{href:!0});var tL=e(ep);z8=c(tL,"Functions"),tL.forEach(s),aL.forEach(s),U1=u(a),ut=o(a,"PRE",{class:!0});var OI=e(ut);OI.forEach(s),M1=u(a),rt=o(a,"H4",{id:!0});var oL=e(rt);pp=o(oL,"A",{href:!0});var eL=e(pp);F8=c(eL,"Structures"),eL.forEach(s),oL.forEach(s),q1=u(a),cp=o(a,"P",{});var pL=e(cp);gd=o(pL,"STRONG",{});var cL=e(gd);V8=c(cL,"RECTANGLE STRUCTURE EXAMPLE"),cL.forEach(s),pL.forEach(s),z1=u(a),it=o(a,"PRE",{class:!0});var gI=e(it);gI.forEach(s),F1=u(a),lp=o(a,"P",{});var lL=e(lp);Q8=c(lL,"output"),lL.forEach(s),V1=u(a),kt=o(a,"PRE",{class:!0});var AI=e(kt);AI.forEach(s),Q1=u(a),up=o(a,"BLOCKQUOTE",{});var uL=e(up);Ad=o(uL,"P",{});var rL=e(Ad);j8=c(rL,"Take care of the order in which you declare your structure fields, because it will impact the size of the final data."),rL.forEach(s),uL.forEach(s),j1=u(a),rp=o(a,"P",{});var iL=e(rp);Sd=o(iL,"STRONG",{});var kL=e(Sd);K8=c(kL,"For instance…"),kL.forEach(s),iL.forEach(s),K1=u(a),dt=o(a,"PRE",{class:!0});var SI=e(dt);SI.forEach(s),Y1=u(a),ft=o(a,"H4",{id:!0});var dL=e(ft);ip=o(dL,"A",{href:!0});var fL=e(ip);Y8=c(fL,"Pointers and Smart pointers"),fL.forEach(s),dL.forEach(s),X1=u(a),ht=o(a,"PRE",{class:!0});var PI=e(ht);PI.forEach(s),J1=u(a),mt=o(a,"H3",{id:!0});var hL=e(mt);kp=o(hL,"A",{href:!0});var mL=e(kp);X8=c(mL,"Basic C++ Cheat Sheet"),mL.forEach(s),hL.forEach(s),Z1=u(a),vt=o(a,"H4",{id:!0});var vL=e(vt);dp=o(vL,"A",{href:!0});var EL=e(dp);J8=c(EL,"Macros"),EL.forEach(s),vL.forEach(s),$1=u(a),Et=o(a,"PRE",{class:!0});var RI=e(Et);RI.forEach(s),nh=u(a),_t=o(a,"H4",{id:!0});var _L=e(_t);fp=o(_L,"A",{href:!0});var bL=e(fp);Z8=c(bL,"Arrays"),bL.forEach(s),_L.forEach(s),sh=u(a),bt=o(a,"PRE",{class:!0});var LI=e(bt);LI.forEach(s),ah=u(a),wt=o(a,"H4",{id:!0});var wL=e(wt);hp=o(wL,"A",{href:!0});var yL=e(hp);$8=c(yL,"Inheritances"),yL.forEach(s),wL.forEach(s),th=u(a),yt=o(a,"PRE",{class:!0});var II=e(yt);II.forEach(s),oh=u(a),Tt=o(a,"H4",{id:!0});var TL=e(Tt);mp=o(TL,"A",{href:!0});var DL=e(mp);n9=c(DL,"Threads"),DL.forEach(s),TL.forEach(s),eh=u(a),Dt=o(a,"PRE",{class:!0});var BI=e(Dt);BI.forEach(s),ph=u(a),Ct=o(a,"H2",{id:!0});var CL=e(Ct);vp=o(CL,"A",{href:!0});var OL=e(vp);s9=c(OL,"SFML"),OL.forEach(s),CL.forEach(s),ch=u(a),Ot=o(a,"PRE",{class:!0});var xI=e(Ot);xI.forEach(s),lh=u(a),gt=o(a,"H2",{id:!0});var gL=e(gt);Ep=o(gL,"A",{href:!0});var AL=e(Ep);a9=c(AL,"Qt"),AL.forEach(s),gL.forEach(s),uh=u(a),_p=o(a,"BLOCKQUOTE",{});var SL=e(_p);Pd=o(SL,"P",{});var PL=e(Pd);t9=c(PL,"TODO"),PL.forEach(s),SL.forEach(s),rh=u(a),At=o(a,"H2",{id:!0});var RL=e(At);bp=o(RL,"A",{href:!0});var LL=e(bp);o9=c(LL,"CUDA"),LL.forEach(s),RL.forEach(s),ih=u(a),wp=o(a,"BLOCKQUOTE",{});var IL=e(wp);Rd=o(IL,"P",{});var BL=e(Rd);e9=c(BL,"TODO"),BL.forEach(s),IL.forEach(s),kh=u(a),St=o(a,"H2",{id:!0});var xL=e(St);yp=o(xL,"A",{href:!0});var NL=e(yp);p9=c(NL,"CMake and Builds"),NL.forEach(s),xL.forEach(s),dh=u(a),Tp=o(a,"BLOCKQUOTE",{});var WL=e(Tp);Ld=o(WL,"P",{});var HL=e(Ld);c9=c(HL,"TODO"),HL.forEach(s),WL.forEach(s),this.h()},h(){k(Lt,"href","#introduction"),k(Zn,"id","introduction"),k(It,"href","#history-of-the-c-language"),k(Vs,"id","history-of-the-c-language"),k(Bt,"href","#evolution-toward-c"),k(Qs,"id","evolution-toward-c"),k(xt,"href","#programming-in-c"),k(js,"id","programming-in-c"),k(Nt,"href","#first-program--helloworldc"),k(Ks,"id","first-program--helloworldc"),k(Ys,"class","language-cpp"),k(Wt,"href","#compiling"),k(Xs,"id","compiling"),k(Js,"href","https://en.wikipedia.org/wiki/List_of_compilers#C_compilers"),k(Js,"rel","nofollow"),k(Zs,"href","https://gcc.gnu.org/"),k(Zs,"rel","nofollow"),k($s,"href","https://visualstudio.microsoft.com/fr/downloads/"),k($s,"rel","nofollow"),k(Mt,"href","ftp://ftp.lip6.fr/pub/gcc/releases/gcc-10.1.0/"),k(na,"href","https://www.sublimetext.com/3"),k(na,"rel","nofollow"),k(sa,"href","http://mingw.org/wiki/Getting_Started"),k(sa,"rel","nofollow"),k(zt,"href","#setup-gcc-and-compiling-a-basic-program"),k(aa,"id","setup-gcc-and-compiling-a-basic-program"),k(Kt,"href","#compilator-settings-and-flags"),k(la,"id","compilator-settings-and-flags"),k(ua,"href","https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html"),k(ua,"rel","nofollow"),k(ra,"href","https://www.rapidtables.com/code/linux/gcc/gcc-o.html#optimization"),k(ra,"rel","nofollow"),k(yo,"href","#import-and-use-libraries"),k(ia,"id","import-and-use-libraries"),k(To,"href","#includes-and-dependancies"),k(ka,"id","includes-and-dependancies"),k(ba,"href","https://en.cppreference.com/w/cpp/header"),k(ba,"rel","nofollow"),k(So,"href","#namespace-and-utilities"),k(wa,"id","namespace-and-utilities"),k(ya,"href","https://en.cppreference.com/w/cpp/language/namespace"),k(ya,"rel","nofollow"),k(Da,"class","language-cpp"),k(Oa,"class","language-cpp"),k(Aa,"class","language-cpp"),k(Io,"href","#cheat-sheets"),k(Sa,"id","cheat-sheets"),k(Bo,"href","#usefull-informations"),k(Pa,"id","usefull-informations"),k(Ra,"href","https://en.cppreference.com/w/"),k(Ra,"rel","nofollow"),k(Ia,"href","http://pypl.github.io/PYPL.html"),k(Ia,"rel","nofollow"),k(qo,"href","#basic-c-cheat-sheet"),k(Ba,"id","basic-c-cheat-sheet"),k(zo,"href","#types-and-variables"),k(xa,"id","types-and-variables"),k(E,"class","header"),k(fs,"class","math inline"),k(hs,"class","math inline"),k(Ko,"class","math inline"),k(ms,"class","math inline"),k(vs,"class","math inline"),k(Es,"class","math inline"),k(se,"class","math inline"),k(_s,"class","math inline"),k(bs,"class","math inline"),k(ws,"class","math inline"),k(pe,"class","math inline"),k(ys,"class","math inline"),k(Ts,"class","math inline"),k(Ds,"class","math inline"),k(ie,"class","math inline"),k(Cs,"class","math inline"),k(_,"class","header"),k(gs,"class","math inline"),k(As,"class","math inline"),k(be,"class","math inline"),k(Ss,"class","math inline"),k(De,"class","math inline"),k(Ps,"class","math inline"),k(Ae,"class","math inline"),k(Rs,"class","math inline"),k(Le,"class","math inline"),k(Ls,"class","math inline"),k(Ne,"class","math inline"),k(Is,"class","math inline"),k(Qa,"href","https://fr.cppreference.com/w/cpp/language/ascii"),k(Qa,"rel","nofollow"),k(Me,"href","#input-output"),k(ja,"id","input-output"),k(Ka,"class","language-cpp"),k(Ya,"class","language-undefined"),k(Qe,"class","math math-inline"),k(je,"href","#variables-tests-and-loops"),k(Xa,"id","variables-tests-and-loops"),k(Ja,"class","language-cpp"),k(Za,"class","language-c"),k($a,"class","language-c"),k(nt,"class","language-c"),k($e,"href","#random-numbers"),k(at,"id","random-numbers"),k(tt,"class","language-cpp"),k(ap,"href","#arrays"),k(ot,"id","arrays"),k(et,"class","language-cpp"),k(pt,"class","language-cpp"),k(ct,"class","language-cpp"),k(ep,"href","#functions"),k(lt,"id","functions"),k(ut,"class","language-cpp"),k(pp,"href","#structures"),k(rt,"id","structures"),k(it,"class","language-cpp"),k(kt,"class","language-undefined"),k(dt,"class","language-cpp"),k(ip,"href","#pointers-and-smart-pointers"),k(ft,"id","pointers-and-smart-pointers"),k(ht,"class","language-cpp"),k(kp,"href","#basic-c-cheat-sheet-1"),k(mt,"id","basic-c-cheat-sheet-1"),k(dp,"href","#macros"),k(vt,"id","macros"),k(Et,"class","language-cpp"),k(fp,"href","#arrays-1"),k(_t,"id","arrays-1"),k(bt,"class","language-cpp"),k(hp,"href","#inheritances"),k(wt,"id","inheritances"),k(yt,"class","language-cpp"),k(mp,"href","#threads"),k(Tt,"id","threads"),k(Dt,"class","language-cpp"),k(vp,"href","#sfml"),k(Ct,"id","sfml"),k(Ot,"class","language-cpp"),k(Ep,"href","#qt"),k(gt,"id","qt"),k(bp,"href","#cuda"),k(At,"id","cuda"),k(yp,"href","#cmake-and-builds"),k(St,"id","cmake-and-builds")},m(a,r){i(a,Zn,r),n(Zn,Lt),n(Lt,rm),i(a,Wd,r),i(a,Vs,r),n(Vs,It),n(It,im),i(a,Hd,r),i(a,hn,r),n(hn,km),n(hn,Hp),n(Hp,dm),n(hn,fm),n(hn,Gp),n(Gp,hm),n(hn,mm),n(hn,Up),n(Up,vm),n(hn,Em),i(a,Gd,r),i(a,Wn,r),n(Wn,_m),n(Wn,Mp),n(Mp,bm),n(Wn,wm),n(Wn,qp),n(qp,ym),n(Wn,Tm),i(a,Ud,r),i(a,Hn,r),n(Hn,Dm),n(Hn,zp),n(zp,Cm),n(Hn,Om),n(Hn,Fp),n(Fp,gm),n(Hn,Am),i(a,Md,r),i(a,Qs,r),n(Qs,Bt),n(Bt,Sm),i(a,qd,r),i(a,mn,r),n(mn,Pm),n(mn,Vp),n(Vp,Rm),n(mn,Lm),n(mn,Qp),n(Qp,Im),n(mn,Bm),n(mn,jp),n(jp,xm),n(mn,Nm),i(a,zd,r),i(a,Gn,r),n(Gn,Wm),n(Gn,Kp),n(Kp,Hm),n(Gn,Gm),n(Gn,Yp),n(Yp,Um),n(Gn,Mm),i(a,Fd,r),i(a,js,r),n(js,xt),n(xt,qm),i(a,Vd,r),i(a,Ks,r),n(Ks,Nt),n(Nt,zm),i(a,Qd,r),i(a,Ys,r),Ys.innerHTML=UL,i(a,jd,r),i(a,d,r),n(d,Fm),n(d,Xp),n(Xp,Vm),n(d,Qm),n(d,Jp),n(Jp,jm),n(d,Km),n(d,Zp),n(Zp,Ym),n(d,Xm),n(d,$p),n($p,Jm),n(d,Zm),n(d,nc),n(nc,$m),n(d,n2),n(d,sc),n(sc,s2),n(d,a2),n(d,ac),n(ac,t2),n(d,o2),n(d,tc),n(tc,e2),n(d,p2),n(d,oc),n(oc,c2),n(d,l2),i(a,Kd,r),i(a,x,r),n(x,u2),n(x,ec),n(ec,r2),n(x,i2),n(x,pc),n(pc,k2),n(x,d2),n(x,cc),n(cc,f2),n(x,h2),n(x,lc),n(lc,m2),n(x,v2),n(x,uc),n(uc,E2),n(x,_2),i(a,Yd,r),i(a,Xs,r),n(Xs,Wt),n(Wt,b2),i(a,Xd,r),i(a,vn,r),n(vn,w2),n(vn,rc),n(rc,y2),n(vn,T2),n(vn,ic),n(ic,D2),n(vn,C2),n(vn,kc),n(kc,O2),n(vn,g2),i(a,Jd,r),i(a,os,r),n(os,A2),n(os,Js),n(Js,S2),n(os,P2),i(a,Zd,r),i(a,Ht,r),n(Ht,R2),i(a,$d,r),i(a,es,r),n(es,Gt),n(Gt,L2),n(Gt,Zs),n(Zs,I2),n(es,B2),n(es,Ut),n(Ut,x2),n(Ut,$s),n($s,N2),i(a,nf,r),i(a,fn,r),n(fn,W2),n(fn,Mt),n(Mt,H2),n(fn,G2),n(fn,dc),n(dc,U2),n(fn,M2),n(fn,fc),n(fc,q2),n(fn,z2),n(fn,na),n(na,F2),i(a,sf,r),i(a,ps,r),n(ps,hc),n(hc,V2),n(ps,Q2),n(ps,qt),n(qt,j2),n(qt,sa),n(sa,K2),i(a,af,r),i(a,aa,r),n(aa,zt),n(zt,Y2),i(a,tf,r),i(a,Un,r),n(Un,ta),n(ta,Rn),n(Rn,X2),n(Rn,mc),n(mc,J2),n(Rn,Z2),n(Rn,vc),n(vc,$2),n(Rn,nv),n(Rn,Ec),n(Ec,sv),n(Rn,av),n(ta,tv),n(ta,Ln),n(Ln,_c),n(_c,cs),n(cs,ov),n(cs,bc),n(bc,ev),n(cs,pv),n(cs,wc),n(wc,cv),n(Ln,lv),n(Ln,yc),n(yc,oa),n(oa,uv),n(oa,Tc),n(Tc,rv),n(oa,iv),n(Ln,kv),n(Ln,ea),n(ea,Dc),n(Dc,dv),n(ea,fv),n(ea,In),n(In,Cc),n(Cc,En),n(En,hv),n(En,Oc),n(Oc,mv),n(En,vv),n(En,gc),n(gc,Ev),n(En,_v),n(En,Ac),n(Ac,bv),n(En,wv),n(En,Sc),n(Sc,yv),n(In,Tv),n(In,Pc),n(Pc,pa),n(pa,Dv),n(pa,Rc),n(Rc,Cv),n(pa,Ov),n(In,gv),n(In,Lc),n(Lc,ls),n(ls,Av),n(ls,Ic),n(Ic,Sv),n(ls,Pv),n(ls,Bc),n(Bc,Rv),n(In,Lv),n(In,xc),n(xc,$n),n($n,Iv),n($n,Nc),n(Nc,Bv),n($n,xv),n($n,Wc),n(Wc,Nv),n($n,Wv),n(Ln,Hv),n(Ln,Hc),n(Hc,us),n(us,Gv),n(us,Gc),n(Gc,Uv),n(us,Mv),n(us,Uc),n(Uc,qv),n(Un,zv),n(Un,ca),n(ca,Ft),n(Ft,Fv),n(Ft,Mc),n(Mc,Vv),n(ca,Qv),n(ca,Bn),n(Bn,qc),n(qc,zc),n(zc,jv),n(Bn,Kv),n(Bn,Fc),n(Fc,Vt),n(Vt,Yv),n(Vt,Vc),n(Vc,Xv),n(Bn,Jv),n(Bn,Qc),n(Qc,Qt),n(Qt,Zv),n(Qt,jc),n(jc,$v),n(Bn,nE),n(Bn,Kc),n(Kc,jt),n(jt,sE),n(jt,Yc),n(Yc,aE),n(Un,tE),n(Un,Xc),n(Xc,xn),n(xn,oE),n(xn,Jc),n(Jc,eE),n(xn,pE),n(xn,Zc),n(Zc,cE),n(xn,lE),n(xn,$c),n($c,uE),n(xn,rE),i(a,of,r),i(a,la,r),n(la,Kt),n(Kt,iE),i(a,ef,r),i(a,Yt,r),n(Yt,h),n(h,kE),n(h,nl),n(nl,dE),n(h,fE),n(h,sl),n(sl,hE),n(h,mE),n(h,al),n(al,vE),n(h,EE),n(h,tl),n(tl,_E),n(h,bE),n(h,ol),n(ol,wE),n(h,yE),n(h,ua),n(ua,TE),n(h,DE),n(h,el),n(el,CE),n(h,OE),i(a,pf,r),i(a,Xt,r),n(Xt,gE),i(a,cf,r),i(a,Jt,r),n(Jt,pl),n(pl,AE),i(a,lf,r),i(a,Mn,r),n(Mn,SE),n(Mn,cl),n(cl,PE),n(Mn,RE),n(Mn,ll),n(ll,LE),n(Mn,IE),i(a,uf,r),i(a,Zt,r),n(Zt,BE),i(a,rf,r),i(a,$t,r),n($t,ul),n(ul,xE),i(a,kf,r),i(a,qn,r),n(qn,rs),n(rs,rl),n(rl,NE),n(rs,WE),n(rs,il),n(il,HE),n(rs,GE),n(qn,UE),n(qn,no),n(no,kl),n(kl,ME),n(no,qE),n(qn,zE),n(qn,zn),n(zn,dl),n(dl,FE),n(zn,VE),n(zn,fl),n(fl,QE),n(zn,jE),n(zn,hl),n(hl,KE),n(zn,YE),i(a,df,r),i(a,so,r),n(so,XE),i(a,ff,r),i(a,Fn,r),n(Fn,JE),n(Fn,ml),n(ml,ZE),n(Fn,$E),n(Fn,vl),n(vl,n_),n(Fn,s_),i(a,hf,r),i(a,K,r),n(K,ao),n(ao,El),n(El,a_),n(ao,t_),n(K,o_),n(K,to),n(to,_l),n(_l,e_),n(to,p_),n(K,c_),n(K,oo),n(oo,bl),n(bl,l_),n(oo,u_),n(K,r_),n(K,eo),n(eo,wl),n(wl,i_),n(eo,k_),n(K,d_),n(K,po),n(po,yl),n(yl,f_),n(po,h_),i(a,mf,r),i(a,co,r),n(co,m_),i(a,vf,r),i(a,lo,r),n(lo,Tl),n(Tl,v_),i(a,Ef,r),i(a,uo,r),n(uo,Dl),n(Dl,E_),i(a,_f,r),i(a,ro,r),n(ro,__),i(a,bf,r),i(a,io,r),n(io,Cl),n(Cl,b_),i(a,wf,r),i(a,ko,r),n(ko,Ol),n(Ol,w_),i(a,yf,r),i(a,Vn,r),n(Vn,y_),n(Vn,gl),n(gl,T_),n(Vn,D_),n(Vn,Al),n(Al,C_),n(Vn,O_),i(a,Tf,r),i(a,_n,r),n(_n,fo),n(fo,Sl),n(Sl,g_),n(fo,A_),n(_n,S_),n(_n,ho),n(ho,Pl),n(Pl,P_),n(ho,R_),n(_n,L_),n(_n,mo),n(mo,Rl),n(Rl,I_),n(mo,B_),n(_n,x_),n(_n,vo),n(vo,Ll),n(Ll,N_),n(vo,W_),i(a,Df,r),i(a,Eo,r),n(Eo,ns),n(ns,H_),n(ns,Il),n(Il,G_),n(ns,U_),n(ns,Bl),n(Bl,M_),n(ns,q_),i(a,Cf,r),i(a,_o,r),n(_o,z_),i(a,Of,r),i(a,Qn,r),n(Qn,F_),n(Qn,xl),n(xl,V_),n(Qn,Q_),n(Qn,Nl),n(Nl,j_),n(Qn,K_),i(a,gf,r),i(a,is,r),n(is,Wl),n(Wl,H),n(H,Hl),n(Hl,Y_),n(H,X_),n(H,Gl),n(Gl,J_),n(H,Z_),n(H,Ul),n(Ul,$_),n(H,n3),n(H,Ml),n(Ml,s3),n(H,a3),n(H,ql),n(ql,t3),n(H,o3),n(H,zl),n(zl,e3),n(is,p3),n(is,G),n(G,U),n(U,Fl),n(Fl,Vl),n(Vl,c3),n(U,l3),n(U,Ql),n(Ql,u3),n(U,r3),n(U,jl),n(jl,i3),n(U,k3),n(U,Kl),n(Kl,d3),n(U,f3),n(U,Yl),n(Yl,h3),n(U,m3),n(U,Xl),n(Xl,v3),n(G,E3),n(G,M),n(M,Jl),n(Jl,Zl),n(Zl,_3),n(M,b3),n(M,$l),n($l,w3),n(M,y3),n(M,nu),n(nu,T3),n(M,D3),n(M,su),n(su,C3),n(M,O3),n(M,au),n(au,g3),n(M,A3),n(M,tu),n(tu,S3),n(G,P3),n(G,q),n(q,ou),n(ou,eu),n(eu,R3),n(q,L3),n(q,pu),n(pu,I3),n(q,B3),n(q,cu),n(cu,x3),n(q,N3),n(q,lu),n(lu,W3),n(q,H3),n(q,uu),n(uu,G3),n(q,U3),n(q,ru),n(ru,M3),n(G,q3),n(G,z),n(z,iu),n(iu,ku),n(ku,z3),n(z,F3),n(z,du),n(du,V3),n(z,Q3),n(z,fu),n(fu,j3),n(z,K3),n(z,hu),n(hu,Y3),n(z,X3),n(z,mu),n(mu,J3),n(z,Z3),n(z,vu),n(vu,$3),n(G,nb),n(G,F),n(F,Eu),n(Eu,_u),n(_u,sb),n(F,ab),n(F,bu),n(bu,tb),n(F,ob),n(F,wu),n(wu,eb),n(F,pb),n(F,yu),n(yu,cb),n(F,lb),n(F,Tu),n(Tu,ub),n(F,rb),n(F,Du),n(Du,ib),n(G,kb),n(G,V),n(V,Cu),n(Cu,Ou),n(Ou,db),n(V,fb),n(V,gu),n(gu,hb),n(V,mb),n(V,Au),n(Au,vb),n(V,Eb),n(V,Su),n(Su,_b),n(V,bb),n(V,Pu),n(Pu,wb),n(V,yb),n(V,Ru),n(Ru,Tb),i(a,Af,r),i(a,bo,r),n(bo,wo),n(wo,Db),n(wo,ra),n(ra,Cb),i(a,Sf,r),i(a,ia,r),n(ia,yo),n(yo,Ob),i(a,Pf,r),i(a,ka,r),n(ka,To),n(To,gb),i(a,Rf,r),i(a,jn,r),n(jn,Ab),n(jn,Lu),n(Lu,Sb),n(jn,Pb),n(jn,Iu),n(Iu,Rb),n(jn,Lb),i(a,Lf,r),i(a,ks,r),n(ks,Do),n(Do,Bu),n(Bu,Ib),n(Do,Bb),n(ks,xb),n(ks,Co),n(Co,xu),n(xu,Nb),n(Co,Wb),i(a,If,r),i(a,Oo,r),n(Oo,Hb),i(a,Bf,r),i(a,v,r),n(v,da),n(da,Nu),n(Nu,Gb),n(da,Ub),n(da,Wu),n(Wu,Mb),n(v,qb),n(v,fa),n(fa,Hu),n(Hu,zb),n(fa,Fb),n(fa,Gu),n(Gu,Vb),n(v,Qb),n(v,ha),n(ha,Uu),n(Uu,jb),n(ha,Kb),n(ha,Mu),n(Mu,Yb),n(v,Xb),n(v,ma),n(ma,qu),n(qu,Jb),n(ma,Zb),n(ma,zu),n(zu,$b),n(v,n0),n(v,va),n(va,Fu),n(Fu,s0),n(va,a0),n(va,Vu),n(Vu,t0),n(v,o0),n(v,Ea),n(Ea,Qu),n(Qu,e0),n(Ea,p0),n(Ea,ju),n(ju,c0),n(v,l0),n(v,_a),n(_a,Ku),n(Ku,u0),n(_a,r0),n(_a,Yu),n(Yu,i0),i(a,xf,r),i(a,go,r),n(go,Ao),n(Ao,k0),n(Ao,ba),n(ba,d0),i(a,Nf,r),i(a,wa,r),n(wa,So),n(So,f0),i(a,Wf,r),i(a,Kn,r),n(Kn,h0),n(Kn,Xu),n(Xu,m0),n(Kn,v0),n(Kn,Ju),n(Ju,E0),n(Kn,_0),i(a,Hf,r),i(a,Po,r),n(Po,Ro),n(Ro,b0),n(Ro,ya),n(ya,w0),i(a,Gf,r),i(a,Ta,r),n(Ta,y0),n(Ta,Zu),n(Zu,T0),i(a,Uf,r),i(a,Da,r),Da.innerHTML=ML,i(a,Mf,r),i(a,Ca,r),n(Ca,D0),n(Ca,$u),n($u,C0),i(a,qf,r),i(a,Oa,r),Oa.innerHTML=qL,i(a,zf,r),i(a,ga,r),n(ga,O0),n(ga,nr),n(nr,g0),i(a,Ff,r),i(a,Aa,r),Aa.innerHTML=zL,i(a,Vf,r),i(a,Lo,r),n(Lo,Yn),n(Yn,sr),n(sr,A0),n(Yn,S0),n(Yn,ar),n(ar,P0),n(Yn,R0),n(Yn,tr),n(tr,L0),n(Yn,I0),i(a,Qf,r),i(a,Sa,r),n(Sa,Io),n(Io,B0),i(a,jf,r),i(a,Pa,r),n(Pa,Bo),n(Bo,x0),i(a,Kf,r),i(a,xo,r),n(xo,No),n(No,N0),n(No,Ra),n(Ra,W0),i(a,Yf,r),i(a,Wo,r),n(Wo,or),n(or,H0),i(a,Xf,r),i(a,Y,r),n(Y,Ho),n(Ho,er),n(er,G0),n(Ho,U0),n(Y,M0),n(Y,Go),n(Go,pr),n(pr,q0),n(Go,z0),n(Y,F0),n(Y,Uo),n(Uo,cr),n(cr,V0),n(Uo,Q0),n(Y,j0),n(Y,La),n(La,lr),n(lr,K0),n(La,Y0),n(La,Ia),n(Ia,X0),n(Y,J0),n(Y,Mo),n(Mo,ur),n(ur,Z0),n(Mo,$0),i(a,Jf,r),i(a,Ba,r),n(Ba,qo),n(qo,n5),i(a,Zf,r),i(a,xa,r),n(xa,zo),n(zo,s5),i(a,$f,r),i(a,bn,r),n(bn,rr),n(rr,a5),n(bn,t5),n(bn,ir),n(ir,o5),n(bn,e5),n(bn,kr),n(kr,p5),n(bn,c5),n(bn,dr),n(dr,l5),i(a,n1,r),i(a,Fo,r),n(Fo,fr),n(fr,u5),i(a,s1,r),i(a,ds,r),n(ds,hr),n(hr,E),n(E,mr),n(mr,r5),n(E,i5),n(E,vr),n(vr,k5),n(E,d5),n(E,Er),n(Er,f5),n(E,h5),n(E,_r),n(_r,m5),n(E,v5),n(E,br),n(br,E5),n(E,_5),n(E,wr),n(wr,b5),n(E,w5),n(E,yr),n(yr,y5),n(ds,T5),n(ds,m),n(m,w),n(w,Na),n(Na,D5),n(Na,Tr),n(Tr,C5),n(Na,O5),n(w,g5),n(w,Dr),n(Dr,Cr),n(Cr,A5),n(w,S5),n(w,Or),n(Or,gr),n(gr,P5),n(w,R5),n(w,Vo),n(Vo,L5),n(Vo,fs),n(fs,I5),n(fs,Ar),n(Ar,B5),n(fs,x5),n(w,N5),n(w,Qo),n(Qo,W5),n(Qo,hs),n(hs,H5),n(hs,Sr),n(Sr,G5),n(hs,U5),n(w,M5),n(w,Pr),n(Pr,Rr),n(Rr,q5),n(w,z5),n(w,Wa),n(Wa,Lr),n(Lr,F5),n(Wa,V5),n(Wa,Ir),n(Ir,Q5),n(m,j5),n(m,y),n(y,Ha),n(Ha,K5),n(Ha,Br),n(Br,Y5),n(Ha,X5),n(y,J5),n(y,xr),n(xr,Nr),n(Nr,Z5),n(y,$5),n(y,Wr),n(Wr,Hr),n(Hr,n4),n(y,s4),n(y,jo),n(jo,a4),n(jo,Ko),n(Ko,t4),n(y,o4),n(y,Yo),n(Yo,e4),n(Yo,ms),n(ms,p4),n(ms,Gr),n(Gr,c4),n(ms,l4),n(y,u4),n(y,Ur),n(Ur,Mr),n(Mr,r4),n(y,i4),n(y,Ga),n(Ga,qr),n(qr,k4),n(Ga,d4),n(Ga,zr),n(zr,f4),n(m,h4),n(m,T),n(T,Xo),n(Xo,m4),n(Xo,Fr),n(Fr,v4),n(T,E4),n(T,Vr),n(Vr,Qr),n(Qr,_4),n(T,b4),n(T,jr),n(jr,Kr),n(Kr,w4),n(T,y4),n(T,Jo),n(Jo,T4),n(Jo,vs),n(vs,D4),n(vs,Yr),n(Yr,C4),n(vs,O4),n(T,g4),n(T,Zo),n(Zo,A4),n(Zo,Es),n(Es,S4),n(Es,Xr),n(Xr,P4),n(Es,R4),n(T,L4),n(T,Jr),n(Jr,Zr),n(Zr,I4),n(T,B4),n(T,Ua),n(Ua,$r),n($r,x4),n(Ua,N4),n(Ua,ni),n(ni,W4),n(m,H4),n(m,D),n(D,$o),n($o,G4),n($o,si),n(si,U4),n(D,M4),n(D,ai),n(ai,ti),n(ti,q4),n(D,z4),n(D,oi),n(oi,ei),n(ei,F4),n(D,V4),n(D,ne),n(ne,Q4),n(ne,se),n(se,j4),n(D,K4),n(D,ae),n(ae,Y4),n(ae,_s),n(_s,X4),n(_s,pi),n(pi,J4),n(_s,Z4),n(D,$4),n(D,ci),n(ci,li),n(li,nw),n(D,sw),n(D,Ma),n(Ma,ui),n(ui,aw),n(Ma,tw),n(Ma,ri),n(ri,ow),n(m,ew),n(m,C),n(C,qa),n(qa,pw),n(qa,ii),n(ii,cw),n(qa,lw),n(C,uw),n(C,ki),n(ki,di),n(di,rw),n(C,iw),n(C,fi),n(fi,hi),n(hi,kw),n(C,dw),n(C,te),n(te,fw),n(te,bs),n(bs,hw),n(bs,mi),n(mi,mw),n(bs,vw),n(C,Ew),n(C,oe),n(oe,_w),n(oe,ws),n(ws,bw),n(ws,vi),n(vi,ww),n(ws,yw),n(C,Tw),n(C,Ei),n(Ei,_i),n(_i,Dw),n(C,Cw),n(C,bi),n(bi,wi),n(wi,Ow),n(m,gw),n(m,O),n(O,za),n(za,Aw),n(za,yi),n(yi,Sw),n(za,Pw),n(O,Rw),n(O,Ti),n(Ti,Di),n(Di,Lw),n(O,Iw),n(O,Ci),n(Ci,Oi),n(Oi,Bw),n(O,xw),n(O,ee),n(ee,Nw),n(ee,pe),n(pe,Ww),n(O,Hw),n(O,ce),n(ce,Gw),n(ce,ys),n(ys,Uw),n(ys,gi),n(gi,Mw),n(ys,qw),n(O,zw),n(O,Ai),n(Ai,Si),n(Si,Fw),n(O,Vw),n(O,Pi),n(Pi,Ri),n(Ri,Qw),n(m,jw),n(m,g),n(g,Fa),n(Fa,Kw),n(Fa,Li),n(Li,Yw),n(Fa,Xw),n(g,Jw),n(g,Ii),n(Ii,Bi),n(Bi,Zw),n(g,$w),n(g,xi),n(xi,Ni),n(Ni,ny),n(g,sy),n(g,le),n(le,ay),n(le,Ts),n(Ts,ty),n(Ts,Wi),n(Wi,oy),n(Ts,ey),n(g,py),n(g,ue),n(ue,cy),n(ue,Ds),n(Ds,ly),n(Ds,Hi),n(Hi,uy),n(Ds,ry),n(g,iy),n(g,Gi),n(Gi,Ui),n(Ui,ky),n(g,dy),n(g,Mi),n(Mi,qi),n(qi,fy),n(m,hy),n(m,A),n(A,Va),n(Va,my),n(Va,zi),n(zi,vy),n(Va,Ey),n(A,_y),n(A,Fi),n(Fi,Vi),n(Vi,by),n(A,wy),n(A,Qi),n(Qi,ji),n(ji,yy),n(A,Ty),n(A,re),n(re,Dy),n(re,ie),n(ie,Cy),n(A,Oy),n(A,ke),n(ke,gy),n(ke,Cs),n(Cs,Ay),n(Cs,Ki),n(Ki,Sy),n(Cs,Py),n(A,Ry),n(A,Yi),n(Yi,Xi),n(Xi,Ly),n(A,Iy),n(A,Ji),n(Ji,Zi),n(Zi,By),i(a,a1,r),i(a,de,r),n(de,$i),n($i,xy),i(a,t1,r),i(a,fe,r),n(fe,nk),n(nk,Ny),i(a,o1,r),i(a,Os,r),n(Os,sk),n(sk,_),n(_,ak),n(ak,Wy),n(_,Hy),n(_,tk),n(tk,Gy),n(_,Uy),n(_,ok),n(ok,My),n(_,qy),n(_,ek),n(ek,zy),n(_,Fy),n(_,pk),n(pk,Vy),n(_,Qy),n(_,ck),n(ck,jy),n(_,Ky),n(_,lk),n(lk,Yy),n(Os,Xy),n(Os,Q),n(Q,S),n(S,he),n(he,Jy),n(he,uk),n(uk,Zy),n(S,$y),n(S,rk),n(rk,ik),n(ik,n6),n(S,s6),n(S,kk),n(kk,dk),n(dk,a6),n(S,t6),n(S,me),n(me,o6),n(me,gs),n(gs,e6),n(gs,fk),n(fk,p6),n(gs,c6),n(S,l6),n(S,ve),n(ve,u6),n(ve,As),n(As,r6),n(As,hk),n(hk,i6),n(As,k6),n(S,d6),n(S,mk),n(mk,vk),n(vk,f6),n(S,h6),n(S,Ek),n(Ek,_k),n(_k,m6),n(Q,v6),n(Q,P),n(P,Ee),n(Ee,E6),n(Ee,bk),n(bk,_6),n(P,b6),n(P,wk),n(wk,yk),n(yk,w6),n(P,y6),n(P,Tk),n(Tk,Dk),n(Dk,T6),n(P,D6),n(P,_e),n(_e,C6),n(_e,be),n(be,O6),n(P,g6),n(P,we),n(we,A6),n(we,Ss),n(Ss,S6),n(Ss,Ck),n(Ck,P6),n(Ss,R6),n(P,L6),n(P,Ok),n(Ok,gk),n(gk,I6),n(P,B6),n(P,e1),n(Q,x6),n(Q,R),n(R,ye),n(ye,N6),n(ye,Ak),n(Ak,W6),n(R,H6),n(R,Sk),n(Sk,Pk),n(Pk,G6),n(R,U6),n(R,Rk),n(Rk,Lk),n(Lk,M6),n(R,q6),n(R,Te),n(Te,z6),n(Te,De),n(De,F6),n(R,V6),n(R,Ce),n(Ce,Q6),n(Ce,Ps),n(Ps,j6),n(Ps,Ik),n(Ik,K6),n(Ps,Y6),n(R,X6),n(R,Bk),n(Bk,xk),n(xk,J6),n(R,Z6),n(R,p1),n(Q,$6),n(Q,L),n(L,Oe),n(Oe,n7),n(Oe,Nk),n(Nk,s7),n(L,a7),n(L,Wk),n(Wk,Hk),n(Hk,t7),n(L,o7),n(L,Gk),n(Gk,Uk),n(Uk,e7),n(L,p7),n(L,ge),n(ge,c7),n(ge,Ae),n(Ae,l7),n(L,u7),n(L,Se),n(Se,r7),n(Se,Rs),n(Rs,i7),n(Rs,Mk),n(Mk,k7),n(Rs,d7),n(L,f7),n(L,qk),n(qk,zk),n(zk,h7),n(L,m7),n(L,c1),n(Q,v7),n(Q,I),n(I,Pe),n(Pe,E7),n(Pe,Fk),n(Fk,_7),n(I,b7),n(I,Vk),n(Vk,Qk),n(Qk,w7),n(I,y7),n(I,jk),n(jk,Kk),n(Kk,T7),n(I,D7),n(I,Re),n(Re,C7),n(Re,Le),n(Le,O7),n(I,g7),n(I,Ie),n(Ie,A7),n(Ie,Ls),n(Ls,S7),n(Ls,Yk),n(Yk,P7),n(Ls,R7),n(I,L7),n(I,Xk),n(Xk,Jk),n(Jk,I7),n(I,B7),n(I,l1),n(Q,x7),n(Q,B),n(B,Be),n(Be,N7),n(Be,Zk),n(Zk,W7),n(B,H7),n(B,$k),n($k,nd),n(nd,G7),n(B,U7),n(B,sd),n(sd,ad),n(ad,M7),n(B,q7),n(B,xe),n(xe,z7),n(xe,Ne),n(Ne,F7),n(B,V7),n(B,We),n(We,Q7),n(We,Is),n(Is,j7),n(Is,td),n(td,K7),n(Is,Y7),n(B,X7),n(B,od),n(od,ed),n(ed,J7),n(B,Z7),n(B,u1),i(a,r1,r),i(a,He,r),n(He,pd),n(pd,$7),i(a,i1,r),i(a,Ge,r),n(Ge,Ue),n(Ue,n8),n(Ue,Qa),n(Qa,s8),i(a,k1,r),i(a,ja,r),n(ja,Me),n(Me,a8),i(a,d1,r),i(a,Ka,r),Ka.innerHTML=FL,i(a,f1,r),i(a,qe,r),n(qe,cd),n(cd,t8),i(a,h1,r),i(a,Ya,r),Ya.innerHTML=VL,i(a,m1,r),i(a,ze,r),n(ze,o8),i(a,v1,r),i(a,Fe,r),n(Fe,Nn),n(Nn,e8),n(Nn,ld),n(ld,p8),n(Nn,c8),n(Nn,ud),n(ud,l8),n(Nn,u8),n(Nn,rd),n(rd,r8),n(Nn,i8),i(a,E1,r),i(a,Ve,r),n(Ve,b),n(b,k8),n(b,id),n(id,d8),n(b,f8),n(b,kd),n(kd,h8),n(b,m8),n(b,dd),n(dd,v8),n(b,E8),n(b,fd),n(fd,_8),n(b,b8),n(b,Qe),Qe.innerHTML=QL,n(b,w8),n(b,hd),n(hd,y8),n(b,T8),n(b,md),n(md,D8),i(a,_1,r),i(a,Xa,r),n(Xa,je),n(je,C8),i(a,b1,r),i(a,Ke,r),n(Ke,vd),n(vd,O8),i(a,w1,r),i(a,Ja,r),Ja.innerHTML=jL,i(a,y1,r),i(a,Ye,r),n(Ye,Ed),n(Ed,g8),i(a,T1,r),i(a,Za,r),Za.innerHTML=KL,i(a,D1,r),i(a,Xe,r),n(Xe,_d),n(_d,A8),i(a,C1,r),i(a,$a,r),$a.innerHTML=YL,i(a,O1,r),i(a,Je,r),n(Je,bd),n(bd,S8),i(a,g1,r),i(a,nt,r),nt.innerHTML=XL,i(a,A1,r),i(a,Ze,r),n(Ze,st),n(st,P8),n(st,wd),n(wd,R8),n(st,L8),i(a,S1,r),i(a,at,r),n(at,$e),n($e,I8),i(a,P1,r),i(a,np,r),n(np,yd),n(yd,B8),i(a,R1,r),i(a,tt,r),tt.innerHTML=JL,i(a,L1,r),i(a,sp,r),n(sp,ss),n(ss,x8),n(ss,Td),n(Td,N8),n(ss,W8),n(ss,Dd),n(Dd,H8),n(ss,G8),i(a,I1,r),i(a,ot,r),n(ot,ap),n(ap,U8),i(a,B1,r),i(a,tp,r),n(tp,Cd),n(Cd,M8),i(a,x1,r),i(a,et,r),et.innerHTML=ZL,i(a,N1,r),i(a,op,r),n(op,Od),n(Od,q8),i(a,W1,r),i(a,pt,r),pt.innerHTML=$L,i(a,H1,r),i(a,ct,r),ct.innerHTML=nI,i(a,G1,r),i(a,lt,r),n(lt,ep),n(ep,z8),i(a,U1,r),i(a,ut,r),ut.innerHTML=sI,i(a,M1,r),i(a,rt,r),n(rt,pp),n(pp,F8),i(a,q1,r),i(a,cp,r),n(cp,gd),n(gd,V8),i(a,z1,r),i(a,it,r),it.innerHTML=aI,i(a,F1,r),i(a,lp,r),n(lp,Q8),i(a,V1,r),i(a,kt,r),kt.innerHTML=tI,i(a,Q1,r),i(a,up,r),n(up,Ad),n(Ad,j8),i(a,j1,r),i(a,rp,r),n(rp,Sd),n(Sd,K8),i(a,K1,r),i(a,dt,r),dt.innerHTML=oI,i(a,Y1,r),i(a,ft,r),n(ft,ip),n(ip,Y8),i(a,X1,r),i(a,ht,r),ht.innerHTML=eI,i(a,J1,r),i(a,mt,r),n(mt,kp),n(kp,X8),i(a,Z1,r),i(a,vt,r),n(vt,dp),n(dp,J8),i(a,$1,r),i(a,Et,r),Et.innerHTML=pI,i(a,nh,r),i(a,_t,r),n(_t,fp),n(fp,Z8),i(a,sh,r),i(a,bt,r),bt.innerHTML=cI,i(a,ah,r),i(a,wt,r),n(wt,hp),n(hp,$8),i(a,th,r),i(a,yt,r),yt.innerHTML=lI,i(a,oh,r),i(a,Tt,r),n(Tt,mp),n(mp,n9),i(a,eh,r),i(a,Dt,r),Dt.innerHTML=uI,i(a,ph,r),i(a,Ct,r),n(Ct,vp),n(vp,s9),i(a,ch,r),i(a,Ot,r),Ot.innerHTML=rI,i(a,lh,r),i(a,gt,r),n(gt,Ep),n(Ep,a9),i(a,uh,r),i(a,_p,r),n(_p,Pd),n(Pd,t9),i(a,rh,r),i(a,At,r),n(At,bp),n(bp,o9),i(a,ih,r),i(a,wp,r),n(wp,Rd),n(Rd,e9),i(a,kh,r),i(a,St,r),n(St,yp),n(yp,p9),i(a,dh,r),i(a,Tp,r),n(Tp,Ld),n(Ld,c9)},p:wT,i:wT,o:wT,d(a){a&&s(Zn),a&&s(Wd),a&&s(Vs),a&&s(Hd),a&&s(hn),a&&s(Gd),a&&s(Wn),a&&s(Ud),a&&s(Hn),a&&s(Md),a&&s(Qs),a&&s(qd),a&&s(mn),a&&s(zd),a&&s(Gn),a&&s(Fd),a&&s(js),a&&s(Vd),a&&s(Ks),a&&s(Qd),a&&s(Ys),a&&s(jd),a&&s(d),a&&s(Kd),a&&s(x),a&&s(Yd),a&&s(Xs),a&&s(Xd),a&&s(vn),a&&s(Jd),a&&s(os),a&&s(Zd),a&&s(Ht),a&&s($d),a&&s(es),a&&s(nf),a&&s(fn),a&&s(sf),a&&s(ps),a&&s(af),a&&s(aa),a&&s(tf),a&&s(Un),a&&s(of),a&&s(la),a&&s(ef),a&&s(Yt),a&&s(pf),a&&s(Xt),a&&s(cf),a&&s(Jt),a&&s(lf),a&&s(Mn),a&&s(uf),a&&s(Zt),a&&s(rf),a&&s($t),a&&s(kf),a&&s(qn),a&&s(df),a&&s(so),a&&s(ff),a&&s(Fn),a&&s(hf),a&&s(K),a&&s(mf),a&&s(co),a&&s(vf),a&&s(lo),a&&s(Ef),a&&s(uo),a&&s(_f),a&&s(ro),a&&s(bf),a&&s(io),a&&s(wf),a&&s(ko),a&&s(yf),a&&s(Vn),a&&s(Tf),a&&s(_n),a&&s(Df),a&&s(Eo),a&&s(Cf),a&&s(_o),a&&s(Of),a&&s(Qn),a&&s(gf),a&&s(is),a&&s(Af),a&&s(bo),a&&s(Sf),a&&s(ia),a&&s(Pf),a&&s(ka),a&&s(Rf),a&&s(jn),a&&s(Lf),a&&s(ks),a&&s(If),a&&s(Oo),a&&s(Bf),a&&s(v),a&&s(xf),a&&s(go),a&&s(Nf),a&&s(wa),a&&s(Wf),a&&s(Kn),a&&s(Hf),a&&s(Po),a&&s(Gf),a&&s(Ta),a&&s(Uf),a&&s(Da),a&&s(Mf),a&&s(Ca),a&&s(qf),a&&s(Oa),a&&s(zf),a&&s(ga),a&&s(Ff),a&&s(Aa),a&&s(Vf),a&&s(Lo),a&&s(Qf),a&&s(Sa),a&&s(jf),a&&s(Pa),a&&s(Kf),a&&s(xo),a&&s(Yf),a&&s(Wo),a&&s(Xf),a&&s(Y),a&&s(Jf),a&&s(Ba),a&&s(Zf),a&&s(xa),a&&s($f),a&&s(bn),a&&s(n1),a&&s(Fo),a&&s(s1),a&&s(ds),a&&s(a1),a&&s(de),a&&s(t1),a&&s(fe),a&&s(o1),a&&s(Os),a&&s(r1),a&&s(He),a&&s(i1),a&&s(Ge),a&&s(k1),a&&s(ja),a&&s(d1),a&&s(Ka),a&&s(f1),a&&s(qe),a&&s(h1),a&&s(Ya),a&&s(m1),a&&s(ze),a&&s(v1),a&&s(Fe),a&&s(E1),a&&s(Ve),a&&s(_1),a&&s(Xa),a&&s(b1),a&&s(Ke),a&&s(w1),a&&s(Ja),a&&s(y1),a&&s(Ye),a&&s(T1),a&&s(Za),a&&s(D1),a&&s(Xe),a&&s(C1),a&&s($a),a&&s(O1),a&&s(Je),a&&s(g1),a&&s(nt),a&&s(A1),a&&s(Ze),a&&s(S1),a&&s(at),a&&s(P1),a&&s(np),a&&s(R1),a&&s(tt),a&&s(L1),a&&s(sp),a&&s(I1),a&&s(ot),a&&s(B1),a&&s(tp),a&&s(x1),a&&s(et),a&&s(N1),a&&s(op),a&&s(W1),a&&s(pt),a&&s(H1),a&&s(ct),a&&s(G1),a&&s(lt),a&&s(U1),a&&s(ut),a&&s(M1),a&&s(rt),a&&s(q1),a&&s(cp),a&&s(z1),a&&s(it),a&&s(F1),a&&s(lp),a&&s(V1),a&&s(kt),a&&s(Q1),a&&s(up),a&&s(j1),a&&s(rp),a&&s(K1),a&&s(dt),a&&s(Y1),a&&s(ft),a&&s(X1),a&&s(ht),a&&s(J1),a&&s(mt),a&&s(Z1),a&&s(vt),a&&s($1),a&&s(Et),a&&s(nh),a&&s(_t),a&&s(sh),a&&s(bt),a&&s(ah),a&&s(wt),a&&s(th),a&&s(yt),a&&s(oh),a&&s(Tt),a&&s(eh),a&&s(Dt),a&&s(ph),a&&s(Ct),a&&s(ch),a&&s(Ot),a&&s(lh),a&&s(gt),a&&s(uh),a&&s(_p),a&&s(rh),a&&s(At),a&&s(ih),a&&s(wp),a&&s(kh),a&&s(St),a&&s(dh),a&&s(Tp)}}}const MI={title:"C++",short:""};class qI extends NI{constructor(Zn){super(),WI(this,Zn,null,GI,HI,{})}}export{qI as default,MI as metadata};
