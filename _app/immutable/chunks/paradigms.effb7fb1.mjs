import{S as ce,i as re,s as ie,k as t,r as c,a as i,l as e,m as p,u as r,h as a,c as u,p as k,b as l,F as n,n as Zn}from"./index.73c741f7.mjs";function ue(qt){let m,H,La,Os,_,R,Pa,Fs,x,Sa,Ws,g,Qt='<code class="language-undefined">Assembly =&gt; C =&gt; C++ =&gt; Java =&gt; Js =&gt; Ts</code>',Bs,I,D,Ca,Us,V,Na,zs,G,Ma,Xs,h,O,vs,ja,Aa,Ha,F,ws,Ra,xa,Js,T,Yt=`<code class="language-typescript">   	<span class="token comment">// Defining an impementation of a type diff√©rents Layers:</span>
   <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>
   	<span class="token comment">/* Attributes (values, fields, properties) */</span>
   	<span class="token keyword">private</span> <span class="token builtin">number</span> price
   	<span class="token keyword">private</span> <span class="token builtin">string</span> brand
   	<span class="token keyword">private</span> <span class="token builtin">string</span> plate

   		<span class="token comment">/* Methods (Factories, Constructors, Accessors, Functions) */</span>

   		<span class="token comment">/* Factories (Builders) */</span>
   	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Multiple implementations with the overload</span>
   	<span class="token function">constructor</span><span class="token punctuation">(</span>price<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> brand<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> plate<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   		<span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price
   		<span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand
   		<span class="token keyword">this</span><span class="token punctuation">.</span>plate <span class="token operator">=</span> plate
   	<span class="token punctuation">&#125;</span>
   	<span class="token comment">// Garbage collection (ex: c++ ~destructor)</span>

   		<span class="token comment">/* Constructors (Setters) */</span>
   	<span class="token function">setPrice</span><span class="token punctuation">(</span>price <span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price <span class="token punctuation">&#125;</span>
   	<span class="token function">setBrand</span><span class="token punctuation">(</span>brand <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand <span class="token punctuation">&#125;</span>
   	<span class="token function">setPlate</span><span class="token punctuation">(</span>plate <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>plate <span class="token operator">=</span> plate <span class="token punctuation">&#125;</span>

   		<span class="token comment">/* Accessors (Getters) */</span>
   	<span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token punctuation">&#125;</span>
   	<span class="token function">getBrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token punctuation">&#125;</span>
   	<span class="token function">getPlate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>plate <span class="token punctuation">&#125;</span>

   		<span class="token comment">/* Functions */</span>
   	<span class="token function">computeSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span></code>`,Ks,L,W,Da,qs,B,bs,Va,Qs,d,U,Es,Ga,Oa,Fa,z,_s,Wa,Ba,Ys,P,Zt=`<code class="language-typescript">   	<span class="token keyword">class</span> <span class="token class-name">ImmutableNumber</span> <span class="token punctuation">&#123;</span>
   	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>

   		<span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token punctuation">&#125;</span>

   		<span class="token function">plusNumber</span><span class="token punctuation">(</span>other<span class="token operator">:</span> ImmutableNumber<span class="token punctuation">)</span> <span class="token operator">:</span> ImmutableNumber <span class="token punctuation">&#123;</span>
   		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableNumber</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> other<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   	<span class="token punctuation">&#125;</span>

   		<span class="token function">minusNumber</span><span class="token punctuation">(</span>other<span class="token operator">:</span> ImmutableNumber<span class="token punctuation">)</span> <span class="token operator">:</span> ImmutableNumber <span class="token punctuation">&#123;</span>
   		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableNumber</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> other<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   	<span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span> </code>`,Zs,X,gs,Ua,$s,y,J,Is,za,Xa,Ja,K,Ts,Ka,qa,sa,S,$t=`<code class="language-typescript">   	<span class="token keyword">class</span> <span class="token class-name">MutableNumber</span> <span class="token punctuation">&#123;</span>
   	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>

   		<span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token punctuation">&#125;</span>
   	<span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value <span class="token punctuation">&#125;</span>

   		<span class="token function">plusNumber</span><span class="token punctuation">(</span>other<span class="token operator">:</span> MutableNumber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> other<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   	<span class="token punctuation">&#125;</span>

   		<span class="token function">minusNumber</span><span class="token punctuation">(</span>other<span class="token operator">:</span> MutableNumber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> other<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   	<span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span> </code>`,aa,C,q,Qa,na,Q,Ls,Ya,ta,Y,Za,ea,Z,$a,pa,v,$,Ps,sn,an,nn,ss,Ss,tn,en,oa,as,pn,la,N,se=`<code class="language-typescript">   <span class="token keyword">class</span> <span class="token class-name">Driver</span> <span class="token punctuation">&#123;</span>
   	<span class="token comment">/* Driver class implementation */</span>
   <span class="token punctuation">&#125;</span>

   <span class="token keyword">class</span> <span class="token class-name">Wheel</span> <span class="token punctuation">&#123;</span>
   	<span class="token comment">/* Wheel class implementation */</span>
   <span class="token punctuation">&#125;</span>

   <span class="token keyword">class</span> <span class="token class-name">Frame</span> <span class="token punctuation">&#123;</span>
   	<span class="token comment">/* Frame class implementation */</span>
   <span class="token punctuation">&#125;</span>

   <span class="token comment">/*
   	The Car class is an example of the Aggregation:
   	It HAS a driver, wheels and a frame
   */</span>

   <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>
   	<span class="token keyword">private</span> driver<span class="token operator">:</span> Driver
   	<span class="token keyword">private</span> wheels<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Wheel<span class="token operator">></span>
   	<span class="token keyword">private</span> frame<span class="token operator">:</span> Frame

   	<span class="token function">constructor</span><span class="token punctuation">(</span>driver<span class="token operator">:</span> Driver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   		<span class="token keyword">this</span><span class="token punctuation">.</span>driver <span class="token operator">=</span> driver
   		<span class="token keyword">this</span><span class="token punctuation">.</span>wheels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Wheel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Wheel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Wheel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Wheel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
   		<span class="token keyword">this</span><span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   	<span class="token punctuation">&#125;</span>

   	<span class="token comment">/*
   		With this exemples, we could also say thet these components
   		don't have the same relation with the Car class:

   		- The Wheels and the Frame seems pretty linked to the Car
   		  In fact, we can see that they are only created in the Car constructor.
   		  => We could say that the Car is in symbiosis with the Wheels and the Frame
   		  ... but it's not realy true, the wheels could be changed, the car
   		  would still be the same. The interpretation is realy specific to what you need

   		- The Driver seems completely independant from the rest of the pieces. It is 
   		passed by parameter in the constructor, and we can emit the supposition that
   		the driver can be changed, for instance if he sells the car to another Driver
   		=> We could say that the Driver is in a shared aggregation with the Car
   	*/</span>
   <span class="token punctuation">&#125;</span></code>`,ca,ns,Cs,on,ra,ts,ln,ia,es,cn,ua,w,ps,Ns,rn,un,kn,os,Ms,fn,mn,ka,ls,hn,fa,M,ae=`<code class="language-typescript">   	<span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">&#123;</span>
   	<span class="token keyword">private</span> driver<span class="token operator">:</span> Driver
   	<span class="token keyword">private</span> wheels<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Wheel<span class="token operator">></span>
   	<span class="token keyword">private</span> frame<span class="token operator">:</span> Frame

   		<span class="token comment">/* Vehicle implementation */</span>
   <span class="token punctuation">&#125;</span>

   	<span class="token comment">/* A Car IS a Vehicle, it will have the same attributes and methods... */</span>
   <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">&#123;</span>

   		<span class="token comment">/* Car class implementation */</span>
   <span class="token punctuation">&#125;</span>

   	<span class="token comment">/* ... but moreover, it can implement new attributes and methods! */</span>
   <span class="token keyword">class</span> <span class="token class-name">Truck</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">&#123;</span>
   	<span class="token keyword">private</span> trailer<span class="token operator">:</span> Trailer <span class="token comment">// The trailer is specific to the truck</span>

   		<span class="token comment">/* Truck class implementation */</span>
   <span class="token punctuation">&#125;</span>

   	<span class="token comment">/* 
   	We can see that the Polymorphism allows to store multiple childs 
   	of the Car class in the same Array, that's really usefull 
   */</span>
   <span class="token keyword">let</span> MyVehicles<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Vehicles<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Truck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code>`,ma,j,cs,dn,ha,rs,js,yn,da,b,is,As,vn,wn,bn,us,Hs,En,_n,ya,ks,Rs,gn,va,f,fs,xs,In,Tn,Ln,ms,Ds,Pn,Sn,Cn,hs,Vs,Nn,Mn,jn,ds,Gs,An,Hn,wa,A,ys,Rn;return{c(){m=t("h2"),H=t("a"),La=c("Modularity and Typing"),Os=i(),_=t("h4"),R=t("a"),Pa=c("Introduction"),Fs=i(),x=t("p"),Sa=c("Evolution of the Languages towards an increasingly modular and abstract programming"),Ws=i(),g=t("pre"),Bs=i(),I=t("h4"),D=t("a"),Ca=c("Creating a new Type"),Us=i(),V=t("p"),Na=c("Creating a new Type (TypeScript) : example of the Car"),zs=i(),G=t("p"),Ma=c("Two points of view when defining a new type:"),Xs=i(),h=t("ul"),O=t("li"),vs=t("strong"),ja=c("Internal:"),Aa=c(" How to build and manage the elements (how to build a car?)"),Ha=i(),F=t("li"),ws=t("strong"),Ra=c("External:"),xa=c(" How to use the instances of that element (how to drive a car?)"),Js=i(),T=t("pre"),Ks=i(),L=t("h4"),W=t("a"),Da=c("Data Persistence"),qs=i(),B=t("p"),bs=t("strong"),Va=c("Immutability: Keep the initial state, each computation create a new object"),Qs=i(),d=t("ul"),U=t("li"),Es=t("strong"),Ga=c("Benefits:"),Oa=c(" Permit to avoid errors due to the change of the object. For instance, if multiple entities can access the object at the same time, or if you just don\\‚Äòt want the state of the object to change."),Fa=i(),z=t("li"),_s=t("strong"),Wa=c("DrawBack:"),Ba=c(" Can be heavier on memory due to the initialisation of a new element for each change in the object state"),Ys=i(),P=t("pre"),Zs=i(),X=t("p"),gs=t("strong"),Ua=c("Mutability: The state of the object can change, allows to edit it"),$s=i(),y=t("ul"),J=t("li"),Is=t("strong"),za=c("Benefits:"),Xa=c(" Some case just need to have an object evolution."),Ja=i(),K=t("li"),Ts=t("strong"),Ka=c("DrawBack:"),qa=c(" Harder to manage the states, and riskier."),sa=i(),S=t("pre"),aa=i(),C=t("h4"),q=t("a"),Qa=c("Hierarchy: Aggregation and Inheritance"),na=i(),Q=t("p"),Ls=t("strong"),Ya=c("Aggregation (Has a X)"),ta=i(),Y=t("p"),Za=c("Code factorisation with the aggregation of the differents classes"),ea=i(),Z=t("p"),$a=c("Multiples forms:"),pa=i(),v=t("ul"),$=t("li"),Ps=t("strong"),sn=c("Shared Aggregation"),an=c(" (objects are independants)"),nn=i(),ss=t("li"),Ss=t("strong"),tn=c("Symbiosis"),en=c(" (same life duration)"),oa=i(),as=t("p"),pn=c("Example:"),la=i(),N=t("pre"),ca=i(),ns=t("p"),Cs=t("strong"),on=c("Inheritance (Is a X)"),ra=i(),ts=t("p"),ln=c("Polymorphism : Multiplicity of essences"),ia=i(),es=t("p"),cn=c("Data storage:"),ua=i(),w=t("ul"),ps=t("li"),Ns=t("strong"),rn=c("Covariant"),un=c(" (accept object that are more specialized)"),kn=i(),os=t("li"),Ms=t("strong"),fn=c("Contravariant"),mn=c(" (don\\‚Äòt accept any more specialized object)"),ka=i(),ls=t("p"),hn=c("Example:"),fa=i(),M=t("pre"),ma=i(),j=t("h4"),cs=t("a"),dn=c("Layered architectures"),ha=i(),rs=t("p"),js=t("strong"),yn=c("Universal architecture:"),da=i(),b=t("ul"),is=t("li"),As=t("em"),vn=c("Low Layer"),wn=c(" (internal): accessors and builders"),bn=i(),us=t("li"),Hs=t("em"),En=c("High Layer"),_n=c(" (external): services implemented using the low layer"),ya=i(),ks=t("p"),Rs=t("strong"),gn=c("Factorisation Cases:"),va=i(),f=t("ul"),fs=t("li"),xs=t("em"),In=c("Simple Inheritance:"),Tn=c(" descending aproach (factoring the bottom layer)"),Ln=i(),ms=t("li"),Ds=t("em"),Pn=c("Simple Inheritance:"),Sn=c(" ascending aproach (factoring the top layer)"),Cn=i(),hs=t("li"),Vs=t("em"),Nn=c("Multiple Inheritance:"),Mn=c(" independant bottom and top layers"),jn=i(),ds=t("li"),Gs=t("em"),An=c("Agregation with Delegation:"),Hn=c(" composition of the top layer (inject dependances)"),wa=i(),A=t("h4"),ys=t("a"),Rn=c("Other concepts"),this.h()},l(s){m=e(s,"H2",{id:!0});var o=p(m);H=e(o,"A",{href:!0});var $n=p(H);La=r($n,"Modularity and Typing"),$n.forEach(a),o.forEach(a),Os=u(s),_=e(s,"H4",{id:!0});var st=p(_);R=e(st,"A",{href:!0});var at=p(R);Pa=r(at,"Introduction"),at.forEach(a),st.forEach(a),Fs=u(s),x=e(s,"P",{});var nt=p(x);Sa=r(nt,"Evolution of the Languages towards an increasingly modular and abstract programming"),nt.forEach(a),Ws=u(s),g=e(s,"PRE",{class:!0});var ne=p(g);ne.forEach(a),Bs=u(s),I=e(s,"H4",{id:!0});var tt=p(I);D=e(tt,"A",{href:!0});var et=p(D);Ca=r(et,"Creating a new Type"),et.forEach(a),tt.forEach(a),Us=u(s),V=e(s,"P",{});var pt=p(V);Na=r(pt,"Creating a new Type (TypeScript) : example of the Car"),pt.forEach(a),zs=u(s),G=e(s,"P",{});var ot=p(G);Ma=r(ot,"Two points of view when defining a new type:"),ot.forEach(a),Xs=u(s),h=e(s,"UL",{});var ba=p(h);O=e(ba,"LI",{});var xn=p(O);vs=e(xn,"STRONG",{});var lt=p(vs);ja=r(lt,"Internal:"),lt.forEach(a),Aa=r(xn," How to build and manage the elements (how to build a car?)"),xn.forEach(a),Ha=u(ba),F=e(ba,"LI",{});var Dn=p(F);ws=e(Dn,"STRONG",{});var ct=p(ws);Ra=r(ct,"External:"),ct.forEach(a),xa=r(Dn," How to use the instances of that element (how to drive a car?)"),Dn.forEach(a),ba.forEach(a),Js=u(s),T=e(s,"PRE",{class:!0});var te=p(T);te.forEach(a),Ks=u(s),L=e(s,"H4",{id:!0});var rt=p(L);W=e(rt,"A",{href:!0});var it=p(W);Da=r(it,"Data Persistence"),it.forEach(a),rt.forEach(a),qs=u(s),B=e(s,"P",{});var ut=p(B);bs=e(ut,"STRONG",{});var kt=p(bs);Va=r(kt,"Immutability: Keep the initial state, each computation create a new object"),kt.forEach(a),ut.forEach(a),Qs=u(s),d=e(s,"UL",{});var Ea=p(d);U=e(Ea,"LI",{});var Vn=p(U);Es=e(Vn,"STRONG",{});var ft=p(Es);Ga=r(ft,"Benefits:"),ft.forEach(a),Oa=r(Vn," Permit to avoid errors due to the change of the object. For instance, if multiple entities can access the object at the same time, or if you just don\\‚Äòt want the state of the object to change."),Vn.forEach(a),Fa=u(Ea),z=e(Ea,"LI",{});var Gn=p(z);_s=e(Gn,"STRONG",{});var mt=p(_s);Wa=r(mt,"DrawBack:"),mt.forEach(a),Ba=r(Gn," Can be heavier on memory due to the initialisation of a new element for each change in the object state"),Gn.forEach(a),Ea.forEach(a),Ys=u(s),P=e(s,"PRE",{class:!0});var ee=p(P);ee.forEach(a),Zs=u(s),X=e(s,"P",{});var ht=p(X);gs=e(ht,"STRONG",{});var dt=p(gs);Ua=r(dt,"Mutability: The state of the object can change, allows to edit it"),dt.forEach(a),ht.forEach(a),$s=u(s),y=e(s,"UL",{});var _a=p(y);J=e(_a,"LI",{});var On=p(J);Is=e(On,"STRONG",{});var yt=p(Is);za=r(yt,"Benefits:"),yt.forEach(a),Xa=r(On," Some case just need to have an object evolution."),On.forEach(a),Ja=u(_a),K=e(_a,"LI",{});var Fn=p(K);Ts=e(Fn,"STRONG",{});var vt=p(Ts);Ka=r(vt,"DrawBack:"),vt.forEach(a),qa=r(Fn," Harder to manage the states, and riskier."),Fn.forEach(a),_a.forEach(a),sa=u(s),S=e(s,"PRE",{class:!0});var pe=p(S);pe.forEach(a),aa=u(s),C=e(s,"H4",{id:!0});var wt=p(C);q=e(wt,"A",{href:!0});var bt=p(q);Qa=r(bt,"Hierarchy: Aggregation and Inheritance"),bt.forEach(a),wt.forEach(a),na=u(s),Q=e(s,"P",{});var Et=p(Q);Ls=e(Et,"STRONG",{});var _t=p(Ls);Ya=r(_t,"Aggregation (Has a X)"),_t.forEach(a),Et.forEach(a),ta=u(s),Y=e(s,"P",{});var gt=p(Y);Za=r(gt,"Code factorisation with the aggregation of the differents classes"),gt.forEach(a),ea=u(s),Z=e(s,"P",{});var It=p(Z);$a=r(It,"Multiples forms:"),It.forEach(a),pa=u(s),v=e(s,"UL",{});var ga=p(v);$=e(ga,"LI",{});var Wn=p($);Ps=e(Wn,"STRONG",{});var Tt=p(Ps);sn=r(Tt,"Shared Aggregation"),Tt.forEach(a),an=r(Wn," (objects are independants)"),Wn.forEach(a),nn=u(ga),ss=e(ga,"LI",{});var Bn=p(ss);Ss=e(Bn,"STRONG",{});var Lt=p(Ss);tn=r(Lt,"Symbiosis"),Lt.forEach(a),en=r(Bn," (same life duration)"),Bn.forEach(a),ga.forEach(a),oa=u(s),as=e(s,"P",{});var Pt=p(as);pn=r(Pt,"Example:"),Pt.forEach(a),la=u(s),N=e(s,"PRE",{class:!0});var oe=p(N);oe.forEach(a),ca=u(s),ns=e(s,"P",{});var St=p(ns);Cs=e(St,"STRONG",{});var Ct=p(Cs);on=r(Ct,"Inheritance (Is a X)"),Ct.forEach(a),St.forEach(a),ra=u(s),ts=e(s,"P",{});var Nt=p(ts);ln=r(Nt,"Polymorphism : Multiplicity of essences"),Nt.forEach(a),ia=u(s),es=e(s,"P",{});var Mt=p(es);cn=r(Mt,"Data storage:"),Mt.forEach(a),ua=u(s),w=e(s,"UL",{});var Ia=p(w);ps=e(Ia,"LI",{});var Un=p(ps);Ns=e(Un,"STRONG",{});var jt=p(Ns);rn=r(jt,"Covariant"),jt.forEach(a),un=r(Un," (accept object that are more specialized)"),Un.forEach(a),kn=u(Ia),os=e(Ia,"LI",{});var zn=p(os);Ms=e(zn,"STRONG",{});var At=p(Ms);fn=r(At,"Contravariant"),At.forEach(a),mn=r(zn," (don\\‚Äòt accept any more specialized object)"),zn.forEach(a),Ia.forEach(a),ka=u(s),ls=e(s,"P",{});var Ht=p(ls);hn=r(Ht,"Example:"),Ht.forEach(a),fa=u(s),M=e(s,"PRE",{class:!0});var le=p(M);le.forEach(a),ma=u(s),j=e(s,"H4",{id:!0});var Rt=p(j);cs=e(Rt,"A",{href:!0});var xt=p(cs);dn=r(xt,"Layered architectures"),xt.forEach(a),Rt.forEach(a),ha=u(s),rs=e(s,"P",{});var Dt=p(rs);js=e(Dt,"STRONG",{});var Vt=p(js);yn=r(Vt,"Universal architecture:"),Vt.forEach(a),Dt.forEach(a),da=u(s),b=e(s,"UL",{});var Ta=p(b);is=e(Ta,"LI",{});var Xn=p(is);As=e(Xn,"EM",{});var Gt=p(As);vn=r(Gt,"Low Layer"),Gt.forEach(a),wn=r(Xn," (internal): accessors and builders"),Xn.forEach(a),bn=u(Ta),us=e(Ta,"LI",{});var Jn=p(us);Hs=e(Jn,"EM",{});var Ot=p(Hs);En=r(Ot,"High Layer"),Ot.forEach(a),_n=r(Jn," (external): services implemented using the low layer"),Jn.forEach(a),Ta.forEach(a),ya=u(s),ks=e(s,"P",{});var Ft=p(ks);Rs=e(Ft,"STRONG",{});var Wt=p(Rs);gn=r(Wt,"Factorisation Cases:"),Wt.forEach(a),Ft.forEach(a),va=u(s),f=e(s,"UL",{});var E=p(f);fs=e(E,"LI",{});var Kn=p(fs);xs=e(Kn,"EM",{});var Bt=p(xs);In=r(Bt,"Simple Inheritance:"),Bt.forEach(a),Tn=r(Kn," descending aproach (factoring the bottom layer)"),Kn.forEach(a),Ln=u(E),ms=e(E,"LI",{});var qn=p(ms);Ds=e(qn,"EM",{});var Ut=p(Ds);Pn=r(Ut,"Simple Inheritance:"),Ut.forEach(a),Sn=r(qn," ascending aproach (factoring the top layer)"),qn.forEach(a),Cn=u(E),hs=e(E,"LI",{});var Qn=p(hs);Vs=e(Qn,"EM",{});var zt=p(Vs);Nn=r(zt,"Multiple Inheritance:"),zt.forEach(a),Mn=r(Qn," independant bottom and top layers"),Qn.forEach(a),jn=u(E),ds=e(E,"LI",{});var Yn=p(ds);Gs=e(Yn,"EM",{});var Xt=p(Gs);An=r(Xt,"Agregation with Delegation:"),Xt.forEach(a),Hn=r(Yn," composition of the top layer (inject dependances)"),Yn.forEach(a),E.forEach(a),wa=u(s),A=e(s,"H4",{id:!0});var Jt=p(A);ys=e(Jt,"A",{href:!0});var Kt=p(ys);Rn=r(Kt,"Other concepts"),Kt.forEach(a),Jt.forEach(a),this.h()},h(){k(H,"href","#modularity-and-typing"),k(m,"id","modularity-and-typing"),k(R,"href","#introduction"),k(_,"id","introduction"),k(g,"class","language-undefined"),k(D,"href","#creating-a-new-type"),k(I,"id","creating-a-new-type"),k(T,"class","language-typescript"),k(W,"href","#data-persistence"),k(L,"id","data-persistence"),k(P,"class","language-typescript"),k(S,"class","language-typescript"),k(q,"href","#hierarchy-aggregation-and-inheritance"),k(C,"id","hierarchy-aggregation-and-inheritance"),k(N,"class","language-typescript"),k(M,"class","language-typescript"),k(cs,"href","#layered-architectures"),k(j,"id","layered-architectures"),k(ys,"href","#other-concepts"),k(A,"id","other-concepts")},m(s,o){l(s,m,o),n(m,H),n(H,La),l(s,Os,o),l(s,_,o),n(_,R),n(R,Pa),l(s,Fs,o),l(s,x,o),n(x,Sa),l(s,Ws,o),l(s,g,o),g.innerHTML=Qt,l(s,Bs,o),l(s,I,o),n(I,D),n(D,Ca),l(s,Us,o),l(s,V,o),n(V,Na),l(s,zs,o),l(s,G,o),n(G,Ma),l(s,Xs,o),l(s,h,o),n(h,O),n(O,vs),n(vs,ja),n(O,Aa),n(h,Ha),n(h,F),n(F,ws),n(ws,Ra),n(F,xa),l(s,Js,o),l(s,T,o),T.innerHTML=Yt,l(s,Ks,o),l(s,L,o),n(L,W),n(W,Da),l(s,qs,o),l(s,B,o),n(B,bs),n(bs,Va),l(s,Qs,o),l(s,d,o),n(d,U),n(U,Es),n(Es,Ga),n(U,Oa),n(d,Fa),n(d,z),n(z,_s),n(_s,Wa),n(z,Ba),l(s,Ys,o),l(s,P,o),P.innerHTML=Zt,l(s,Zs,o),l(s,X,o),n(X,gs),n(gs,Ua),l(s,$s,o),l(s,y,o),n(y,J),n(J,Is),n(Is,za),n(J,Xa),n(y,Ja),n(y,K),n(K,Ts),n(Ts,Ka),n(K,qa),l(s,sa,o),l(s,S,o),S.innerHTML=$t,l(s,aa,o),l(s,C,o),n(C,q),n(q,Qa),l(s,na,o),l(s,Q,o),n(Q,Ls),n(Ls,Ya),l(s,ta,o),l(s,Y,o),n(Y,Za),l(s,ea,o),l(s,Z,o),n(Z,$a),l(s,pa,o),l(s,v,o),n(v,$),n($,Ps),n(Ps,sn),n($,an),n(v,nn),n(v,ss),n(ss,Ss),n(Ss,tn),n(ss,en),l(s,oa,o),l(s,as,o),n(as,pn),l(s,la,o),l(s,N,o),N.innerHTML=se,l(s,ca,o),l(s,ns,o),n(ns,Cs),n(Cs,on),l(s,ra,o),l(s,ts,o),n(ts,ln),l(s,ia,o),l(s,es,o),n(es,cn),l(s,ua,o),l(s,w,o),n(w,ps),n(ps,Ns),n(Ns,rn),n(ps,un),n(w,kn),n(w,os),n(os,Ms),n(Ms,fn),n(os,mn),l(s,ka,o),l(s,ls,o),n(ls,hn),l(s,fa,o),l(s,M,o),M.innerHTML=ae,l(s,ma,o),l(s,j,o),n(j,cs),n(cs,dn),l(s,ha,o),l(s,rs,o),n(rs,js),n(js,yn),l(s,da,o),l(s,b,o),n(b,is),n(is,As),n(As,vn),n(is,wn),n(b,bn),n(b,us),n(us,Hs),n(Hs,En),n(us,_n),l(s,ya,o),l(s,ks,o),n(ks,Rs),n(Rs,gn),l(s,va,o),l(s,f,o),n(f,fs),n(fs,xs),n(xs,In),n(fs,Tn),n(f,Ln),n(f,ms),n(ms,Ds),n(Ds,Pn),n(ms,Sn),n(f,Cn),n(f,hs),n(hs,Vs),n(Vs,Nn),n(hs,Mn),n(f,jn),n(f,ds),n(ds,Gs),n(Gs,An),n(ds,Hn),l(s,wa,o),l(s,A,o),n(A,ys),n(ys,Rn)},p:Zn,i:Zn,o:Zn,d(s){s&&a(m),s&&a(Os),s&&a(_),s&&a(Fs),s&&a(x),s&&a(Ws),s&&a(g),s&&a(Bs),s&&a(I),s&&a(Us),s&&a(V),s&&a(zs),s&&a(G),s&&a(Xs),s&&a(h),s&&a(Js),s&&a(T),s&&a(Ks),s&&a(L),s&&a(qs),s&&a(B),s&&a(Qs),s&&a(d),s&&a(Ys),s&&a(P),s&&a(Zs),s&&a(X),s&&a($s),s&&a(y),s&&a(sa),s&&a(S),s&&a(aa),s&&a(C),s&&a(na),s&&a(Q),s&&a(ta),s&&a(Y),s&&a(ea),s&&a(Z),s&&a(pa),s&&a(v),s&&a(oa),s&&a(as),s&&a(la),s&&a(N),s&&a(ca),s&&a(ns),s&&a(ra),s&&a(ts),s&&a(ia),s&&a(es),s&&a(ua),s&&a(w),s&&a(ka),s&&a(ls),s&&a(fa),s&&a(M),s&&a(ma),s&&a(j),s&&a(ha),s&&a(rs),s&&a(da),s&&a(b),s&&a(ya),s&&a(ks),s&&a(va),s&&a(f),s&&a(wa),s&&a(A)}}}const fe={title:"Data Structures and Programming Paradigms",short:"Ways of organizing and storing data and approaches to writing and structuring code",topic:"computer-science data-structures paradigms"};class me extends ce{constructor(m){super(),re(this,m,null,ue,ie,{})}}export{me as default,fe as metadata};
