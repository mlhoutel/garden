import{S as Uu,i as ju,s as Wu,k as t,r as k,a as l,l as p,m as o,u as i,h as n,c as u,p as r,b as c,F as a,n as Ne}from"./index.7aa01268.js";function Vu(ku){let L,Es,Kt,xa,H,ys,Yt,ga,hs,B,cn,Qt,Xt,x,Jt,Ua,ws,ln,Zt,ja,f,_s,un,sp,np,ap,Ts,kn,tp,pp,op,bs,rn,ep,cp,lp,g,fn,up,kp,U,ip,rp,As,dn,fp,dp,Wa,j,Ss,mp,Va,Os,mn,vp,Fa,G,vn,d,En,Ep,yp,yn,hp,wp,hn,_p,Tp,wn,bp,Ap,_n,Sp,Op,T,v,Tn,Cp,Dp,bn,An,Pp,Mp,Sn,On,Rp,Np,Cn,Lp,Gp,Dn,Ip,qp,E,Pn,Hp,Bp,Mn,Rn,xp,gp,Nn,Ln,Up,jp,Gn,Wp,Vp,In,Fp,zp,y,qn,$p,Kp,Hn,Bn,Yp,Qp,xn,gn,Xp,Jp,Un,Zp,so,jn,no,ao,h,Wn,to,po,Vn,Fn,oo,eo,zn,$n,co,lo,Kn,uo,ko,Yn,io,za,Cs,Qn,ro,$a,I,Xn,m,Jn,fo,mo,Zn,vo,Eo,sa,yo,ho,na,wo,_o,aa,To,bo,W,w,ta,Ao,So,pa,oa,Oo,Co,ea,ca,Do,Po,la,Mo,Ro,ua,No,Lo,_,ka,Go,Io,ia,ra,qo,Ho,fa,da,Bo,xo,ma,go,Uo,va,jo,Ka,Ds,Ea,Wo,Ya,V,iu=`<code class="language-csharp"><span class="token class-name">Char</span> A <span class="token operator">=</span> Char<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token keyword">string</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Char</span> output<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>Char<span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span><span class="token keyword">string</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token keyword">out</span> output<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// Action</span>
<span class="token punctuation">&#125;</span></code>`,Qa,F,Ps,Vo,Xa,z,ru=`<code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Console</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> name <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Char</span> key <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Ja,$,Ms,Fo,Za,K,fu='<code class="language-csharp"><span class="token keyword">const</span> <span class="token class-name">INT32</span> MAJORITY <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span></code>',st,Y,Rs,zo,nt,Q,Ns,$o,at,Ls,ya,Ko,tt,X,du=`<code class="language-csharp"><span class="token class-name">String</span> animal <span class="token operator">=</span> <span class="token string">"Alpine newt"</span><span class="token punctuation">;</span>
animal<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> <span class="token comment">// 11</span>
animal<span class="token punctuation">.</span>Chars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 'A'</span>
animal<span class="token punctuation">.</span>ToLower<span class="token punctuation">;</span> <span class="token comment">// "alpine newt"</span>
animal<span class="token punctuation">.</span>ToUpper<span class="token punctuation">;</span> <span class="token comment">// "ALPINE NEWT"</span>
animal<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "lpine newt"</span></code>`,pt,Gs,ha,Yo,ot,J,mu=`<code class="language-csharp"><span class="token class-name">String<span class="token punctuation">[</span><span class="token punctuation">]</span></span> days <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">String<span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> <span class="token string">"Monday"</span><span class="token punctuation">,</span> <span class="token string">"Tuesday"</span><span class="token punctuation">,</span> <span class="token string">"Wednesday"</span><span class="token punctuation">,</span> <span class="token string">"Thursday"</span><span class="token punctuation">,</span> <span class="token string">"Friday"</span><span class="token punctuation">,</span> <span class="token string">"Saturday"</span><span class="token punctuation">,</span> <span class="token string">"Sunday"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">String</span> day <span class="token keyword">in</span> days<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>days<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>days<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

Array<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span>days<span class="token punctuation">,</span> <span class="token string">"Wednesday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 (first occurency)</span>
Array<span class="token punctuation">.</span><span class="token function">LastIndexOf</span><span class="token punctuation">(</span>days<span class="token punctuation">,</span> <span class="token string">"Wednesday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 (last occurency)</span>
Array<span class="token punctuation">.</span><span class="token function">Reverse</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>
Array<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,et,Is,wa,Qo,ct,Z,vu=`<code class="language-csharp"><span class="token class-name">List <span class="token punctuation">&lt;</span>String<span class="token punctuation">></span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>String<span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token keyword">in</span> names<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
name <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">"s"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>names<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"s"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

names<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
names<span class="token punctuation">.</span><span class="token function">LastIndexOf</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
names<span class="token punctuation">.</span><span class="token function">Reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
names<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

names<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
names<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
names<span class="token punctuation">.</span><span class="token function">RemoveAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,lt,qs,_a,Xo,ut,ss,Eu=`<code class="language-csharp"><span class="token class-name"><span class="token keyword">string</span></span> date <span class="token operator">=</span> <span class="token string">"01/01/2000"</span><span class="token punctuation">;</span>
<span class="token class-name">DateTime</span> dateA <span class="token operator">=</span> DateTime<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">DateTime</span> dateB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTime</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,kt,ns,Hs,Jo,it,as,Bs,Zo,rt,xs,Ta,se,ft,ts,yu=`<code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
<span class="token comment">/* private Property */</span>
<span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">DateTime</span> born<span class="token punctuation">;</span>

	<span class="token comment">/* Public Property */</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">&#123;</span>
	<span class="token keyword">get</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
	<span class="token keyword">set</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
			<span class="token keyword">throw</span><span class="token punctuation">.</span><span class="token function">newArgumentException</span><span class="token punctuation">(</span><span class="token string">"Name can't be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

	<span class="token comment">/* Public Constructor */</span>
<span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> pName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
	Name <span class="token operator">=</span> pName<span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>born <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

	<span class="token comment">/* Method Definition */</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token class-name"><span class="token keyword">int</span></span> Age <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Year <span class="token operator">-</span> born<span class="token punctuation">.</span>Year<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>born<span class="token punctuation">.</span>Month <span class="token operator">></span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Month<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
		Age<span class="token operator">-=</span><span class="token number">1</span><span class="token punctuation">;</span> 
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>born<span class="token punctuation">.</span>Month <span class="token operator">></span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Month<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>born<span class="token punctuation">.</span>Day <span class="token operator">></span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Day<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
			Age<span class="token operator">-=</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> Age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

	<span class="token comment">/* Method Overload */</span>
<span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token string">"&#92;nName: "</span> <span class="token operator">+</span> Name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

	<span class="token comment">/* Redifine Operators*/</span>

	<span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> Equals <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> person<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>person <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	<span class="token class-name">Person</span> p <span class="token operator">=</span> person <span class="token keyword">as</span> <span class="token class-name">Person</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Name <span class="token operator">==</span> p<span class="token punctuation">.</span>Name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">==</span><span class="token punctuation">(</span><span class="token class-name">Person</span> a<span class="token punctuation">,</span> <span class="token class-name">Person</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">!=</span><span class="token punctuation">(</span><span class="token class-name">Person</span> a<span class="token punctuation">,</span> <span class="token class-name">Person</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Class Instanciation */</span>
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,dt,gs,ba,ne,mt,b,Aa,Sa,ae,te,Oa,Ca,pe,oe,Da,Pa,ee,vt,Us,Ma,ce,Et,js,ps,le,Ra,ue,ke,yt,os,hu=`<code class="language-csharp"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Shape</span></span> <span class="token punctuation">&#123;</span>
	<span class="token class-name"><span class="token keyword">int</span></span> side<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token function">Square</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> nSide<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> side <span class="token operator">=</span> nSide<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> side <span class="token operator">*</span> side<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> 

	<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token class-name">Square</span> square <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Square</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Area of the square: "</span> <span class="token operator">+</span>  square<span class="token punctuation">.</span><span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Shape</span></span> <span class="token punctuation">&#123;</span>
	<span class="token class-name"><span class="token keyword">int</span></span> radius<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token function">Circle</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> nRadius<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> radius <span class="token operator">=</span> nRadius<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">3.14159265</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> 

	<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token class-name">Square</span> square <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Square</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Area of the square: "</span> <span class="token operator">+</span>  square<span class="token punctuation">.</span><span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Class Instanciation */</span>
<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

	<span class="token class-name">List<span class="token punctuation">&lt;</span>Shape<span class="token punctuation">></span></span> shapes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Shape<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Array of the Abstract class, which of course will not contain any Shape, but Squares and Circles... */</span>
	shapes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Square</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	shapes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Circle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> shapes<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>shapes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">GetArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* We can now call the method of the abstract class for every derivative instanciated */</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,ht,Ws,ie,wt,Vs,Na,re,_t,es,Fs,fe,Tt,cs,wu=`<code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">projectName</span><span class="token punctuation">;</span>

<span class="token keyword">namespace</span> <span class="token namespace">UnitTestNameProject</span> <span class="token punctuation">&#123;</span>

	<span class="token punctuation">[</span><span class="token class-name">Test</span> Class<span class="token punctuation">]</span>
	<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnitTestClass</span> <span class="token punctuation">&#123;</span>

		<span class="token punctuation">[</span><span class="token class-name">Test</span> Method<span class="token punctuation">]</span>
		<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Object</span><span class="token punctuation">(</span> <span class="token comment">/* ...*/</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// Theorical result</span>
			Assert<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* Factorisation */</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">TestInitialize</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Object</span><span class="token punctuation">(</span> <span class="token comment">/* ...*/</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,bt,zs,de,At,$s,me,St,ls,_u=`<code class="language-csharp"><span class="token comment">/* Values Assertion */</span>
Assert<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>valueA<span class="token punctuation">,</span> valueB<span class="token punctuation">)</span><span class="token punctuation">;</span>

Assert<span class="token punctuation">.</span><span class="token function">IsTrue</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">IsFalse</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Assert<span class="token punctuation">.</span><span class="token function">Null</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">IsNotNull</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* Instances Comparison */</span>
Assert<span class="token punctuation">.</span><span class="token function">AreEqual</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span> 
Assert<span class="token punctuation">.</span><span class="token function">AreNotEqual</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span>

Assert<span class="token punctuation">.</span><span class="token function">AreSame</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">AreNotSame</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Ot,us,Ks,ve,Ct,ks,Tu=`<code class="language-csharp">COSTS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token punctuation">&#123;</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">grade</span> <span class="token punctuation">&#123;</span> A <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> B <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> C <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">int</span></span> vGrade <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>Grade<span class="token punctuation">;</span>
cost <span class="token operator">=</span> COSTS<span class="token punctuation">[</span>vGrade<span class="token punctuation">]</span></code>`,Dt,is,Ys,Ee,Pt,Qs,La,ye,Mt,Xs,he,Rt,rs,bu=`<code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Window</span> <span class="token attr-name">Title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Windows Title<span class="token punctuation">"</span></span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>640<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>480<span class="token punctuation">"</span></span> <span class="token attr-name">MinWidth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name">MaxWidth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>800<span class="token punctuation">"</span></span> <span class="token attr-name">ResizeMode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>NoResize<span class="token punctuation">"</span></span> <span class="token attr-name">WindowsStartupLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CenterScreen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Grid.ColumnDefinition</span> <span class="token punctuation">/></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ColumnDefinition</span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>330<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- Fixed Width --></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ColumnDefinition</span> <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- Auto Width --></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid.ColumnDefinition</span><span class="token punctuation">></span></span>

	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Menu</span><span class="token punctuation">></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MenuItem</span> <span class="token attr-name">Header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_Menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MenuItem</span> <span class="token attr-name">Header</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_SubMenu<span class="token punctuation">"</span></span> <span class="token attr-name">Click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SubMenuFunction<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MenuItem</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Menu</span><span class="token punctuation">></span></span>

	<span class="token comment">&lt;!-- GUI Definition --></span>

	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Code_Name<span class="token punctuation">"</span></span> <span class="token attr-name">Content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">HorizontalAlignment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">Margin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0,0,0,0<span class="token punctuation">"</span></span> <span class="token attr-name">Grid.Column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Grid</span><span class="token punctuation">></span></span></code>`,Nt,Js,Ga,we,Lt,Zs,_e,Gt,fs,Au=`<code class="language-csharp"><span class="token keyword">public</span> <span class="token function">MainPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* Generate a Button Grid */</span>
	<span class="token keyword">private</span> <span class="token class-name">Button<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span></span> ButtonGrid<span class="token punctuation">;</span>

	<span class="token class-name"><span class="token keyword">int</span></span> GridHeight <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token class-name"><span class="token keyword">int</span></span> GridWidth <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

	<span class="token keyword">this</span><span class="token punctuation">.</span>ButtonGrid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Button</span><span class="token punctuation">[</span>GridWidth<span class="token punctuation">,</span> GridHeight<span class="token punctuation">]</span><span class="token punctuation">;</span>

	grille <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Grid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	grille<span class="token punctuation">.</span>Width <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>
	grid<span class="token punctuation">.</span>HorizontalAlignment <span class="token operator">=</span> HorizontalAlignment<span class="token punctuation">.</span>Left<span class="token punctuation">;</span>
	grid<span class="token punctuation">.</span>VerticalAlignment <span class="token operator">=</span> VerticalAlignment<span class="token punctuation">.</span>Top<span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> GridWidth<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> GridHeight<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>ButtonGrid<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>ButtonGrid<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Margin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Thickness</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">32</span><span class="token operator">*</span>i<span class="token punctuation">,</span> <span class="token number">20</span> <span class="token operator">+</span> <span class="token number">32</span><span class="token operator">*</span>j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			Grid<span class="token punctuation">.</span><span class="token function">SetRow</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ButtonGrid<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>grid<span class="token punctuation">.</span>Childre<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ButtonGrid<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,It,sn,Ia,Te,qt,ds,Su=`<code class="language-csharp"><span class="token keyword">public</span> <span class="token function">MyPopup</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   	<span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   	texte<span class="token punctuation">.</span>Text <span class="token operator">=</span> text<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">MyPopup</span> popup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MyPopup</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
popup<span class="token punctuation">.</span><span class="token function">ShowDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
popup<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> popupName <span class="token operator">=</span> popup<span class="token punctuation">.</span>Name<span class="token punctuation">;</span>

MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Application<span class="token punctuation">.</span>Current<span class="token punctuation">.</span><span class="token function">Shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Ht,nn,qa,be,Bt,ms,an,Ae,xt,tn,Ha,Se,gt,vs,pn,Oe,Ut,on,Ba,Ce;return{c(){L=t("h2"),Es=t("a"),Kt=k("Cheat Sheets"),xa=l(),H=t("h3"),ys=t("a"),Yt=k("Usefull Informations"),ga=l(),hs=t("blockquote"),B=t("p"),cn=t("strong"),Qt=k("Official Documentation:"),Xt=l(),x=t("a"),Jt=k("MicrosoftCsharp"),Ua=l(),ws=t("p"),ln=t("strong"),Zt=k("About Csharp"),ja=l(),f=t("ul"),_s=t("li"),un=t("strong"),sp=k("Type of Language:"),np=k(" Procedural, Object-Oriented"),ap=l(),Ts=t("li"),kn=t("strong"),tp=k("Born in:"),pp=k(" 2000"),op=l(),bs=t("li"),rn=t("strong"),ep=k("Caracteristics:"),cp=k(" Microsoft plateforms language"),lp=l(),g=t("li"),fn=t("strong"),up=k("Popularity:"),kp=k(" 6.5% (4th) "),U=t("a"),ip=k("src"),rp=l(),As=t("li"),dn=t("strong"),fp=k("Usefull for:"),dp=k(" software, mobile, web api…"),Wa=l(),j=t("h3"),Ss=t("a"),mp=k("Types and Variables"),Va=l(),Os=t("p"),mn=t("strong"),vp=k("PRIMITIVES"),Fa=l(),G=t("table"),vn=t("thead"),d=t("tr"),En=t("th"),Ep=k("Name"),yp=l(),yn=t("th"),hp=k("Expression"),wp=l(),hn=t("th"),_p=k("Size"),Tp=l(),wn=t("th"),bp=k("Min"),Ap=l(),_n=t("th"),Sp=k("Max"),Op=l(),T=t("tbody"),v=t("tr"),Tn=t("td"),Cp=k("Boolean"),Dp=l(),bn=t("td"),An=t("code"),Pp=k("$foo = true;"),Mp=l(),Sn=t("td"),On=t("code"),Rp=k("1 bits"),Np=l(),Cn=t("td"),Lp=k("0 (false)"),Gp=l(),Dn=t("td"),Ip=k("1 (true)"),qp=l(),E=t("tr"),Pn=t("td"),Hp=k("Int"),Bp=l(),Mn=t("td"),Rn=t("code"),xp=k("$foo = 1234;"),gp=l(),Nn=t("td"),Ln=t("code"),Up=k("32+ bits"),jp=l(),Gn=t("td"),Wp=k("-9.223e+15"),Vp=l(),In=t("td"),Fp=k("9.223e+15"),zp=l(),y=t("tr"),qn=t("td"),$p=k("Float"),Kp=l(),Hn=t("td"),Bn=t("code"),Yp=k("$foo = 1234;"),Qp=l(),xn=t("td"),gn=t("code"),Xp=k("32+ bits"),Jp=l(),Un=t("td"),Zp=k("-9.223e+15"),so=l(),jn=t("td"),no=k("9.223e+15"),ao=l(),h=t("tr"),Wn=t("td"),to=k("Double"),po=l(),Vn=t("td"),Fn=t("code"),oo=k("$foo = 1234;"),eo=l(),zn=t("td"),$n=t("code"),co=k("32+ bits"),lo=l(),Kn=t("td"),uo=k("-9.223e+15"),ko=l(),Yn=t("td"),io=k("9.223e+15"),za=l(),Cs=t("p"),Qn=t("strong"),ro=k("COMPLEX"),$a=l(),I=t("table"),Xn=t("thead"),m=t("tr"),Jn=t("th"),fo=k("Name"),mo=l(),Zn=t("th"),vo=k("Expression"),Eo=l(),sa=t("th"),yo=k("Size"),ho=l(),na=t("th"),wo=k("Min"),_o=l(),aa=t("th"),To=k("Max"),bo=l(),W=t("tbody"),w=t("tr"),ta=t("td"),Ao=k("DateTime"),So=l(),pa=t("td"),oa=t("code"),Oo=k("$foo = true;"),Co=l(),ea=t("td"),ca=t("code"),Do=k("1 bits"),Po=l(),la=t("td"),Mo=k("0 (false)"),Ro=l(),ua=t("td"),No=k("1 (true)"),Lo=l(),_=t("tr"),ka=t("td"),Go=k("Point"),Io=l(),ia=t("td"),ra=t("code"),qo=k("$foo = 1234;"),Ho=l(),fa=t("td"),da=t("code"),Bo=k("32+ bits"),xo=l(),ma=t("td"),go=k("-9.223e+15"),Uo=l(),va=t("td"),jo=k("9.223e+15"),Ka=l(),Ds=t("p"),Ea=t("strong"),Wo=k("CONVERSION"),Ya=l(),V=t("pre"),Qa=l(),F=t("h3"),Ps=t("a"),Vo=k("Input Output"),Xa=l(),z=t("pre"),Ja=l(),$=t("h3"),Ms=t("a"),Fo=k("Variables, Tests and Loops"),Za=l(),K=t("pre"),st=l(),Y=t("h3"),Rs=t("a"),zo=k("Random numbers"),nt=l(),Q=t("h3"),Ns=t("a"),$o=k("Arrays"),at=l(),Ls=t("p"),ya=t("strong"),Ko=k("STRINGS"),tt=l(),X=t("pre"),pt=l(),Gs=t("p"),ha=t("strong"),Yo=k("ARRAYS"),ot=l(),J=t("pre"),et=l(),Is=t("p"),wa=t("strong"),Qo=k("LISTS"),ct=l(),Z=t("pre"),lt=l(),qs=t("p"),_a=t("strong"),Xo=k("DATE"),ut=l(),ss=t("pre"),kt=l(),ns=t("h3"),Hs=t("a"),Jo=k("Functions"),it=l(),as=t("h3"),Bs=t("a"),Zo=k("Classes and Properties"),rt=l(),xs=t("p"),Ta=t("strong"),se=k("METHODS AND CONSTRUCTOR"),ft=l(),ts=t("pre"),dt=l(),gs=t("p"),ba=t("strong"),ne=k("DEFAULT METHODS"),mt=l(),b=t("ul"),Aa=t("li"),Sa=t("code"),ae=k("object.ToString();"),te=l(),Oa=t("li"),Ca=t("code"),pe=k("object.Equals(object);"),oe=l(),Da=t("li"),Pa=t("code"),ee=k("object.GetHashCode();"),vt=l(),Us=t("p"),Ma=t("strong"),ce=k("ABSTRACT CLASS"),Et=l(),js=t("blockquote"),ps=t("p"),le=k("An "),Ra=t("code"),ue=k("Abstract Classes"),ke=k(` cannot be instantiated, but can be very useful
by creating different classes that inherit its properties to be sure
of their homogeneity, and then be able to store them in common tables
per instance.`),yt=l(),os=t("pre"),ht=l(),Ws=t("p"),ie=k("INTERFACES"),wt=l(),Vs=t("blockquote"),Na=t("p"),re=k("TODO"),_t=l(),es=t("h3"),Fs=t("a"),fe=k("Test Unit"),Tt=l(),cs=t("pre"),bt=l(),zs=t("p"),de=k("ASSERTIONS"),At=l(),$s=t("p"),me=k(":"),St=l(),ls=t("pre"),Ot=l(),us=t("h3"),Ks=t("a"),ve=k("Enumerators"),Ct=l(),ks=t("pre"),Dt=l(),is=t("h2"),Ys=t("a"),Ee=k("XAML"),Pt=l(),Qs=t("p"),La=t("strong"),ye=k("GUI DESIGN"),Mt=l(),Xs=t("p"),he=k("The GUI Design is defined in App.xaml"),Rt=l(),rs=t("pre"),Nt=l(),Js=t("p"),Ga=t("strong"),we=k("BACK"),Lt=l(),Zs=t("p"),_e=k("The Code-Behin of the GUI is defined in the App.xaml.cs"),Gt=l(),fs=t("pre"),It=l(),sn=t("p"),Ia=t("strong"),Te=k("CUSTOM POPUP"),qt=l(),ds=t("pre"),Ht=l(),nn=t("blockquote"),qa=t("p"),be=k("TODO"),Bt=l(),ms=t("h2"),an=t("a"),Ae=k("MVVM Light"),xt=l(),tn=t("blockquote"),Ha=t("p"),Se=k("TODO"),gt=l(),vs=t("h2"),pn=t("a"),Oe=k("API"),Ut=l(),on=t("blockquote"),Ba=t("p"),Ce=k("TODO"),this.h()},l(s){L=p(s,"H2",{id:!0});var e=o(L);Es=p(e,"A",{href:!0});var Le=o(Es);Kt=i(Le,"Cheat Sheets"),Le.forEach(n),e.forEach(n),xa=u(s),H=p(s,"H3",{id:!0});var Ge=o(H);ys=p(Ge,"A",{href:!0});var Ie=o(ys);Yt=i(Ie,"Usefull Informations"),Ie.forEach(n),Ge.forEach(n),ga=u(s),hs=p(s,"BLOCKQUOTE",{});var qe=o(hs);B=p(qe,"P",{});var jt=o(B);cn=p(jt,"STRONG",{});var He=o(cn);Qt=i(He,"Official Documentation:"),He.forEach(n),Xt=u(jt),x=p(jt,"A",{href:!0,rel:!0});var Be=o(x);Jt=i(Be,"MicrosoftCsharp"),Be.forEach(n),jt.forEach(n),qe.forEach(n),Ua=u(s),ws=p(s,"P",{});var xe=o(ws);ln=p(xe,"STRONG",{});var ge=o(ln);Zt=i(ge,"About Csharp"),ge.forEach(n),xe.forEach(n),ja=u(s),f=p(s,"UL",{});var A=o(f);_s=p(A,"LI",{});var De=o(_s);un=p(De,"STRONG",{});var Ue=o(un);sp=i(Ue,"Type of Language:"),Ue.forEach(n),np=i(De," Procedural, Object-Oriented"),De.forEach(n),ap=u(A),Ts=p(A,"LI",{});var Pe=o(Ts);kn=p(Pe,"STRONG",{});var je=o(kn);tp=i(je,"Born in:"),je.forEach(n),pp=i(Pe," 2000"),Pe.forEach(n),op=u(A),bs=p(A,"LI",{});var Me=o(bs);rn=p(Me,"STRONG",{});var We=o(rn);ep=i(We,"Caracteristics:"),We.forEach(n),cp=i(Me," Microsoft plateforms language"),Me.forEach(n),lp=u(A),g=p(A,"LI",{});var Wt=o(g);fn=p(Wt,"STRONG",{});var Ve=o(fn);up=i(Ve,"Popularity:"),Ve.forEach(n),kp=i(Wt," 6.5% (4th) "),U=p(Wt,"A",{href:!0,rel:!0});var Fe=o(U);ip=i(Fe,"src"),Fe.forEach(n),Wt.forEach(n),rp=u(A),As=p(A,"LI",{});var Re=o(As);dn=p(Re,"STRONG",{});var ze=o(dn);fp=i(ze,"Usefull for:"),ze.forEach(n),dp=i(Re," software, mobile, web api…"),Re.forEach(n),A.forEach(n),Wa=u(s),j=p(s,"H3",{id:!0});var $e=o(j);Ss=p($e,"A",{href:!0});var Ke=o(Ss);mp=i(Ke,"Types and Variables"),Ke.forEach(n),$e.forEach(n),Va=u(s),Os=p(s,"P",{});var Ye=o(Os);mn=p(Ye,"STRONG",{});var Qe=o(mn);vp=i(Qe,"PRIMITIVES"),Qe.forEach(n),Ye.forEach(n),Fa=u(s),G=p(s,"TABLE",{});var Vt=o(G);vn=p(Vt,"THEAD",{});var Xe=o(vn);d=p(Xe,"TR",{class:!0});var S=o(d);En=p(S,"TH",{});var Je=o(En);Ep=i(Je,"Name"),Je.forEach(n),yp=u(S),yn=p(S,"TH",{});var Ze=o(yn);hp=i(Ze,"Expression"),Ze.forEach(n),wp=u(S),hn=p(S,"TH",{});var sc=o(hn);_p=i(sc,"Size"),sc.forEach(n),Tp=u(S),wn=p(S,"TH",{});var nc=o(wn);bp=i(nc,"Min"),nc.forEach(n),Ap=u(S),_n=p(S,"TH",{});var ac=o(_n);Sp=i(ac,"Max"),ac.forEach(n),S.forEach(n),Xe.forEach(n),Op=u(Vt),T=p(Vt,"TBODY",{});var q=o(T);v=p(q,"TR",{});var O=o(v);Tn=p(O,"TD",{});var tc=o(Tn);Cp=i(tc,"Boolean"),tc.forEach(n),Dp=u(O),bn=p(O,"TD",{});var pc=o(bn);An=p(pc,"CODE",{});var oc=o(An);Pp=i(oc,"$foo = true;"),oc.forEach(n),pc.forEach(n),Mp=u(O),Sn=p(O,"TD",{});var ec=o(Sn);On=p(ec,"CODE",{});var cc=o(On);Rp=i(cc,"1 bits"),cc.forEach(n),ec.forEach(n),Np=u(O),Cn=p(O,"TD",{});var lc=o(Cn);Lp=i(lc,"0 (false)"),lc.forEach(n),Gp=u(O),Dn=p(O,"TD",{});var uc=o(Dn);Ip=i(uc,"1 (true)"),uc.forEach(n),O.forEach(n),qp=u(q),E=p(q,"TR",{});var C=o(E);Pn=p(C,"TD",{});var kc=o(Pn);Hp=i(kc,"Int"),kc.forEach(n),Bp=u(C),Mn=p(C,"TD",{});var ic=o(Mn);Rn=p(ic,"CODE",{});var rc=o(Rn);xp=i(rc,"$foo = 1234;"),rc.forEach(n),ic.forEach(n),gp=u(C),Nn=p(C,"TD",{});var fc=o(Nn);Ln=p(fc,"CODE",{});var dc=o(Ln);Up=i(dc,"32+ bits"),dc.forEach(n),fc.forEach(n),jp=u(C),Gn=p(C,"TD",{});var mc=o(Gn);Wp=i(mc,"-9.223e+15"),mc.forEach(n),Vp=u(C),In=p(C,"TD",{});var vc=o(In);Fp=i(vc,"9.223e+15"),vc.forEach(n),C.forEach(n),zp=u(q),y=p(q,"TR",{});var D=o(y);qn=p(D,"TD",{});var Ec=o(qn);$p=i(Ec,"Float"),Ec.forEach(n),Kp=u(D),Hn=p(D,"TD",{});var yc=o(Hn);Bn=p(yc,"CODE",{});var hc=o(Bn);Yp=i(hc,"$foo = 1234;"),hc.forEach(n),yc.forEach(n),Qp=u(D),xn=p(D,"TD",{});var wc=o(xn);gn=p(wc,"CODE",{});var _c=o(gn);Xp=i(_c,"32+ bits"),_c.forEach(n),wc.forEach(n),Jp=u(D),Un=p(D,"TD",{});var Tc=o(Un);Zp=i(Tc,"-9.223e+15"),Tc.forEach(n),so=u(D),jn=p(D,"TD",{});var bc=o(jn);no=i(bc,"9.223e+15"),bc.forEach(n),D.forEach(n),ao=u(q),h=p(q,"TR",{});var P=o(h);Wn=p(P,"TD",{});var Ac=o(Wn);to=i(Ac,"Double"),Ac.forEach(n),po=u(P),Vn=p(P,"TD",{});var Sc=o(Vn);Fn=p(Sc,"CODE",{});var Oc=o(Fn);oo=i(Oc,"$foo = 1234;"),Oc.forEach(n),Sc.forEach(n),eo=u(P),zn=p(P,"TD",{});var Cc=o(zn);$n=p(Cc,"CODE",{});var Dc=o($n);co=i(Dc,"32+ bits"),Dc.forEach(n),Cc.forEach(n),lo=u(P),Kn=p(P,"TD",{});var Pc=o(Kn);uo=i(Pc,"-9.223e+15"),Pc.forEach(n),ko=u(P),Yn=p(P,"TD",{});var Mc=o(Yn);io=i(Mc,"9.223e+15"),Mc.forEach(n),P.forEach(n),q.forEach(n),Vt.forEach(n),za=u(s),Cs=p(s,"P",{});var Rc=o(Cs);Qn=p(Rc,"STRONG",{});var Nc=o(Qn);ro=i(Nc,"COMPLEX"),Nc.forEach(n),Rc.forEach(n),$a=u(s),I=p(s,"TABLE",{});var Ft=o(I);Xn=p(Ft,"THEAD",{});var Lc=o(Xn);m=p(Lc,"TR",{class:!0});var M=o(m);Jn=p(M,"TH",{});var Gc=o(Jn);fo=i(Gc,"Name"),Gc.forEach(n),mo=u(M),Zn=p(M,"TH",{});var Ic=o(Zn);vo=i(Ic,"Expression"),Ic.forEach(n),Eo=u(M),sa=p(M,"TH",{});var qc=o(sa);yo=i(qc,"Size"),qc.forEach(n),ho=u(M),na=p(M,"TH",{});var Hc=o(na);wo=i(Hc,"Min"),Hc.forEach(n),_o=u(M),aa=p(M,"TH",{});var Bc=o(aa);To=i(Bc,"Max"),Bc.forEach(n),M.forEach(n),Lc.forEach(n),bo=u(Ft),W=p(Ft,"TBODY",{});var zt=o(W);w=p(zt,"TR",{});var R=o(w);ta=p(R,"TD",{});var xc=o(ta);Ao=i(xc,"DateTime"),xc.forEach(n),So=u(R),pa=p(R,"TD",{});var gc=o(pa);oa=p(gc,"CODE",{});var Uc=o(oa);Oo=i(Uc,"$foo = true;"),Uc.forEach(n),gc.forEach(n),Co=u(R),ea=p(R,"TD",{});var jc=o(ea);ca=p(jc,"CODE",{});var Wc=o(ca);Do=i(Wc,"1 bits"),Wc.forEach(n),jc.forEach(n),Po=u(R),la=p(R,"TD",{});var Vc=o(la);Mo=i(Vc,"0 (false)"),Vc.forEach(n),Ro=u(R),ua=p(R,"TD",{});var Fc=o(ua);No=i(Fc,"1 (true)"),Fc.forEach(n),R.forEach(n),Lo=u(zt),_=p(zt,"TR",{});var N=o(_);ka=p(N,"TD",{});var zc=o(ka);Go=i(zc,"Point"),zc.forEach(n),Io=u(N),ia=p(N,"TD",{});var $c=o(ia);ra=p($c,"CODE",{});var Kc=o(ra);qo=i(Kc,"$foo = 1234;"),Kc.forEach(n),$c.forEach(n),Ho=u(N),fa=p(N,"TD",{});var Yc=o(fa);da=p(Yc,"CODE",{});var Qc=o(da);Bo=i(Qc,"32+ bits"),Qc.forEach(n),Yc.forEach(n),xo=u(N),ma=p(N,"TD",{});var Xc=o(ma);go=i(Xc,"-9.223e+15"),Xc.forEach(n),Uo=u(N),va=p(N,"TD",{});var Jc=o(va);jo=i(Jc,"9.223e+15"),Jc.forEach(n),N.forEach(n),zt.forEach(n),Ft.forEach(n),Ka=u(s),Ds=p(s,"P",{});var Zc=o(Ds);Ea=p(Zc,"STRONG",{});var sl=o(Ea);Wo=i(sl,"CONVERSION"),sl.forEach(n),Zc.forEach(n),Ya=u(s),V=p(s,"PRE",{class:!0});var Ou=o(V);Ou.forEach(n),Qa=u(s),F=p(s,"H3",{id:!0});var nl=o(F);Ps=p(nl,"A",{href:!0});var al=o(Ps);Vo=i(al,"Input Output"),al.forEach(n),nl.forEach(n),Xa=u(s),z=p(s,"PRE",{class:!0});var Cu=o(z);Cu.forEach(n),Ja=u(s),$=p(s,"H3",{id:!0});var tl=o($);Ms=p(tl,"A",{href:!0});var pl=o(Ms);Fo=i(pl,"Variables, Tests and Loops"),pl.forEach(n),tl.forEach(n),Za=u(s),K=p(s,"PRE",{class:!0});var Du=o(K);Du.forEach(n),st=u(s),Y=p(s,"H3",{id:!0});var ol=o(Y);Rs=p(ol,"A",{href:!0});var el=o(Rs);zo=i(el,"Random numbers"),el.forEach(n),ol.forEach(n),nt=u(s),Q=p(s,"H3",{id:!0});var cl=o(Q);Ns=p(cl,"A",{href:!0});var ll=o(Ns);$o=i(ll,"Arrays"),ll.forEach(n),cl.forEach(n),at=u(s),Ls=p(s,"P",{});var ul=o(Ls);ya=p(ul,"STRONG",{});var kl=o(ya);Ko=i(kl,"STRINGS"),kl.forEach(n),ul.forEach(n),tt=u(s),X=p(s,"PRE",{class:!0});var Pu=o(X);Pu.forEach(n),pt=u(s),Gs=p(s,"P",{});var il=o(Gs);ha=p(il,"STRONG",{});var rl=o(ha);Yo=i(rl,"ARRAYS"),rl.forEach(n),il.forEach(n),ot=u(s),J=p(s,"PRE",{class:!0});var Mu=o(J);Mu.forEach(n),et=u(s),Is=p(s,"P",{});var fl=o(Is);wa=p(fl,"STRONG",{});var dl=o(wa);Qo=i(dl,"LISTS"),dl.forEach(n),fl.forEach(n),ct=u(s),Z=p(s,"PRE",{class:!0});var Ru=o(Z);Ru.forEach(n),lt=u(s),qs=p(s,"P",{});var ml=o(qs);_a=p(ml,"STRONG",{});var vl=o(_a);Xo=i(vl,"DATE"),vl.forEach(n),ml.forEach(n),ut=u(s),ss=p(s,"PRE",{class:!0});var Nu=o(ss);Nu.forEach(n),kt=u(s),ns=p(s,"H3",{id:!0});var El=o(ns);Hs=p(El,"A",{href:!0});var yl=o(Hs);Jo=i(yl,"Functions"),yl.forEach(n),El.forEach(n),it=u(s),as=p(s,"H3",{id:!0});var hl=o(as);Bs=p(hl,"A",{href:!0});var wl=o(Bs);Zo=i(wl,"Classes and Properties"),wl.forEach(n),hl.forEach(n),rt=u(s),xs=p(s,"P",{});var _l=o(xs);Ta=p(_l,"STRONG",{});var Tl=o(Ta);se=i(Tl,"METHODS AND CONSTRUCTOR"),Tl.forEach(n),_l.forEach(n),ft=u(s),ts=p(s,"PRE",{class:!0});var Lu=o(ts);Lu.forEach(n),dt=u(s),gs=p(s,"P",{});var bl=o(gs);ba=p(bl,"STRONG",{});var Al=o(ba);ne=i(Al,"DEFAULT METHODS"),Al.forEach(n),bl.forEach(n),mt=u(s),b=p(s,"UL",{});var en=o(b);Aa=p(en,"LI",{});var Sl=o(Aa);Sa=p(Sl,"CODE",{});var Ol=o(Sa);ae=i(Ol,"object.ToString();"),Ol.forEach(n),Sl.forEach(n),te=u(en),Oa=p(en,"LI",{});var Cl=o(Oa);Ca=p(Cl,"CODE",{});var Dl=o(Ca);pe=i(Dl,"object.Equals(object);"),Dl.forEach(n),Cl.forEach(n),oe=u(en),Da=p(en,"LI",{});var Pl=o(Da);Pa=p(Pl,"CODE",{});var Ml=o(Pa);ee=i(Ml,"object.GetHashCode();"),Ml.forEach(n),Pl.forEach(n),en.forEach(n),vt=u(s),Us=p(s,"P",{});var Rl=o(Us);Ma=p(Rl,"STRONG",{});var Nl=o(Ma);ce=i(Nl,"ABSTRACT CLASS"),Nl.forEach(n),Rl.forEach(n),Et=u(s),js=p(s,"BLOCKQUOTE",{});var Ll=o(js);ps=p(Ll,"P",{});var $t=o(ps);le=i($t,"An "),Ra=p($t,"CODE",{});var Gl=o(Ra);ue=i(Gl,"Abstract Classes"),Gl.forEach(n),ke=i($t,` cannot be instantiated, but can be very useful
by creating different classes that inherit its properties to be sure
of their homogeneity, and then be able to store them in common tables
per instance.`),$t.forEach(n),Ll.forEach(n),yt=u(s),os=p(s,"PRE",{class:!0});var Gu=o(os);Gu.forEach(n),ht=u(s),Ws=p(s,"P",{});var Il=o(Ws);ie=i(Il,"INTERFACES"),Il.forEach(n),wt=u(s),Vs=p(s,"BLOCKQUOTE",{});var ql=o(Vs);Na=p(ql,"P",{});var Hl=o(Na);re=i(Hl,"TODO"),Hl.forEach(n),ql.forEach(n),_t=u(s),es=p(s,"H3",{id:!0});var Bl=o(es);Fs=p(Bl,"A",{href:!0});var xl=o(Fs);fe=i(xl,"Test Unit"),xl.forEach(n),Bl.forEach(n),Tt=u(s),cs=p(s,"PRE",{class:!0});var Iu=o(cs);Iu.forEach(n),bt=u(s),zs=p(s,"P",{});var gl=o(zs);de=i(gl,"ASSERTIONS"),gl.forEach(n),At=u(s),$s=p(s,"P",{});var Ul=o($s);me=i(Ul,":"),Ul.forEach(n),St=u(s),ls=p(s,"PRE",{class:!0});var qu=o(ls);qu.forEach(n),Ot=u(s),us=p(s,"H3",{id:!0});var jl=o(us);Ks=p(jl,"A",{href:!0});var Wl=o(Ks);ve=i(Wl,"Enumerators"),Wl.forEach(n),jl.forEach(n),Ct=u(s),ks=p(s,"PRE",{class:!0});var Hu=o(ks);Hu.forEach(n),Dt=u(s),is=p(s,"H2",{id:!0});var Vl=o(is);Ys=p(Vl,"A",{href:!0});var Fl=o(Ys);Ee=i(Fl,"XAML"),Fl.forEach(n),Vl.forEach(n),Pt=u(s),Qs=p(s,"P",{});var zl=o(Qs);La=p(zl,"STRONG",{});var $l=o(La);ye=i($l,"GUI DESIGN"),$l.forEach(n),zl.forEach(n),Mt=u(s),Xs=p(s,"P",{});var Kl=o(Xs);he=i(Kl,"The GUI Design is defined in App.xaml"),Kl.forEach(n),Rt=u(s),rs=p(s,"PRE",{class:!0});var Bu=o(rs);Bu.forEach(n),Nt=u(s),Js=p(s,"P",{});var Yl=o(Js);Ga=p(Yl,"STRONG",{});var Ql=o(Ga);we=i(Ql,"BACK"),Ql.forEach(n),Yl.forEach(n),Lt=u(s),Zs=p(s,"P",{});var Xl=o(Zs);_e=i(Xl,"The Code-Behin of the GUI is defined in the App.xaml.cs"),Xl.forEach(n),Gt=u(s),fs=p(s,"PRE",{class:!0});var xu=o(fs);xu.forEach(n),It=u(s),sn=p(s,"P",{});var Jl=o(sn);Ia=p(Jl,"STRONG",{});var Zl=o(Ia);Te=i(Zl,"CUSTOM POPUP"),Zl.forEach(n),Jl.forEach(n),qt=u(s),ds=p(s,"PRE",{class:!0});var gu=o(ds);gu.forEach(n),Ht=u(s),nn=p(s,"BLOCKQUOTE",{});var su=o(nn);qa=p(su,"P",{});var nu=o(qa);be=i(nu,"TODO"),nu.forEach(n),su.forEach(n),Bt=u(s),ms=p(s,"H2",{id:!0});var au=o(ms);an=p(au,"A",{href:!0});var tu=o(an);Ae=i(tu,"MVVM Light"),tu.forEach(n),au.forEach(n),xt=u(s),tn=p(s,"BLOCKQUOTE",{});var pu=o(tn);Ha=p(pu,"P",{});var ou=o(Ha);Se=i(ou,"TODO"),ou.forEach(n),pu.forEach(n),gt=u(s),vs=p(s,"H2",{id:!0});var eu=o(vs);pn=p(eu,"A",{href:!0});var cu=o(pn);Oe=i(cu,"API"),cu.forEach(n),eu.forEach(n),Ut=u(s),on=p(s,"BLOCKQUOTE",{});var lu=o(on);Ba=p(lu,"P",{});var uu=o(Ba);Ce=i(uu,"TODO"),uu.forEach(n),lu.forEach(n),this.h()},h(){r(Es,"href","#cheat-sheets"),r(L,"id","cheat-sheets"),r(ys,"href","#usefull-informations"),r(H,"id","usefull-informations"),r(x,"href","https://docs.microsoft.com/en-us/dotnet/csharp/"),r(x,"rel","nofollow"),r(U,"href","http://pypl.github.io/PYPL.html"),r(U,"rel","nofollow"),r(Ss,"href","#types-and-variables"),r(j,"id","types-and-variables"),r(d,"class","header"),r(m,"class","header"),r(V,"class","language-csharp"),r(Ps,"href","#input-output"),r(F,"id","input-output"),r(z,"class","language-csharp"),r(Ms,"href","#variables-tests-and-loops"),r($,"id","variables-tests-and-loops"),r(K,"class","language-csharp"),r(Rs,"href","#random-numbers"),r(Y,"id","random-numbers"),r(Ns,"href","#arrays"),r(Q,"id","arrays"),r(X,"class","language-csharp"),r(J,"class","language-csharp"),r(Z,"class","language-csharp"),r(ss,"class","language-csharp"),r(Hs,"href","#functions"),r(ns,"id","functions"),r(Bs,"href","#classes-and-properties"),r(as,"id","classes-and-properties"),r(ts,"class","language-csharp"),r(os,"class","language-csharp"),r(Fs,"href","#test-unit"),r(es,"id","test-unit"),r(cs,"class","language-csharp"),r(ls,"class","language-csharp"),r(Ks,"href","#enumerators"),r(us,"id","enumerators"),r(ks,"class","language-csharp"),r(Ys,"href","#xaml"),r(is,"id","xaml"),r(rs,"class","language-xml"),r(fs,"class","language-csharp"),r(ds,"class","language-csharp"),r(an,"href","#mvvm-light"),r(ms,"id","mvvm-light"),r(pn,"href","#api"),r(vs,"id","api")},m(s,e){c(s,L,e),a(L,Es),a(Es,Kt),c(s,xa,e),c(s,H,e),a(H,ys),a(ys,Yt),c(s,ga,e),c(s,hs,e),a(hs,B),a(B,cn),a(cn,Qt),a(B,Xt),a(B,x),a(x,Jt),c(s,Ua,e),c(s,ws,e),a(ws,ln),a(ln,Zt),c(s,ja,e),c(s,f,e),a(f,_s),a(_s,un),a(un,sp),a(_s,np),a(f,ap),a(f,Ts),a(Ts,kn),a(kn,tp),a(Ts,pp),a(f,op),a(f,bs),a(bs,rn),a(rn,ep),a(bs,cp),a(f,lp),a(f,g),a(g,fn),a(fn,up),a(g,kp),a(g,U),a(U,ip),a(f,rp),a(f,As),a(As,dn),a(dn,fp),a(As,dp),c(s,Wa,e),c(s,j,e),a(j,Ss),a(Ss,mp),c(s,Va,e),c(s,Os,e),a(Os,mn),a(mn,vp),c(s,Fa,e),c(s,G,e),a(G,vn),a(vn,d),a(d,En),a(En,Ep),a(d,yp),a(d,yn),a(yn,hp),a(d,wp),a(d,hn),a(hn,_p),a(d,Tp),a(d,wn),a(wn,bp),a(d,Ap),a(d,_n),a(_n,Sp),a(G,Op),a(G,T),a(T,v),a(v,Tn),a(Tn,Cp),a(v,Dp),a(v,bn),a(bn,An),a(An,Pp),a(v,Mp),a(v,Sn),a(Sn,On),a(On,Rp),a(v,Np),a(v,Cn),a(Cn,Lp),a(v,Gp),a(v,Dn),a(Dn,Ip),a(T,qp),a(T,E),a(E,Pn),a(Pn,Hp),a(E,Bp),a(E,Mn),a(Mn,Rn),a(Rn,xp),a(E,gp),a(E,Nn),a(Nn,Ln),a(Ln,Up),a(E,jp),a(E,Gn),a(Gn,Wp),a(E,Vp),a(E,In),a(In,Fp),a(T,zp),a(T,y),a(y,qn),a(qn,$p),a(y,Kp),a(y,Hn),a(Hn,Bn),a(Bn,Yp),a(y,Qp),a(y,xn),a(xn,gn),a(gn,Xp),a(y,Jp),a(y,Un),a(Un,Zp),a(y,so),a(y,jn),a(jn,no),a(T,ao),a(T,h),a(h,Wn),a(Wn,to),a(h,po),a(h,Vn),a(Vn,Fn),a(Fn,oo),a(h,eo),a(h,zn),a(zn,$n),a($n,co),a(h,lo),a(h,Kn),a(Kn,uo),a(h,ko),a(h,Yn),a(Yn,io),c(s,za,e),c(s,Cs,e),a(Cs,Qn),a(Qn,ro),c(s,$a,e),c(s,I,e),a(I,Xn),a(Xn,m),a(m,Jn),a(Jn,fo),a(m,mo),a(m,Zn),a(Zn,vo),a(m,Eo),a(m,sa),a(sa,yo),a(m,ho),a(m,na),a(na,wo),a(m,_o),a(m,aa),a(aa,To),a(I,bo),a(I,W),a(W,w),a(w,ta),a(ta,Ao),a(w,So),a(w,pa),a(pa,oa),a(oa,Oo),a(w,Co),a(w,ea),a(ea,ca),a(ca,Do),a(w,Po),a(w,la),a(la,Mo),a(w,Ro),a(w,ua),a(ua,No),a(W,Lo),a(W,_),a(_,ka),a(ka,Go),a(_,Io),a(_,ia),a(ia,ra),a(ra,qo),a(_,Ho),a(_,fa),a(fa,da),a(da,Bo),a(_,xo),a(_,ma),a(ma,go),a(_,Uo),a(_,va),a(va,jo),c(s,Ka,e),c(s,Ds,e),a(Ds,Ea),a(Ea,Wo),c(s,Ya,e),c(s,V,e),V.innerHTML=iu,c(s,Qa,e),c(s,F,e),a(F,Ps),a(Ps,Vo),c(s,Xa,e),c(s,z,e),z.innerHTML=ru,c(s,Ja,e),c(s,$,e),a($,Ms),a(Ms,Fo),c(s,Za,e),c(s,K,e),K.innerHTML=fu,c(s,st,e),c(s,Y,e),a(Y,Rs),a(Rs,zo),c(s,nt,e),c(s,Q,e),a(Q,Ns),a(Ns,$o),c(s,at,e),c(s,Ls,e),a(Ls,ya),a(ya,Ko),c(s,tt,e),c(s,X,e),X.innerHTML=du,c(s,pt,e),c(s,Gs,e),a(Gs,ha),a(ha,Yo),c(s,ot,e),c(s,J,e),J.innerHTML=mu,c(s,et,e),c(s,Is,e),a(Is,wa),a(wa,Qo),c(s,ct,e),c(s,Z,e),Z.innerHTML=vu,c(s,lt,e),c(s,qs,e),a(qs,_a),a(_a,Xo),c(s,ut,e),c(s,ss,e),ss.innerHTML=Eu,c(s,kt,e),c(s,ns,e),a(ns,Hs),a(Hs,Jo),c(s,it,e),c(s,as,e),a(as,Bs),a(Bs,Zo),c(s,rt,e),c(s,xs,e),a(xs,Ta),a(Ta,se),c(s,ft,e),c(s,ts,e),ts.innerHTML=yu,c(s,dt,e),c(s,gs,e),a(gs,ba),a(ba,ne),c(s,mt,e),c(s,b,e),a(b,Aa),a(Aa,Sa),a(Sa,ae),a(b,te),a(b,Oa),a(Oa,Ca),a(Ca,pe),a(b,oe),a(b,Da),a(Da,Pa),a(Pa,ee),c(s,vt,e),c(s,Us,e),a(Us,Ma),a(Ma,ce),c(s,Et,e),c(s,js,e),a(js,ps),a(ps,le),a(ps,Ra),a(Ra,ue),a(ps,ke),c(s,yt,e),c(s,os,e),os.innerHTML=hu,c(s,ht,e),c(s,Ws,e),a(Ws,ie),c(s,wt,e),c(s,Vs,e),a(Vs,Na),a(Na,re),c(s,_t,e),c(s,es,e),a(es,Fs),a(Fs,fe),c(s,Tt,e),c(s,cs,e),cs.innerHTML=wu,c(s,bt,e),c(s,zs,e),a(zs,de),c(s,At,e),c(s,$s,e),a($s,me),c(s,St,e),c(s,ls,e),ls.innerHTML=_u,c(s,Ot,e),c(s,us,e),a(us,Ks),a(Ks,ve),c(s,Ct,e),c(s,ks,e),ks.innerHTML=Tu,c(s,Dt,e),c(s,is,e),a(is,Ys),a(Ys,Ee),c(s,Pt,e),c(s,Qs,e),a(Qs,La),a(La,ye),c(s,Mt,e),c(s,Xs,e),a(Xs,he),c(s,Rt,e),c(s,rs,e),rs.innerHTML=bu,c(s,Nt,e),c(s,Js,e),a(Js,Ga),a(Ga,we),c(s,Lt,e),c(s,Zs,e),a(Zs,_e),c(s,Gt,e),c(s,fs,e),fs.innerHTML=Au,c(s,It,e),c(s,sn,e),a(sn,Ia),a(Ia,Te),c(s,qt,e),c(s,ds,e),ds.innerHTML=Su,c(s,Ht,e),c(s,nn,e),a(nn,qa),a(qa,be),c(s,Bt,e),c(s,ms,e),a(ms,an),a(an,Ae),c(s,xt,e),c(s,tn,e),a(tn,Ha),a(Ha,Se),c(s,gt,e),c(s,vs,e),a(vs,pn),a(pn,Oe),c(s,Ut,e),c(s,on,e),a(on,Ba),a(Ba,Ce)},p:Ne,i:Ne,o:Ne,d(s){s&&n(L),s&&n(xa),s&&n(H),s&&n(ga),s&&n(hs),s&&n(Ua),s&&n(ws),s&&n(ja),s&&n(f),s&&n(Wa),s&&n(j),s&&n(Va),s&&n(Os),s&&n(Fa),s&&n(G),s&&n(za),s&&n(Cs),s&&n($a),s&&n(I),s&&n(Ka),s&&n(Ds),s&&n(Ya),s&&n(V),s&&n(Qa),s&&n(F),s&&n(Xa),s&&n(z),s&&n(Ja),s&&n($),s&&n(Za),s&&n(K),s&&n(st),s&&n(Y),s&&n(nt),s&&n(Q),s&&n(at),s&&n(Ls),s&&n(tt),s&&n(X),s&&n(pt),s&&n(Gs),s&&n(ot),s&&n(J),s&&n(et),s&&n(Is),s&&n(ct),s&&n(Z),s&&n(lt),s&&n(qs),s&&n(ut),s&&n(ss),s&&n(kt),s&&n(ns),s&&n(it),s&&n(as),s&&n(rt),s&&n(xs),s&&n(ft),s&&n(ts),s&&n(dt),s&&n(gs),s&&n(mt),s&&n(b),s&&n(vt),s&&n(Us),s&&n(Et),s&&n(js),s&&n(yt),s&&n(os),s&&n(ht),s&&n(Ws),s&&n(wt),s&&n(Vs),s&&n(_t),s&&n(es),s&&n(Tt),s&&n(cs),s&&n(bt),s&&n(zs),s&&n(At),s&&n($s),s&&n(St),s&&n(ls),s&&n(Ot),s&&n(us),s&&n(Ct),s&&n(ks),s&&n(Dt),s&&n(is),s&&n(Pt),s&&n(Qs),s&&n(Mt),s&&n(Xs),s&&n(Rt),s&&n(rs),s&&n(Nt),s&&n(Js),s&&n(Lt),s&&n(Zs),s&&n(Gt),s&&n(fs),s&&n(It),s&&n(sn),s&&n(qt),s&&n(ds),s&&n(Ht),s&&n(nn),s&&n(Bt),s&&n(ms),s&&n(xt),s&&n(tn),s&&n(gt),s&&n(vs),s&&n(Ut),s&&n(on)}}}const zu={title:"C#",short:"Object-oriented programming language developed by Microsoft as part of its .NET initiative.",topic:"programming-language compiled"};class $u extends Uu{constructor(L){super(),ju(this,L,null,Vu,Wu,{})}}export{$u as default,zu as metadata};
