import{S as me,i as he,s as de,k as t,r as c,a as i,l as e,m as p,u as r,h as a,c as u,p as k,b as l,F as n,n as nt}from"./index.73c741f7.mjs";function ye(ae){let m,H,Sa,Ws,_,O,Na,Bs,D,Ma,Us,g,ne='<code class="language-undefined">Assembly =&gt; C =&gt; C++ =&gt; Java =&gt; Js =&gt; Ts</code>',zs,T,R,ja,qs,x,Aa,Xs,V,Ha,Ks,h,G,ws,Oa,Da,Ra,F,bs,xa,Va,Js,I,te=`<code class="language-typescript">   	<span class="token comment">// Defining an impementation of a type diff√©rents Layers:</span>
   <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>
   	<span class="token comment">/* Attributes (values, fields, properties) */</span>
   	<span class="token keyword">private</span> <span class="token builtin">number</span> price
   	<span class="token keyword">private</span> <span class="token builtin">string</span> brand
   	<span class="token keyword">private</span> <span class="token builtin">string</span> plate

   		<span class="token comment">/* Methods (Factories, Constructors, Accessors, Functions) */</span>

   		<span class="token comment">/* Factories (Builders) */</span>
   	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Multiple implementations with the overload</span>
   	<span class="token function">constructor</span><span class="token punctuation">(</span>price<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> brand<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> plate<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   		<span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price
   		<span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand
   		<span class="token keyword">this</span><span class="token punctuation">.</span>plate <span class="token operator">=</span> plate
   	<span class="token punctuation">&#125;</span>
   	<span class="token comment">// Garbage collection (ex: c++ ~destructor)</span>

   		<span class="token comment">/* Constructors (Setters) */</span>
   	<span class="token function">setPrice</span><span class="token punctuation">(</span>price <span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price <span class="token punctuation">&#125;</span>
   	<span class="token function">setBrand</span><span class="token punctuation">(</span>brand <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand <span class="token punctuation">&#125;</span>
   	<span class="token function">setPlate</span><span class="token punctuation">(</span>plate <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>plate <span class="token operator">=</span> plate <span class="token punctuation">&#125;</span>

   		<span class="token comment">/* Accessors (Getters) */</span>
   	<span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token punctuation">&#125;</span>
   	<span class="token function">getBrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token punctuation">&#125;</span>
   	<span class="token function">getPlate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>plate <span class="token punctuation">&#125;</span>

   		<span class="token comment">/* Functions */</span>
   	<span class="token function">computeSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span></code>`,Qs,L,W,Ga,Ys,B,Es,Fa,Zs,d,U,_s,Wa,Ba,Ua,z,gs,za,qa,$s,P,ee=`<code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">ImmutableNumber</span> <span class="token punctuation">&#123;</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

	<span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">plusNumber</span><span class="token punctuation">(</span>other<span class="token operator">:</span> ImmutableNumber<span class="token punctuation">)</span><span class="token operator">:</span> ImmutableNumber <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableNumber</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> other<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">minusNumber</span><span class="token punctuation">(</span>other<span class="token operator">:</span> ImmutableNumber<span class="token punctuation">)</span><span class="token operator">:</span> ImmutableNumber <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableNumber</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> other<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,sa,q,Ts,Xa,aa,y,X,Is,Ka,Ja,Qa,K,Ls,Ya,Za,na,C,pe=`<code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">MutableNumber</span> <span class="token punctuation">&#123;</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

	<span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">plusNumber</span><span class="token punctuation">(</span>other<span class="token operator">:</span> MutableNumber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> other<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">minusNumber</span><span class="token punctuation">(</span>other<span class="token operator">:</span> MutableNumber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> other<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,ta,S,J,$a,ea,Q,Ps,sn,pa,Y,an,oa,Z,nn,la,v,$,Cs,tn,en,pn,ss,Ss,on,ln,ca,as,cn,ra,N,oe=`<code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Driver</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">/* Driver class implementation */</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Wheel</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">/* Wheel class implementation */</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Frame</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">/* Frame class implementation */</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*
   	The Car class is an example of the Aggregation:
   	It HAS a driver, wheels and a frame
   */</span>

<span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">private</span> driver<span class="token operator">:</span> Driver<span class="token punctuation">;</span>
	<span class="token keyword">private</span> wheels<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Wheel<span class="token operator">></span><span class="token punctuation">;</span>
	<span class="token keyword">private</span> frame<span class="token operator">:</span> Frame<span class="token punctuation">;</span>

	<span class="token function">constructor</span><span class="token punctuation">(</span>driver<span class="token operator">:</span> Driver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>driver <span class="token operator">=</span> driver<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>wheels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Wheel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Wheel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Wheel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Wheel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">/*
   		With this exemples, we could also say thet these components
   		don't have the same relation with the Car class:

   		- The Wheels and the Frame seems pretty linked to the Car
   		  In fact, we can see that they are only created in the Car constructor.
   		  => We could say that the Car is in symbiosis with the Wheels and the Frame
   		  ... but it's not realy true, the wheels could be changed, the car
   		  would still be the same. The interpretation is realy specific to what you need

   		- The Driver seems completely independant from the rest of the pieces. It is 
   		passed by parameter in the constructor, and we can emit the supposition that
   		the driver can be changed, for instance if he sells the car to another Driver
   		=> We could say that the Driver is in a shared aggregation with the Car
   	*/</span>
<span class="token punctuation">&#125;</span></code>`,ia,ns,Ns,rn,ua,ts,un,ka,es,kn,fa,w,ps,Ms,fn,mn,hn,os,js,dn,yn,ma,ls,vn,ha,M,le=`<code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">private</span> driver<span class="token operator">:</span> Driver<span class="token punctuation">;</span>
	<span class="token keyword">private</span> wheels<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Wheel<span class="token operator">></span><span class="token punctuation">;</span>
	<span class="token keyword">private</span> frame<span class="token operator">:</span> Frame<span class="token punctuation">;</span>

	<span class="token comment">/* Vehicle implementation */</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* A Car IS a Vehicle, it will have the same attributes and methods... */</span>
<span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">/* Car class implementation */</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* ... but moreover, it can implement new attributes and methods! */</span>
<span class="token keyword">class</span> <span class="token class-name">Truck</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">private</span> trailer<span class="token operator">:</span> Trailer<span class="token punctuation">;</span> <span class="token comment">// The trailer is specific to the truck</span>

	<span class="token comment">/* Truck class implementation */</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/* 
   	We can see that the Polymorphism allows to store multiple childs 
   	of the Car class in the same Array, that's really usefull 
   */</span>
<span class="token keyword">let</span> MyVehicles<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Vehicles<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Truck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code>`,da,j,cs,wn,ya,rs,As,bn,va,b,is,Hs,En,_n,gn,us,Os,Tn,In,wa,ks,Ds,Ln,ba,f,fs,Rs,Pn,Cn,Sn,ms,xs,Nn,Mn,jn,hs,Vs,An,Hn,On,ds,Gs,Dn,Rn,Ea,A,ys,xn,_a,vs,Fs,Vn;return{c(){m=t("h2"),H=t("a"),Sa=c("Modularity and Typing"),Ws=i(),_=t("h3"),O=t("a"),Na=c("Introduction"),Bs=i(),D=t("p"),Ma=c("Evolution of the Languages towards an increasingly modular and abstract programming"),Us=i(),g=t("pre"),zs=i(),T=t("h3"),R=t("a"),ja=c("Creating a new Type"),qs=i(),x=t("p"),Aa=c("Creating a new Type (TypeScript) : example of the Car"),Xs=i(),V=t("p"),Ha=c("Two points of view when defining a new type:"),Ks=i(),h=t("ul"),G=t("li"),ws=t("strong"),Oa=c("Internal:"),Da=c(" How to build and manage the elements (how to build a car?)"),Ra=i(),F=t("li"),bs=t("strong"),xa=c("External:"),Va=c(" How to use the instances of that element (how to drive a car?)"),Js=i(),I=t("pre"),Qs=i(),L=t("h3"),W=t("a"),Ga=c("Data Persistence"),Ys=i(),B=t("p"),Es=t("strong"),Fa=c("Immutability: Keep the initial state, each computation create a new object"),Zs=i(),d=t("ul"),U=t("li"),_s=t("strong"),Wa=c("Benefits:"),Ba=c(" Permit to avoid errors due to the change of the object. For instance, if multiple entities can access the object at the same time, or if you just don\\‚Äòt want the state of the object to change."),Ua=i(),z=t("li"),gs=t("strong"),za=c("DrawBack:"),qa=c(" Can be heavier on memory due to the initialisation of a new element for each change in the object state"),$s=i(),P=t("pre"),sa=i(),q=t("p"),Ts=t("strong"),Xa=c("Mutability: The state of the object can change, allows to edit it"),aa=i(),y=t("ul"),X=t("li"),Is=t("strong"),Ka=c("Benefits:"),Ja=c(" Some case just need to have an object evolution."),Qa=i(),K=t("li"),Ls=t("strong"),Ya=c("DrawBack:"),Za=c(" Harder to manage the states, and riskier."),na=i(),C=t("pre"),ta=i(),S=t("h3"),J=t("a"),$a=c("Hierarchy: Aggregation and Inheritance"),ea=i(),Q=t("p"),Ps=t("strong"),sn=c("Aggregation (Has a X)"),pa=i(),Y=t("p"),an=c("Code factorisation with the aggregation of the differents classes"),oa=i(),Z=t("p"),nn=c("Multiples forms:"),la=i(),v=t("ul"),$=t("li"),Cs=t("strong"),tn=c("Shared Aggregation"),en=c(" (objects are independants)"),pn=i(),ss=t("li"),Ss=t("strong"),on=c("Symbiosis"),ln=c(" (same life duration)"),ca=i(),as=t("p"),cn=c("Example:"),ra=i(),N=t("pre"),ia=i(),ns=t("p"),Ns=t("strong"),rn=c("Inheritance (Is a X)"),ua=i(),ts=t("p"),un=c("Polymorphism : Multiplicity of essences"),ka=i(),es=t("p"),kn=c("Data storage:"),fa=i(),w=t("ul"),ps=t("li"),Ms=t("strong"),fn=c("Covariant"),mn=c(" (accept object that are more specialized)"),hn=i(),os=t("li"),js=t("strong"),dn=c("Contravariant"),yn=c(" (don\\‚Äòt accept any more specialized object)"),ma=i(),ls=t("p"),vn=c("Example:"),ha=i(),M=t("pre"),da=i(),j=t("h3"),cs=t("a"),wn=c("Layered architectures"),ya=i(),rs=t("p"),As=t("strong"),bn=c("Universal architecture:"),va=i(),b=t("ul"),is=t("li"),Hs=t("em"),En=c("Low Layer"),_n=c(" (internal): accessors and builders"),gn=i(),us=t("li"),Os=t("em"),Tn=c("High Layer"),In=c(" (external): services implemented using the low layer"),wa=i(),ks=t("p"),Ds=t("strong"),Ln=c("Factorisation Cases:"),ba=i(),f=t("ul"),fs=t("li"),Rs=t("em"),Pn=c("Simple Inheritance:"),Cn=c(" descending aproach (factoring the bottom layer)"),Sn=i(),ms=t("li"),xs=t("em"),Nn=c("Simple Inheritance:"),Mn=c(" ascending aproach (factoring the top layer)"),jn=i(),hs=t("li"),Vs=t("em"),An=c("Multiple Inheritance:"),Hn=c(" independant bottom and top layers"),On=i(),ds=t("li"),Gs=t("em"),Dn=c("Agregation with Delegation:"),Rn=c(" composition of the top layer (inject dependances)"),Ea=i(),A=t("h3"),ys=t("a"),xn=c("Other concepts"),_a=i(),vs=t("blockquote"),Fs=t("p"),Vn=c("TODO"),this.h()},l(s){m=e(s,"H2",{id:!0});var o=p(m);H=e(o,"A",{href:!0});var tt=p(H);Sa=r(tt,"Modularity and Typing"),tt.forEach(a),o.forEach(a),Ws=u(s),_=e(s,"H3",{id:!0});var et=p(_);O=e(et,"A",{href:!0});var pt=p(O);Na=r(pt,"Introduction"),pt.forEach(a),et.forEach(a),Bs=u(s),D=e(s,"P",{});var ot=p(D);Ma=r(ot,"Evolution of the Languages towards an increasingly modular and abstract programming"),ot.forEach(a),Us=u(s),g=e(s,"PRE",{class:!0});var ce=p(g);ce.forEach(a),zs=u(s),T=e(s,"H3",{id:!0});var lt=p(T);R=e(lt,"A",{href:!0});var ct=p(R);ja=r(ct,"Creating a new Type"),ct.forEach(a),lt.forEach(a),qs=u(s),x=e(s,"P",{});var rt=p(x);Aa=r(rt,"Creating a new Type (TypeScript) : example of the Car"),rt.forEach(a),Xs=u(s),V=e(s,"P",{});var it=p(V);Ha=r(it,"Two points of view when defining a new type:"),it.forEach(a),Ks=u(s),h=e(s,"UL",{});var ga=p(h);G=e(ga,"LI",{});var Gn=p(G);ws=e(Gn,"STRONG",{});var ut=p(ws);Oa=r(ut,"Internal:"),ut.forEach(a),Da=r(Gn," How to build and manage the elements (how to build a car?)"),Gn.forEach(a),Ra=u(ga),F=e(ga,"LI",{});var Fn=p(F);bs=e(Fn,"STRONG",{});var kt=p(bs);xa=r(kt,"External:"),kt.forEach(a),Va=r(Fn," How to use the instances of that element (how to drive a car?)"),Fn.forEach(a),ga.forEach(a),Js=u(s),I=e(s,"PRE",{class:!0});var re=p(I);re.forEach(a),Qs=u(s),L=e(s,"H3",{id:!0});var ft=p(L);W=e(ft,"A",{href:!0});var mt=p(W);Ga=r(mt,"Data Persistence"),mt.forEach(a),ft.forEach(a),Ys=u(s),B=e(s,"P",{});var ht=p(B);Es=e(ht,"STRONG",{});var dt=p(Es);Fa=r(dt,"Immutability: Keep the initial state, each computation create a new object"),dt.forEach(a),ht.forEach(a),Zs=u(s),d=e(s,"UL",{});var Ta=p(d);U=e(Ta,"LI",{});var Wn=p(U);_s=e(Wn,"STRONG",{});var yt=p(_s);Wa=r(yt,"Benefits:"),yt.forEach(a),Ba=r(Wn," Permit to avoid errors due to the change of the object. For instance, if multiple entities can access the object at the same time, or if you just don\\‚Äòt want the state of the object to change."),Wn.forEach(a),Ua=u(Ta),z=e(Ta,"LI",{});var Bn=p(z);gs=e(Bn,"STRONG",{});var vt=p(gs);za=r(vt,"DrawBack:"),vt.forEach(a),qa=r(Bn," Can be heavier on memory due to the initialisation of a new element for each change in the object state"),Bn.forEach(a),Ta.forEach(a),$s=u(s),P=e(s,"PRE",{class:!0});var ie=p(P);ie.forEach(a),sa=u(s),q=e(s,"P",{});var wt=p(q);Ts=e(wt,"STRONG",{});var bt=p(Ts);Xa=r(bt,"Mutability: The state of the object can change, allows to edit it"),bt.forEach(a),wt.forEach(a),aa=u(s),y=e(s,"UL",{});var Ia=p(y);X=e(Ia,"LI",{});var Un=p(X);Is=e(Un,"STRONG",{});var Et=p(Is);Ka=r(Et,"Benefits:"),Et.forEach(a),Ja=r(Un," Some case just need to have an object evolution."),Un.forEach(a),Qa=u(Ia),K=e(Ia,"LI",{});var zn=p(K);Ls=e(zn,"STRONG",{});var _t=p(Ls);Ya=r(_t,"DrawBack:"),_t.forEach(a),Za=r(zn," Harder to manage the states, and riskier."),zn.forEach(a),Ia.forEach(a),na=u(s),C=e(s,"PRE",{class:!0});var ue=p(C);ue.forEach(a),ta=u(s),S=e(s,"H3",{id:!0});var gt=p(S);J=e(gt,"A",{href:!0});var Tt=p(J);$a=r(Tt,"Hierarchy: Aggregation and Inheritance"),Tt.forEach(a),gt.forEach(a),ea=u(s),Q=e(s,"P",{});var It=p(Q);Ps=e(It,"STRONG",{});var Lt=p(Ps);sn=r(Lt,"Aggregation (Has a X)"),Lt.forEach(a),It.forEach(a),pa=u(s),Y=e(s,"P",{});var Pt=p(Y);an=r(Pt,"Code factorisation with the aggregation of the differents classes"),Pt.forEach(a),oa=u(s),Z=e(s,"P",{});var Ct=p(Z);nn=r(Ct,"Multiples forms:"),Ct.forEach(a),la=u(s),v=e(s,"UL",{});var La=p(v);$=e(La,"LI",{});var qn=p($);Cs=e(qn,"STRONG",{});var St=p(Cs);tn=r(St,"Shared Aggregation"),St.forEach(a),en=r(qn," (objects are independants)"),qn.forEach(a),pn=u(La),ss=e(La,"LI",{});var Xn=p(ss);Ss=e(Xn,"STRONG",{});var Nt=p(Ss);on=r(Nt,"Symbiosis"),Nt.forEach(a),ln=r(Xn," (same life duration)"),Xn.forEach(a),La.forEach(a),ca=u(s),as=e(s,"P",{});var Mt=p(as);cn=r(Mt,"Example:"),Mt.forEach(a),ra=u(s),N=e(s,"PRE",{class:!0});var ke=p(N);ke.forEach(a),ia=u(s),ns=e(s,"P",{});var jt=p(ns);Ns=e(jt,"STRONG",{});var At=p(Ns);rn=r(At,"Inheritance (Is a X)"),At.forEach(a),jt.forEach(a),ua=u(s),ts=e(s,"P",{});var Ht=p(ts);un=r(Ht,"Polymorphism : Multiplicity of essences"),Ht.forEach(a),ka=u(s),es=e(s,"P",{});var Ot=p(es);kn=r(Ot,"Data storage:"),Ot.forEach(a),fa=u(s),w=e(s,"UL",{});var Pa=p(w);ps=e(Pa,"LI",{});var Kn=p(ps);Ms=e(Kn,"STRONG",{});var Dt=p(Ms);fn=r(Dt,"Covariant"),Dt.forEach(a),mn=r(Kn," (accept object that are more specialized)"),Kn.forEach(a),hn=u(Pa),os=e(Pa,"LI",{});var Jn=p(os);js=e(Jn,"STRONG",{});var Rt=p(js);dn=r(Rt,"Contravariant"),Rt.forEach(a),yn=r(Jn," (don\\‚Äòt accept any more specialized object)"),Jn.forEach(a),Pa.forEach(a),ma=u(s),ls=e(s,"P",{});var xt=p(ls);vn=r(xt,"Example:"),xt.forEach(a),ha=u(s),M=e(s,"PRE",{class:!0});var fe=p(M);fe.forEach(a),da=u(s),j=e(s,"H3",{id:!0});var Vt=p(j);cs=e(Vt,"A",{href:!0});var Gt=p(cs);wn=r(Gt,"Layered architectures"),Gt.forEach(a),Vt.forEach(a),ya=u(s),rs=e(s,"P",{});var Ft=p(rs);As=e(Ft,"STRONG",{});var Wt=p(As);bn=r(Wt,"Universal architecture:"),Wt.forEach(a),Ft.forEach(a),va=u(s),b=e(s,"UL",{});var Ca=p(b);is=e(Ca,"LI",{});var Qn=p(is);Hs=e(Qn,"EM",{});var Bt=p(Hs);En=r(Bt,"Low Layer"),Bt.forEach(a),_n=r(Qn," (internal): accessors and builders"),Qn.forEach(a),gn=u(Ca),us=e(Ca,"LI",{});var Yn=p(us);Os=e(Yn,"EM",{});var Ut=p(Os);Tn=r(Ut,"High Layer"),Ut.forEach(a),In=r(Yn," (external): services implemented using the low layer"),Yn.forEach(a),Ca.forEach(a),wa=u(s),ks=e(s,"P",{});var zt=p(ks);Ds=e(zt,"STRONG",{});var qt=p(Ds);Ln=r(qt,"Factorisation Cases:"),qt.forEach(a),zt.forEach(a),ba=u(s),f=e(s,"UL",{});var E=p(f);fs=e(E,"LI",{});var Zn=p(fs);Rs=e(Zn,"EM",{});var Xt=p(Rs);Pn=r(Xt,"Simple Inheritance:"),Xt.forEach(a),Cn=r(Zn," descending aproach (factoring the bottom layer)"),Zn.forEach(a),Sn=u(E),ms=e(E,"LI",{});var $n=p(ms);xs=e($n,"EM",{});var Kt=p(xs);Nn=r(Kt,"Simple Inheritance:"),Kt.forEach(a),Mn=r($n," ascending aproach (factoring the top layer)"),$n.forEach(a),jn=u(E),hs=e(E,"LI",{});var st=p(hs);Vs=e(st,"EM",{});var Jt=p(Vs);An=r(Jt,"Multiple Inheritance:"),Jt.forEach(a),Hn=r(st," independant bottom and top layers"),st.forEach(a),On=u(E),ds=e(E,"LI",{});var at=p(ds);Gs=e(at,"EM",{});var Qt=p(Gs);Dn=r(Qt,"Agregation with Delegation:"),Qt.forEach(a),Rn=r(at," composition of the top layer (inject dependances)"),at.forEach(a),E.forEach(a),Ea=u(s),A=e(s,"H3",{id:!0});var Yt=p(A);ys=e(Yt,"A",{href:!0});var Zt=p(ys);xn=r(Zt,"Other concepts"),Zt.forEach(a),Yt.forEach(a),_a=u(s),vs=e(s,"BLOCKQUOTE",{});var $t=p(vs);Fs=e($t,"P",{});var se=p(Fs);Vn=r(se,"TODO"),se.forEach(a),$t.forEach(a),this.h()},h(){k(H,"href","#modularity-and-typing"),k(m,"id","modularity-and-typing"),k(O,"href","#introduction"),k(_,"id","introduction"),k(g,"class","language-undefined"),k(R,"href","#creating-a-new-type"),k(T,"id","creating-a-new-type"),k(I,"class","language-typescript"),k(W,"href","#data-persistence"),k(L,"id","data-persistence"),k(P,"class","language-typescript"),k(C,"class","language-typescript"),k(J,"href","#hierarchy-aggregation-and-inheritance"),k(S,"id","hierarchy-aggregation-and-inheritance"),k(N,"class","language-typescript"),k(M,"class","language-typescript"),k(cs,"href","#layered-architectures"),k(j,"id","layered-architectures"),k(ys,"href","#other-concepts"),k(A,"id","other-concepts")},m(s,o){l(s,m,o),n(m,H),n(H,Sa),l(s,Ws,o),l(s,_,o),n(_,O),n(O,Na),l(s,Bs,o),l(s,D,o),n(D,Ma),l(s,Us,o),l(s,g,o),g.innerHTML=ne,l(s,zs,o),l(s,T,o),n(T,R),n(R,ja),l(s,qs,o),l(s,x,o),n(x,Aa),l(s,Xs,o),l(s,V,o),n(V,Ha),l(s,Ks,o),l(s,h,o),n(h,G),n(G,ws),n(ws,Oa),n(G,Da),n(h,Ra),n(h,F),n(F,bs),n(bs,xa),n(F,Va),l(s,Js,o),l(s,I,o),I.innerHTML=te,l(s,Qs,o),l(s,L,o),n(L,W),n(W,Ga),l(s,Ys,o),l(s,B,o),n(B,Es),n(Es,Fa),l(s,Zs,o),l(s,d,o),n(d,U),n(U,_s),n(_s,Wa),n(U,Ba),n(d,Ua),n(d,z),n(z,gs),n(gs,za),n(z,qa),l(s,$s,o),l(s,P,o),P.innerHTML=ee,l(s,sa,o),l(s,q,o),n(q,Ts),n(Ts,Xa),l(s,aa,o),l(s,y,o),n(y,X),n(X,Is),n(Is,Ka),n(X,Ja),n(y,Qa),n(y,K),n(K,Ls),n(Ls,Ya),n(K,Za),l(s,na,o),l(s,C,o),C.innerHTML=pe,l(s,ta,o),l(s,S,o),n(S,J),n(J,$a),l(s,ea,o),l(s,Q,o),n(Q,Ps),n(Ps,sn),l(s,pa,o),l(s,Y,o),n(Y,an),l(s,oa,o),l(s,Z,o),n(Z,nn),l(s,la,o),l(s,v,o),n(v,$),n($,Cs),n(Cs,tn),n($,en),n(v,pn),n(v,ss),n(ss,Ss),n(Ss,on),n(ss,ln),l(s,ca,o),l(s,as,o),n(as,cn),l(s,ra,o),l(s,N,o),N.innerHTML=oe,l(s,ia,o),l(s,ns,o),n(ns,Ns),n(Ns,rn),l(s,ua,o),l(s,ts,o),n(ts,un),l(s,ka,o),l(s,es,o),n(es,kn),l(s,fa,o),l(s,w,o),n(w,ps),n(ps,Ms),n(Ms,fn),n(ps,mn),n(w,hn),n(w,os),n(os,js),n(js,dn),n(os,yn),l(s,ma,o),l(s,ls,o),n(ls,vn),l(s,ha,o),l(s,M,o),M.innerHTML=le,l(s,da,o),l(s,j,o),n(j,cs),n(cs,wn),l(s,ya,o),l(s,rs,o),n(rs,As),n(As,bn),l(s,va,o),l(s,b,o),n(b,is),n(is,Hs),n(Hs,En),n(is,_n),n(b,gn),n(b,us),n(us,Os),n(Os,Tn),n(us,In),l(s,wa,o),l(s,ks,o),n(ks,Ds),n(Ds,Ln),l(s,ba,o),l(s,f,o),n(f,fs),n(fs,Rs),n(Rs,Pn),n(fs,Cn),n(f,Sn),n(f,ms),n(ms,xs),n(xs,Nn),n(ms,Mn),n(f,jn),n(f,hs),n(hs,Vs),n(Vs,An),n(hs,Hn),n(f,On),n(f,ds),n(ds,Gs),n(Gs,Dn),n(ds,Rn),l(s,Ea,o),l(s,A,o),n(A,ys),n(ys,xn),l(s,_a,o),l(s,vs,o),n(vs,Fs),n(Fs,Vn)},p:nt,i:nt,o:nt,d(s){s&&a(m),s&&a(Ws),s&&a(_),s&&a(Bs),s&&a(D),s&&a(Us),s&&a(g),s&&a(zs),s&&a(T),s&&a(qs),s&&a(x),s&&a(Xs),s&&a(V),s&&a(Ks),s&&a(h),s&&a(Js),s&&a(I),s&&a(Qs),s&&a(L),s&&a(Ys),s&&a(B),s&&a(Zs),s&&a(d),s&&a($s),s&&a(P),s&&a(sa),s&&a(q),s&&a(aa),s&&a(y),s&&a(na),s&&a(C),s&&a(ta),s&&a(S),s&&a(ea),s&&a(Q),s&&a(pa),s&&a(Y),s&&a(oa),s&&a(Z),s&&a(la),s&&a(v),s&&a(ca),s&&a(as),s&&a(ra),s&&a(N),s&&a(ia),s&&a(ns),s&&a(ua),s&&a(ts),s&&a(ka),s&&a(es),s&&a(fa),s&&a(w),s&&a(ma),s&&a(ls),s&&a(ha),s&&a(M),s&&a(da),s&&a(j),s&&a(ya),s&&a(rs),s&&a(va),s&&a(b),s&&a(wa),s&&a(ks),s&&a(ba),s&&a(f),s&&a(Ea),s&&a(A),s&&a(_a),s&&a(vs)}}}const we={title:"Data Structures and Programming Paradigms",short:"Ways of organizing and storing data and approaches to writing and structuring code",topic:"computer-science data-structures paradigms"};class be extends me{constructor(m){super(),he(this,m,null,ye,de,{})}}export{be as default,we as metadata};
